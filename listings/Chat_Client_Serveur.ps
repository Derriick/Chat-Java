%!PS-Adobe-3.0
%%Title: Makefile, AbstractRunChat.java, RunChatClient.java, RunChatServer.java, ChatClient.java, package-info.java, ServerHandler.java, UserHandler.java, Failure.java, package-info.java
%%For: Pierre
%%Creator: a2ps version 4.14
%%CreationDate: Mon May 22 21:46:34 2017
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 58
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-gray-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-gray-Prolog 2.0 1
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  0 0 0 FG
  0.9 0.9 0.9 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  0 0 0 FG
  0.8 0.8 0.8 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.9 0.9 0.9 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  1 1 1 FG
  0 0 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  0 0 0 FG
  false BG
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 1 1 FG
  0 0 0 true BG
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 6.124687 def
/cw 3.674812 def

% Dictionary for ISO-8859-1 support
/iso1dict 7 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 106.400000 mul
def
/ph
   506.511592 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 4 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (# Executables) c n
(2) # () S
(OSTYPE) l
( = $\(shell uname -s\)) p n
(3) # () S
(JAVAC) l
( = javac) p n
(4) # () S
(JAVA) l
( = java) p n
(5) # () S
(A2PS) l
( = a2ps) p n
(6) # () S
(GHOSTVIEW) l
( = gv) p n
(7) # () S
(DOCP) l
( = javadoc) p n
(8) # () S
(ARCH) l
( = zip) p n
(9) # () S
(PS2PDF) l
( = ps2pdf -dPDFX=true -sPAPERSIZE=a4) p n
(10) # () S
(DATE) l
( = $\(shell date +%Y-%m-%d\)) p n
(11) # () S
(# Ex\303\251cution de commandes dans un nouveau terminal \(changer en fct de l'OS\)) c n
(12) # () S
(TERM) l
( = xterm) p n
(13) # () S
(# Options de compilation) c n
(14) # (#CFLAGS = -verbose) N
(15) # () S
(CFLAGS) l
( =) p n
(16) # () S
(CLASSPATH) l
(=.) p n
(17) # () N
(18) # () S
(JAVAOPTIONS) l
( = --verbose) p n
(19) # () N
(20) # () S
(PROJECT) l
(=Chat_Client_Serveur) p n
(21) # () S
(# nom du fichier d'impression) c n
(22) # () S
(OUTPUT) l
( = $\(PROJECT\)) p n
(23) # () S
(# nom du r\303\251pertoire ou se situera la documentation) c n
(24) # () S
(DOC) l
( = doc) p n
(25) # () S
(# lien vers la doc en ligne du JDK) c n
(26) # () S
(WEBLINK) l
( = ") p
(https://docs.oracle.com/javase/8/docs/api/) str
(") p n
(27) # () S
(# lien vers la doc locale du JDK) c n
(28) # () S
(LOCALLINK) l
( = ") p
(file:///Users/davidroussel/Documents/docs/java/api/) str
(") p n
(29) # () S
(# nom de l'archive) c n
(30) # () S
(ARCHIVE) l
( = $\(PROJECT\)) p n
(31) # () S
(# format de l'archive pour la sauvegarde) c n
(32) # () S
(ARCHFMT) l
( = zip) p n
(33) # () S
(# R\303\251pertoire source) c n
(34) # () S
(SRC) l
( = src) p n
(35) # () S
(# R\303\251pertoire bin) c n
(36) # () S
(BIN) l
( = bin) p n
(37) # () S
(# R\303\251pertoire Listings) c n
(38) # () S
(LISTDIR) l
( = listings) p n
(39) # () S
(# R\303\251pertoire Archives) c n
(40) # () S
(ARCHDIR) l
( = archives) p n
(41) # () S
(# R\303\251pertoire Figures) c n
(42) # () S
(FIGDIR) l
( = graphics) p n
(43) # () S
(# noms des fichiers sources) c n
(44) # () S
(MAIN) l
( = examples/RunRunnableExample \\) p n
(45) # (examples/RunExampleFrame \\) N
(46) # (examples/RunListFrame \\) N
(47) # (RunChatServer \\) N
(48) # (RunChatClient) N
(49) # () S
(SOURCES) l
( = $\(SRC\)/AbstractRunChat.java \\) p n
(50) # ($\(SRC\)/RunChatClient.java \\) N
(51) # ($\(SRC\)/RunChatServer.java \\) N
(52) # ($\(SRC\)/chat/client/ChatClient.java \\) N
(53) # ($\(SRC\)/chat/client/package-info.java \\) N
(54) # ($\(SRC\)/chat/client/ServerHandler.java \\) N
(55) # ($\(SRC\)/chat/client/UserHandler.java \\) N
(56) # ($\(SRC\)/chat/Failure.java \\) N
(57) # ($\(SRC\)/chat/package-info.java \\) N
(58) # ($\(SRC\)/chat/server/ChatServer.java \\) N
(59) # ($\(SRC\)/chat/server/ClientHandler.java \\) N
(60) # ($\(SRC\)/chat/server/InputClient.java \\) N
(61) # ($\(SRC\)/chat/server/InputOutputClient.java \\) N
(62) # ($\(SRC\)/chat/server/package-info.java \\) N
(63) # ($\(SRC\)/chat/UserOutputType.java \\) N
(64) # ($\(SRC\)/chat/Vocabulary.java \\) N
(65) # ($\(SRC\)/examples/package-info.java \\) N
(66) # ($\(SRC\)/examples/RunExampleFrame.java \\) N
(67) # ($\(SRC\)/examples/RunListFrame.java \\) N
(68) # ($\(SRC\)/examples/RunnableExample.java \\) N
(69) # ($\(SRC\)/examples/RunRunnableExample.java \\) N
(70) # ($\(SRC\)/examples/TestMessageStream.java \\) N
(71) # ($\(SRC\)/examples/widgets/ExampleFrame.java \\) N
(72) # ($\(SRC\)/examples/widgets/ListExampleFrame.java \\) N
(73) # ($\(SRC\)/logger/LoggerFactory.java \\) N
(74) # ($\(SRC\)/logger/package-info.java \\) N
(75) # ($\(SRC\)/models/Message.java \\) N
(76) # ($\(SRC\)/models/NameSetListModel.java \\) N
(77) # ($\(SRC\)/models/AuthorListFilter.java \\) N
(78) # ($\(SRC\)/models/package-info.java \\) N
(79) # ($\(SRC\)/widgets/AbstractClientFrame.java \\) N
(80) # ($\(SRC\)/widgets/ClientFrame.java \\) N
(81) # ($\(SRC\)/widgets/ClientFrame2.java \\) N
(82) # ($\(SRC\)/widgets/package-info.java \\) N
(Makefile) (Page 1/3) (mai 15, 17 17:08) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # ($\(foreach name, $\(MAIN\), $\(SRC\)/$\(name\).java\)) p n
(84) # () N
(85) # () S
(OTHER) l
( = readme.txt \\) p n
(86) # (reponses.txt \\) N
(87) # (Sujet.pdf \\) N
(88) # (MAJ.pdf \\) N
(89) # ($\(SRC\)/examples/icons/add_user-16.png \\) N
(90) # ($\(SRC\)/examples/icons/add_user-32.png \\) N
(91) # ($\(SRC\)/examples/icons/bg_blue-16.png \\) N
(92) # ($\(SRC\)/examples/icons/bg_blue-32.png \\) N
(93) # ($\(SRC\)/examples/icons/bg_color-32.png \\) N
(94) # ($\(SRC\)/examples/icons/bg_red-16.png \\) N
(95) # ($\(SRC\)/examples/icons/bg_red-32.png \\) N
(96) # ($\(SRC\)/examples/icons/delete_sign-16.png \\) N
(97) # ($\(SRC\)/examples/icons/delete_sign-32.png \\) N
(98) # ($\(SRC\)/examples/icons/erase-16.png \\) N
(99) # ($\(SRC\)/examples/icons/erase-32.png \\) N
(100) # ($\(SRC\)/examples/icons/remove_user-16.png \\) N
(101) # ($\(SRC\)/examples/icons/remove_user-32.png \\) N
(102) # ($\(SRC\)/icons/cancel-16.png \\) N
(103) # ($\(SRC\)/icons/cancel-32.png \\) N
(104) # ($\(SRC\)/icons/clock-16.png \\) N
(105) # ($\(SRC\)/icons/clock-32.png \\) N
(106) # ($\(SRC\)/icons/delete_database-16.png \\) N
(107) # ($\(SRC\)/icons/delete_database-32.png \\) N
(108) # ($\(SRC\)/icons/disconnected-16.png \\) N
(109) # ($\(SRC\)/icons/disconnected-32.png \\) N
(110) # ($\(SRC\)/icons/erase-16.png \\) N
(111) # ($\(SRC\)/icons/erase-32.png \\) N
(112) # ($\(SRC\)/icons/erase2-16.png \\) N
(113) # ($\(SRC\)/icons/erase2-32.png \\) N
(114) # ($\(SRC\)/icons/filled_filter-16.png \\) N
(115) # ($\(SRC\)/icons/filled_filter-32.png \\) N
(116) # ($\(SRC\)/icons/gender_neutral_user-16.png \\) N
(117) # ($\(SRC\)/icons/gender_neutral_user-32.png \\) N
(118) # ($\(SRC\)/icons/logout-16.png \\) N
(119) # ($\(SRC\)/icons/logout-32.png \\) N
(120) # ($\(SRC\)/icons/remove_user-16.png \\) N
(121) # ($\(SRC\)/icons/remove_user-32.png \\) N
(122) # ($\(SRC\)/icons/select_all-16.png \\) N
(123) # ($\(SRC\)/icons/select_all-32.png \\) N
(124) # ($\(SRC\)/icons/sent-16.png \\) N
(125) # ($\(SRC\)/icons/sent-32.png) N
(126) # () N
(127) # (.PHONY : doc ps) N
(128) # () N
(129) # () S
(# Les targets de compilation) c n
(130) # (# pour g\303\251n\303\251rer l'application) N
(131) # () S
(all) L
( : $\(foreach name, $\(MAIN\), $\(BIN\)/$\(name\).class\)) p n
(132) # () N
(133) # () S
(#r\303\250gle de compilation g\303\251n\303\251rique) c n
(134) # () S
($\(BIN\)/%.class : $\(SRC\)/%.java) p n
(135) # () S 4 T ($\(JAVAC\) -sourcepath $\(SRC\) -classpath $\(BIN\):$\(CLASSPATH\) -d $\(BIN\) $\(CFLAGS\) $<) N
(136) # () N
(137) # () S
(# Edition des sources $\(EDITOR\) doit \303\252tre une variable d'environnement) c n
(138) # () S
(edit) L
( :) p n
(139) # () S 4 T ($\(EDITOR\) $\(SOURCES\) Makefile &) N
(140) # () N
(141) # () S
(# nettoyer le r\303\251pertoire) c n
(142) # () S
(clean) L
( :) p n
(143) # () S 4 T (find bin/ -type f -name ") S
(*.class) str
(" -exec rm -f {} \\;) p n
(144) # () S 4 T (rm -rf *~ *.log* $\(DOC\)/* $\(LISTDIR\)/*) N
(145) # () N
(146) # () S
(#realclean : clean) c n
(147) # (#) S 4 T (rm -f $\(ARCHDIR\)/*.$\(ARCHFMT\) ) N
(148) # () N
(149) # (# g\303\251n\303\251rer le listing) N
(150) # () S
($\(LISTDIR\)) L
( : ) p n
(151) # () S 4 T (mkdir $\(LISTDIR\)) N
(152) # () N
(153) # () S
(ps) L
( : $\(LISTDIR\)) p n
(154) # () S 4 T ($\(A2PS\) -2 --file-align=fill --line-numbers=1 --font-size=10 \\) N
(155) # () S 4 T (--chars-per-line=100 --tabsize=4 --pretty-print \\) N
(156) # () S 4 T (--highlight-level=heavy --prologue=") S
(gray) str
(" \\) p n
(157) # () S 4 T (-o$\(LISTDIR\)/$\(OUTPUT\).ps Makefile $\(SOURCES\)) N
(158) # () N
(159) # () S
(pdf) L
( : ps ) p n
(160) # () S 4 T ($\(PS2PDF\) $\(LISTDIR\)/$\(OUTPUT\).ps $\(LISTDIR\)/$\(OUTPUT\).pdf) N
(161) # () N
(162) # () S
(# g\303\251n\303\251rer le listing lisible pour G\303\251rard) c n
(163) # () S
(bigps) L
( :) p n
(164) # () S 4 T ($\(A2PS\) -1 --file-align=fill --line-numbers=1 --font-size=10 \\) N
(Makefile) (Page 2/3) (mai 15, 17 17:08) title
border
grestore
(Printed by Pierre) rhead
(Makefile) (1/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3,1) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T (--chars-per-line=100 --tabsize=4 --pretty-print \\) N
(166) # () S 4 T (--highlight-level=heavy --prologue=") S
(gray) str
(" \\) p n
(167) # () S 4 T (-o$\(LISTDIR\)/$\(OUTPUT\).ps Makefile $\(SOURCES\)) N
(168) # () N
(169) # () S
(bigpdf) L
( : bigps) p n
(170) # () S 4 T ($\(PS2PDF\) $\(LISTDIR\)/$\(OUTPUT\).ps $\(LISTDIR\)/$\(OUTPUT\).pdf) N
(171) # () N
(172) # () S
(# voir le listing) c n
(173) # () S
(preview) L
( : ps) p n
(174) # () S 4 T ($\(GHOSTVIEW\) $\(LISTDIR\)/$\(OUTPUT\); rm -f $\(LISTDIR\)/$\(OUTPUT\) $\(LISTDIR\)/$\(OUTPUT\)~) N
(175) # () N
(176) # () S
(# g\303\251n\303\251rer la doc avec javadoc) c n
(177) # () S
(doc) L
( : $\(SOURCES\)) p n
(178) # () S 4 T ($\(DOCP\) -private -d $\(DOC\) -author -link $\(LOCALLINK\) $\(SOURCES\)) N
(179) # () S
(#) c 4 T ($\(DOCP\) -private -d $\(DOC\) -author -linkoffline $\(WEBLINK\) $\(LOCALLINK\) $\(SOURCES\)) N
(180) # () N
(181) # (# g\303\251n\303\251rer une archive de sauvegarde) N
(182) # () S
($\(ARCHDIR\)) L
( : ) p n
(183) # () S 4 T (mkdir $\(ARCHDIR\)) N
(184) # () N
(185) # () S
(archive) L
( : pdf $\(ARCHDIR\)) p n
(186) # () S 4 T ($\(ARCH\) $\(ARCHDIR\)/$\(ARCHIVE\).$\(ARCHFMT\) $\(SOURCES\) $\(LISTDIR\)/*.pdf \\) N
(187) # () S 4 T ($\(FIGDIR\)/*.pdf $\(OTHER\) $\(BIN\) Makefile $\(FIGDIR\)/*.pdf) N
(188) # () N
(189) # () S
(# ex\303\251cution des programmes de test) c n
(190) # () S
(run) L
( : all) p n
(191) # () S 4 T ($\(foreach name, $\(MAIN\), $\(TERM\) -e $\(JAVA\) -classpath $\(BIN\):$\(CLASSPATH\) $\(name\) $\(JAVAOPTIONS) N
0 T (\) & \)) N
(192) # () N
(193) # () S
(# Lancement d'un serveur) c n
(194) # () S
(runserver) L
( : all) p n
(195) # () S 4 T ($\(TERM\)  -title server -e $\(JAVA\) -classpath $\(BIN\):$\(CLASSPATH\) RunChatServer --noquit &) N
(196) # () N
(197) # () S
(# Lancement d'un client console) c n
(198) # () S
(runclient) L
( : all) p n
(199) # () S 4 T ($\(TERM\) -title ") S
(Zebulon) str
(" -e $\(JAVA\) -classpath $\(BIN\):$\(CLASSPATH\) RunChatClient --name Z\303\251bulon ) p n
0 T (&) N
(200) # () N
(201) # () S
(# Lancement d'un client graphique version 1) c n
(202) # () S
(rungui1) L
( : all) p n
(203) # () S 4 T ($\(JAVA\) -classpath $\(BIN\):$\(CLASSPATH\) RunChatClient --name T\303\251n\303\251phore --gui 1 ) N
(204) # () N
(205) # () S
(# Lancement d'un client graphique version 2) c n
(206) # () S
(rungui2) L
( : all) p n
(207) # () S 4 T ($\(JAVA\) -classpath $\(BIN\):$\(CLASSPATH\) RunChatClient --verbose --name Z\303\251phirine --gui 2 ) N
(208) # () N
(209) # () S
(# Lancement d'un serveur, puis de 2 clients \(l'un console, l'autre graphique\)) c 80 T () S 84 T () N
(210) # () S
(rundemo) L
( : all) p n
(211) # () S 4 T ($\(TERM\)  -title server -e $\(JAVA\) -classpath $\(BIN\):$\(CLASSPATH\) RunChatServer & \\) N
(212) # () S 4 T (sleep 10;) N
(213) # () S 4 T ($\(TERM\) -title ") S
(Z\303\251bulon) str
(" -e $\(JAVA\) -classpath $\(BIN\):$\(CLASSPATH\) RunChatClient --name Zebulon) p n
0 T ( & \\) N
(214) # () S 4 T ($\(JAVA\) -classpath $\(BIN\):$\(CLASSPATH\) RunChatClient --name T\303\251n\303\251phore --gui 1 & \\) N
(215) # () S 4 T ($\(JAVA\) -classpath $\(BIN\):$\(CLASSPATH\) RunChatClient --name Anatole --gui 2;) N
(Makefile) (Page 3/3) (mai 15, 17 17:08) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (import) K
( java.io.IOException;) p n
(2) # () S
(import) K
( java.util.logging.Level;) p n
(3) # () S
(import) K
( java.util.logging.Logger;) p n
(4) # () N
(5) # () S
(import) K
( chat.Failure;) p n
(6) # () S
(import) K
( logger.LoggerFactory;) p n
(7) # () N
(8) # () S
(/**) C n
(9) # ( * Classe abstraite de base pour lancer un client ou un serveur de chat) N
(10) # ( * @author davidroussel) N
(11) # ( */) N
(12) # () S
(public) K
( ) p
(abstract) K
( ) p
(class) K
( ) p
(AbstractRunChat) L n
(13) # () S
({) p n
(14) # () S 4 T () S
(/**) C n
(15) # () S 4 T ( * Port \303\240 utiliser pour les connnections entre clients et serveur) N
(16) # () S 4 T ( */) N
(17) # () S
() p 4 T () S
(protected) K
( ) p
(int) k
( port;) p n
(18) # () N
(19) # () S 4 T () S
(/**) C n
(20) # () S 4 T ( * numero de port de communication par d\303\251faut) N
(21) # () S 4 T ( */) N
(22) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(final) K
( ) p
(int) k
( DEFAULTPORT = 1394;) p n
(23) # () N
(24) # () S 4 T () S
(/**) C n
(25) # () S 4 T ( * Etat de verbose. Si true les messages de debug seront) N
(26) # () S 4 T ( * affich\303\251s. Si false les messages de debug ne seront pas affich\303\251s) N
(27) # () S 4 T ( */) N
(28) # () S
() p 4 T () S
(protected) K
( ) p
(boolean) k
( verbose;) p n
(29) # () N
(30) # () S 4 T () S
(/**) C n
(31) # () S 4 T ( * Le logger utilis\303\251 pour afficher \(ou pas\) les messages d'infos et) N
(32) # () S 4 T ( * d'erreurs.) N
(33) # () S 4 T ( */) N
(34) # () S
() p 4 T () S
(protected) K
( Logger logger;) p n
(35) # () N
(36) # () S 4 T () S
(/**) C n
(37) # () S 4 T ( * Constructeur d'un client ou d'un serveur de chat d'apr\303\250s les arguments) N
(38) # () S 4 T ( * fournis au programme principal) N
(39) # () S 4 T ( * @param args les arguments fournis au programme principal en vue de) N
(40) # () S 4 T ( * mettre en place certaines options particuli\303\250re \303\240 un client ou un serveur) N
(41) # () S 4 T ( * Recherche des valeurs pour {@link #port} et {@link #verbose} dans les) N
(42) # () S 4 T ( * cha\303\256nes de caract\303\250res fournis en arguments) N
(43) # () S 4 T ( */) N
(44) # () S
() p 4 T () S
(protected) K
( AbstractRunChat\(String[] args\)) p n
(45) # () S 4 T ({) N
(46) # () S 4 T () S 8 T (setAttributes\(args\);) N
(47) # () S 4 T (}) N
(48) # () N
(49) # () S 4 T () S
(/**) C n
(50) # () S 4 T ( * Mise en place des valeurs des attributs et parsing des arguments) N
(51) # () S 4 T ( * @param args les arguments fournis au programme principal en vue de) N
(52) # () S 4 T ( * mettre en place certaines options particuli\303\250re \303\240 un client ou un serveur) N
(53) # () S 4 T ( * Recherche des valeurs pour {@link #port} et {@link #verbose} dans les) N
(54) # () S 4 T ( * cha\303\256nes de caract\303\250res fournis en arguments) N
(55) # () S 4 T ( */) N
(56) # () S
() p 4 T () S
(protected) K
( ) p
(void) k
( setAttributes\(String[] args\)) p n
(57) # () S 4 T ({) N
(58) # () S 4 T () S 8 T () S
(/*) c n
(59) # () S 4 T () S 8 T ( * On met d'abord les attributs locaux \303\240 leur valeur par d\303\251faut) N
(60) # () S 4 T () S 8 T ( */) N
(61) # () S
() p 4 T () S 8 T (port = DEFAULTPORT;) N
(62) # () S 4 T () S 8 T (verbose = ) S
(false) k
(;) p n
(63) # () N
(64) # () S 4 T () S 8 T () S
(/*) c n
(65) # () S 4 T () S 8 T ( * parsing des arguments) N
(66) # () S 4 T () S 8 T ( * ) S 12 T (-v | --verbose : si verbose affichage des messages dans la console) N
(67) # () S 4 T () S 8 T ( * ) S 12 T () S 16 T (sinon affichage des messages dans un fichier de log portant) N
(68) # () S 4 T () S 8 T ( * ) S 12 T () S 16 T (le nom de la classe qui l'instancie.log) N
(69) # () S 4 T () S 8 T ( * ) S 12 T (-p | --port : port \303\240 utiliser pour la serverSocket) N
(70) # () S 4 T () S 8 T ( */) N
(71) # () S
() p 4 T () S 8 T () S
(for) K
( \() p
(int) k
( i=0; i < args.length; i++\)) p n
(72) # () S 4 T () S 8 T ({) N
(73) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(args[i].startsWith\(") p
(-) str
("\)\) ) p
(// option argument) c n
(74) # () S
() p 4 T () S 8 T () S 12 T ({) N
(75) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(args[i].equals\(") p
(--verbose) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-v) str
("\)\)) p n
(76) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(77) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (System.out.println\(") S
(Setting verbose on) str
("\);) p n
(78) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (verbose = ) S
(true) k
(;) p n
(79) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(80) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(args[i].equals\(") p
(--port) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-p) str
("\)\)) p n
(81) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(82) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (System.out.print\(") S
(Setting port to: ) str
("\);) p n
(AbstractRunChat.java) (Page 1/2) (avril 13, 16 18:53) title
border
grestore
(Printed by Pierre) rhead
(Makefile, src/AbstractRunChat.java) (2/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2,1) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(i < \(args.length - 1\)\)) p n
(84) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(85) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(// recherche du num\303\251ro de port dans le prochain argument) c n
(86) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (Integer portInteger = readInt\(args[++i]\);) N
(87) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(if) K
( \(portInteger ) p
(\271) sy
( ) p
(null) k
(\)) p n
(88) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(89) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(int) k
( readPort = portInteger.intValue\(\);) p n
(90) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(if) K
( \(readPort ) p
(\263) sy
( 1024\)) p n
(91) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T ({) N
(92) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (port = readPort;) N
(93) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (}) N
(94) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(else) K n
(95) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T ({) N
(96) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (System.err.println\(Failure.INVALID_PORT\);) N
(97) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (System.exit\(Failure.INVALID_PORT.toInteger\(\)\);) N
(98) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (}) N
(99) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(100) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (System.out.println\(port\);) N
(101) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(102) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(else) K n
(103) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(104) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (System.out.println\(") S
(nothing, invalid value) str
("\);) p n
(105) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(106) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(107) # () S 4 T () S 8 T () S 12 T (}) N
(108) # () S 4 T () S 8 T (}) N
(109) # () N
(110) # () S 4 T () S 8 T () S
(/*) c n
(111) # () S 4 T () S 8 T ( * Cr\303\251ation du logger) N
(112) # () S 4 T () S 8 T ( */) N
(113) # () S
() p 4 T () S 8 T (logger = ) S
(null) k
(;) p n
(114) # () S 4 T () S 8 T (Class<?> runningClass = getClass\(\);) N
(115) # () S 4 T () S 8 T (String logFilename =) N
(116) # () S 4 T () S 8 T (    \(verbose ? ) S
(null) k
( : runningClass.getSimpleName\(\) + ") p
(.log) str
("\);) p n
(117) # () S 4 T () S 8 T (Logger parent = Logger.getLogger\(Logger.GLOBAL_LOGGER_NAME\);) N
(118) # () S 4 T () S 8 T (Level level = \(verbose ? Level.ALL : Level.WARNING\);) N
(119) # () S 4 T () S 8 T () S
(try) K n
(120) # () S
() p 4 T () S 8 T ({) N
(121) # () S 4 T () S 8 T () S 12 T (logger = LoggerFactory.getLogger\(runningClass,) N
(122) # () S 4 T () S 8 T () S 12 T (                                 verbose,) N
(123) # () S 4 T () S 8 T () S 12 T (                                 logFilename,) N
(124) # () S 4 T () S 8 T () S 12 T (                                 ) S
(false) k
(,) p n
(125) # () S 4 T () S 8 T () S 12 T (                                 parent,) N
(126) # () S 4 T () S 8 T () S 12 T (                                 level\);) N
(127) # () S 4 T () S 8 T (}) N
(128) # () S 4 T () S 8 T () S
(catch) K
( \(IOException ex\)) p n
(129) # () S 4 T () S 8 T ({) N
(130) # () S 4 T () S 8 T () S 12 T (ex.printStackTrace\(\);) N
(131) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.OTHER.toInteger\(\)\);) N
(132) # () S 4 T () S 8 T (}) N
(133) # () S 4 T (}) N
(134) # () N
(135) # () S 4 T () S
(/**) C n
(136) # () S 4 T ( * Une fois le client ou le serveur pr\303\252t, on lance son ex\303\251cution) N
(137) # () S 4 T ( */) N
(138) # () S
() p 4 T () S
(protected) K
( ) p
(abstract) K
( ) p
(void) k
( launch\(\);) p n
(139) # () N
(140) # () S 4 T () S
(/**) C n
(141) # () S 4 T ( * Lecture d'un entier \303\240 partir d'une cha\303\256ne de caract\303\250res) N
(142) # () S 4 T ( * @param s la chaine \303\240 lire) N
(143) # () S 4 T ( * @return l'entier pars\303\251 dans la chaine de caract\303\250re ou bien null) N
(144) # () S 4 T ( * s'il s'est produit une erreur de parsing) N
(145) # () S 4 T ( */) N
(146) # () S
() p 4 T () S
(protected) K
( Integer readInt\(String s\)) p n
(147) # () S 4 T ({) N
(148) # () S 4 T () S 8 T () S
(try) K n
(149) # () S
() p 4 T () S 8 T ({) N
(150) # () S 4 T () S 8 T () S 12 T (Integer value = ) S
(new) K
( Integer\(Integer.parseInt\(s\)\);) p n
(151) # () S 4 T () S 8 T () S 12 T () S
(return) K
( value;) p n
(152) # () S 4 T () S 8 T (}) N
(153) # () S 4 T () S 8 T () S
(catch) K
( \(NumberFormatException e\)) p n
(154) # () S 4 T () S 8 T ({) N
(155) # () S 4 T () S 8 T () S 12 T () S
(// System.err.println\("readInt: " + s + " is not a number"\);) c n
(156) # () S
() p 4 T () S 8 T () S 12 T (logger.warning\(") S
(readInt: ) str
(" + s + ") p
( is not a number) str
("\);) p n
(157) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(null) k
(;) p n
(158) # () S 4 T () S 8 T (}) N
(159) # () S 4 T (}) N
(160) # (}) N
(AbstractRunChat.java) (Page 2/2) (avril 13, 16 18:53) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (import) K
( java.awt.EventQueue;) p n
(2) # () S
(import) K
( java.io.IOException;) p n
(3) # () S
(import) K
( java.io.InputStream;) p n
(4) # () S
(import) K
( java.io.OutputStream;) p n
(5) # () S
(import) K
( java.io.PipedInputStream;) p n
(6) # () S
(import) K
( java.io.PipedOutputStream;) p n
(7) # () S
(import) K
( java.net.InetAddress;) p n
(8) # () S
(import) K
( java.net.UnknownHostException;) p n
(9) # () S
(import) K
( java.util.Vector;) p n
(10) # () N
(11) # () S
(import) K
( chat.Failure;) p n
(12) # () S
(import) K
( chat.UserOutputType;) p n
(13) # () S
(import) K
( chat.client.ChatClient;) p n
(14) # () S
(import) K
( widgets.AbstractClientFrame;) p n
(15) # () S
(import) K
( widgets.ClientFrame;) p n
(16) # () S
(import) K
( widgets.ClientFrame2;) p n
(17) # () N
(18) # () S
(/**) C n
(19) # ( * Lanceur d'un client de chat.) N
(20) # ( *) N
(21) # ( * @author davidroussel) N
(22) # ( */) N
(23) # () S
(public) K
( ) p
(class) K
( ) p
(RunChatClient) L
( ) p
(extends) K
( AbstractRunChat) p n
(24) # ({) N
(25) # () S 4 T () S
(/**) C n
(26) # () S 4 T ( * H\303\264te sur lequel se trouve le serveur de chat) N
(27) # () S 4 T ( */) N
(28) # () S
() p 4 T () S
(private) K
( String host;) p n
(29) # () N
(30) # () S 4 T () S
(/**) C n
(31) # () S 4 T ( * Nom d'utilisateur \303\240 utiliser pour se connecter au serveur. Si le nom) N
(32) # () S 4 T ( * n'est pas fournit) N
(33) # () S 4 T ( */) N
(34) # () S
() p 4 T () S
(private) K
( String name;) p n
(35) # () N
(36) # () S 4 T () S
(/**) C n
(37) # () S 4 T ( * Flux d'entr\303\251e sur lequel lire les messages tap\303\251s par l'utilisateur) N
(38) # () S 4 T ( */) N
(39) # () S
() p 4 T () S
(private) K
( InputStream userIn;) p n
(40) # () N
(41) # () S 4 T () S
(/**) C n
(42) # () S 4 T ( * Flux de sortie sur lequel envoyer les messages vers l'utilisateur) N
(43) # () S 4 T ( */) N
(44) # () S
() p 4 T () S
(private) K
( OutputStream userOut;) p n
(45) # () N
(46) # () S 4 T () S
(/**) C n
(47) # () S 4 T ( * Indique si le client \303\240 cr\303\251er est un GUI ou pas) N
(48) # () S 4 T ( */) N
(49) # () S
() p 4 T () S
(private) K
( ) p
(boolean) k
( gui;) p n
(50) # () N
(51) # () S 4 T () S
(/**) C n
(52) # () S 4 T ( * La version de l'interface graphique \303\240 lancer:) N
(53) # () S 4 T ( * <ul>) N
(54) # () S 4 T ( * ) S 8 T (<li>version 1 correspond \303\240 l'utilisation d'une ClientFrame</li>) N
(55) # () S 4 T ( * ) S 8 T (<li>version 2 correspond \303\240 l'utilisation d'une SuperClientFrame</li>) N
(56) # () S 4 T ( * </ul>) N
(57) # () S 4 T ( */) N
(58) # () S
() p 4 T () S
(private) K
( ) p
(int) k
( guiVersion;) p n
(59) # () N
(60) # () S 4 T () S
(/**) C n
(61) # () S 4 T ( * Ensemble des threads des clients.) N
(62) # () S 4 T ( * Il faudra attendre la fin de ces threads pour terminer l'ex\303\251cution) N
(63) # () S 4 T ( * principal.) N
(64) # () S 4 T ( */) N
(65) # () S
() p 4 T () S
(private) K
( Vector<Thread> threadPool;) p n
(66) # () N
(67) # () S 4 T () S
(/**) C n
(68) # () S 4 T ( * Constructeur d'un lanceur de client d'apr\303\250s les arguments du programme) N
(69) # () S 4 T ( * principal) N
(70) # () S 4 T ( *) N
(71) # () S 4 T ( * @param args les arguments du programme principal) N
(72) # () S 4 T ( */) N
(73) # () S
() p 4 T () S
(protected) K
( RunChatClient\(String[] args\)) p n
(74) # () S 4 T ({) N
(75) # () S 4 T () S 8 T () S
(super) K
(\(args\);) p n
(76) # () N
(77) # () S 4 T () S 8 T () S
(/*) c n
(78) # () S 4 T () S 8 T ( * Initialisation des flux d'I/O utilisateur \303\240 null) N
(79) # () S 4 T () S 8 T ( * ils d\303\251pendront du client \303\240 cr\303\251er \(console ou GUI\)) N
(80) # () S 4 T () S 8 T ( */) N
(81) # () S
() p 4 T () S 8 T (userIn = ) S
(null) k
(;) p n
(82) # () S 4 T () S 8 T (userOut = ) S
(null) k
(;) p n
(RunChatClient.java) (Page 1/5) (mai 22, 17 11:24) title
border
grestore
(Printed by Pierre) rhead
(src/AbstractRunChat.java, src/RunChatClient.java) (3/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p n
(84) # () S 4 T () S 8 T () S
(/*) c n
(85) # () S 4 T () S 8 T ( * Initialisation du pool de thread des clients) N
(86) # () S 4 T () S 8 T ( */) N
(87) # () S
() p 4 T () S 8 T (threadPool = ) S
(new) K
( Vector<Thread>\(\);) p n
(88) # () S 4 T (}) N
(89) # () N
(90) # () S 4 T () S
(/**) C n
(91) # () S 4 T ( * Mise en place des attributs du client de chat en fonction des arguments) N
(92) # () S 4 T ( * utilis\303\251s dans la ligne de commande) N
(93) # () S 4 T ( * @param args les arguments fournis au programme principal.) N
(94) # () S 4 T ( */) N
(95) # () S
() p 4 T (@Override) N
(96) # () S 4 T () S
(protected) K
( ) p
(void) k
( setAttributes\(String[] args\)) p n
(97) # () S 4 T ({) N
(98) # () S 4 T () S 8 T () S
(/*) c n
(99) # () S 4 T () S 8 T ( * parsing des arguments communs aux clients et serveur) N
(100) # () S 4 T () S 8 T ( * -v | --verbose) N
(101) # () S 4 T () S 8 T ( * -p | --port : port \303\240 utiliser pour la serverSocket) N
(102) # () S 4 T () S 8 T ( */) N
(103) # () S
() p 4 T () S 8 T (super.setAttributes\(args\);) N
(104) # () N
(105) # () S 4 T () S 8 T () S
(/*) c n
(106) # () S 4 T () S 8 T ( * On met d'abord les attributs locaux \303\240 leur valeur par d\303\251faut) N
(107) # () S 4 T () S 8 T ( */) N
(108) # () S
() p 4 T () S 8 T (host = ) S
(null) k
(;) p n
(109) # () S 4 T () S 8 T (name = ) S
(null) k
(;) p n
(110) # () S 4 T () S 8 T (gui = ) S
(false) k
(;) p n
(111) # () N
(112) # () S 4 T () S 8 T () S
(/*) c n
(113) # () S 4 T () S 8 T ( * parsing des arguments sp\303\251cifique au client) N
(114) # () S 4 T () S 8 T ( * -h | --host : nom ou adresse IP du serveur) N
(115) # () S 4 T () S 8 T ( * -n | --name : nom d'utilisateur) N
(116) # () S 4 T () S 8 T ( * -g | --gui : pour lancer le client GUI) N
(117) # () S 4 T () S 8 T ( */) N
(118) # () S
() p 4 T () S 8 T () S
(for) K
( \() p
(int) k
( i = 0; i < args.length; i++\)) p n
(119) # () S 4 T () S 8 T ({) N
(120) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(args[i].equals\(") p
(--host) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-h) str
("\)\)) p n
(121) # () S 4 T () S 8 T () S 12 T ({) N
(122) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(i < \(args.length - 1\)\)) p n
(123) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(124) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// parse next arg for in port value) c n
(125) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (host = args[++i];) N
(126) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.fine\(") S
(Setting host to ) str
(" + host\);) p n
(127) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(128) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(129) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(130) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.warning\(") S
(Setting host to: nothing, invalid value) str
("\);) p n
(131) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(132) # () S 4 T () S 8 T () S 12 T (}) N
(133) # () S 4 T () S 8 T () S 12 T () S
(else) K
( ) p
(if) K
( \(args[i].equals\(") p
(--name) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-n) str
("\)\)) p n
(134) # () S 4 T () S 8 T () S 12 T ({) N
(135) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(i < \(args.length - 1\)\)) p n
(136) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(137) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// parse next arg for in port value) c n
(138) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (name = args[++i];) N
(139) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.fine\(") S
(Setting user name to: ) str
(" + name\);) p n
(140) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(141) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(142) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(143) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.warning\(") S
(Setting user name to: nothing, invalid value) str
("\);) p n
(144) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(145) # () S 4 T () S 8 T () S 12 T (}) N
(146) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(args[i].equals\(") p
(--gui) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-g) str
("\)\)) p n
(147) # () S 4 T () S 8 T () S 12 T ({) N
(148) # () S 4 T () S 8 T () S 12 T () S 16 T (gui = ) S
(true) k
(;) p n
(149) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(i < \(args.length - 1\)\)) p n
(150) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(151) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// parse next arg for gui version) c n
(152) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(try) K n
(153) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(154) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (guiVersion = Integer.parseInt\(args[++i]\);) N
(155) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(if) K
( \(guiVersion < 1\)) p n
(156) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(157) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (guiVersion = 1;) N
(158) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(159) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(else) K
( ) p
(if) K
( \(guiVersion > 2\)) p n
(160) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(161) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (guiVersion = 2;) N
(162) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(163) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(164) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(catch) K
( \(NumberFormatException nfe\)) p n
(RunChatClient.java) (Page 2/5) (mai 22, 17 11:24) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(166) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.warning\(") S
(Invalid gui number, revert to 1) str
("\);) p n
(167) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (guiVersion = 1;) N
(168) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(169) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.fine\(") S
(Setting gui to ) str
(" + guiVersion\);) p n
(170) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(171) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(172) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(173) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.warning\(") S
(ReSetting gui version to 1, invalid value) str
("\);) p n
(174) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (guiVersion = 1;) N
(175) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(176) # () S 4 T () S 8 T () S 12 T (}) N
(177) # () S 4 T () S 8 T (}) N
(178) # () N
(179) # () S 4 T () S 8 T () S
(if) K
( \(host ) p
(\272) sy
( ) p
(null) k
(\) ) p
(// on va chercher local host) c n
(180) # () S
() p 4 T () S 8 T ({) N
(181) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(182) # () S
() p 4 T () S 8 T () S 12 T ({) N
(183) # () S 4 T () S 8 T () S 12 T () S 16 T (host = InetAddress.getLocalHost\(\).getHostName\(\);) N
(184) # () S 4 T () S 8 T () S 12 T (}) N
(185) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(UnknownHostException e\)) p n
(186) # () S 4 T () S 8 T () S 12 T ({) N
(187) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(Failure.NO_LOCAL_HOST.toString\(\)\);) N
(188) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(189) # () S 4 T () S 8 T () S 12 T () S 16 T (System.exit\(Failure.NO_LOCAL_HOST.toInteger\(\)\);) N
(190) # () S 4 T () S 8 T () S 12 T (}) N
(191) # () S 4 T () S 8 T (}) N
(192) # () N
(193) # () S 4 T () S 8 T () S
(if) K
( \(name ) p
(\272) sy
( ) p
(null) k
(\) ) p
(// on va chercher le nom de l'utilisateur) c n
(194) # () S
() p 4 T () S 8 T ({) N
(195) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(196) # () S
() p 4 T () S 8 T () S 12 T ({) N
(197) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Try LOGNAME on unix type systems) c n
(198) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (name = System.getenv\(") S
(LOGNAME) str
("\);) p n
(199) # () S 4 T () S 8 T () S 12 T (}) N
(200) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(NullPointerException npe\)) p n
(201) # () S 4 T () S 8 T () S 12 T ({) N
(202) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(no LOGNAME found, trying USERNAME) str
("\);) p n
(203) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(try) K n
(204) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(205) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Try USERNAME on other systems) c n
(206) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (name = System.getenv\(") S
(USERNAME) str
("\);) p n
(207) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(208) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(catch) K
( \(NullPointerException npe2\)) p n
(209) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(210) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.severe\(Failure.NO_USER_NAME + ") S
( abort) str
("\);) p n
(211) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (System.exit\(Failure.NO_USER_NAME.toInteger\(\)\);) N
(212) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(213) # () S 4 T () S 8 T () S 12 T (}) N
(214) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(SecurityException se\)) p n
(215) # () S 4 T () S 8 T () S 12 T ({) N
(216) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(Failure.NO_ENV_ACCESS + ") S
( !) str
("\);) p n
(217) # () S 4 T () S 8 T () S 12 T () S 16 T (System.exit\(Failure.NO_ENV_ACCESS.toInteger\(\)\);) N
(218) # () S 4 T () S 8 T () S 12 T (}) N
(219) # () S 4 T () S 8 T (}) N
(220) # () S 4 T (}) N
(221) # () N
(222) # () S 4 T () S
(/**) C n
(223) # () S 4 T ( * Lancement du ChatClient) N
(224) # () S 4 T ( */) N
(225) # () S
() p 4 T (@Override) N
(226) # () S 4 T () S
(protected) K
( ) p
(void) k
( launch\(\)) p n
(227) # () S 4 T ({) N
(228) # () S 4 T () S 8 T () S
(/*) c n
(229) # () S 4 T () S 8 T ( * Create and Launch client) N
(230) # () S 4 T () S 8 T ( */) N
(231) # () S
() p 4 T () S 8 T (logger.info\(") S
(Creating client to ) str
(" + host + ") p
( at port ) str
(" + port) p n
(232) # () S 4 T () S 8 T () S 12 T () S 16 T (+ ") S
( with verbose ) str
(" + \(verbose ? ") p
(on) str
(" : ") p
(off ... ) str
("\)\);) p n
(233) # () N
(234) # () S 4 T () S 8 T (Boolean commonRun;) N
(235) # () N
(236) # () S 4 T () S 8 T () S
(if) K
( \(gui\)) p n
(237) # () S 4 T () S 8 T ({) N
(238) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(System.getProperty\(") p
(os.name) str
("\).startsWith\(") p
(Mac OS) str
("\)\)) p n
(239) # () S 4 T () S 8 T () S 12 T ({) N
(240) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Met en place le menu en haut de l'\303\251cran plut\303\264t que dans l'application) c n
(241) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (System.setProperty\(") S
(apple.laf.useScreenMenuBar) str
(", ") p
(true) str
("\);) p n
(242) # () S 4 T () S 8 T (        System.setProperty\(") S
(com.apple.mrj.application.apple.menu.about.name) str
(", ") p
(Name) str
("\);) p n
(243) # () S 4 T () S 8 T () S 12 T (}) N
(244) # () N
(245) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(246) # () S 4 T () S 8 T () S 12 T ( * On a besoin d'un commonRun entre la frame et les ServerHandler) N
(RunChatClient.java) (Page 3/5) (mai 22, 17 11:24) title
border
grestore
(Printed by Pierre) rhead
(src/RunChatClient.java) (4/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4-5) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(247) # () c 4 T () S 8 T () S 12 T ( * et UserHandler du client cr\303\251\303\251 plus bas.) N
(248) # () S 4 T () S 8 T () S 12 T ( */) N
(249) # () S
() p 4 T () S 8 T () S 12 T (commonRun = Boolean.TRUE;) N
(250) # () N
(251) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(252) # () S 4 T () S 8 T () S 12 T ( * Cr\303\251ation de la fen\303\252tre de chat) N
(253) # () S 4 T () S 8 T () S 12 T ( * TODO \303\240 customizer lorsrque vous aurez cr\303\251\303\251 la classe) N
(254) # () S 4 T () S 8 T () S 12 T ( * ClientFrame2) N
(255) # () S 4 T () S 8 T () S 12 T ( */) N
(256) # () S
() p 4 T () S 8 T () S 12 T () N
(257) # () S 4 T () S 8 T () S 12 T (AbstractClientFrame tmp = ) S
(null) k
(;) p n
(258) # () S 4 T () S 8 T () S 12 T () N
(259) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(guiVersion ) p
(\272) sy
( 1\)) p n
(260) # () S 4 T () S 8 T () S 12 T () S 16 T (tmp = ) S
(new) K
( ClientFrame\(name, host, commonRun, logger\);) p n
(261) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(262) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (tmp = ) S
(new) K
( ClientFrame2\(name, host, commonRun, logger\);) p n
(263) # () S 4 T () S 8 T () S 12 T () N
(264) # () S 4 T () S 8 T () S 12 T () S
(final) K
( AbstractClientFrame frame = tmp;) p n
(265) # () N
(266) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(267) # () S 4 T () S 8 T () S 12 T ( * TODO Cr\303\251ation du flux de sortie vers le GUI : userOut \303\240 partir du) N
(268) # () S 4 T () S 8 T () S 12 T ( * flux d'entr\303\251e de la frame \(ClientFrame#getInPipe\(\)\)) N
(269) # () S 4 T () S 8 T () S 12 T ( * ) S 16 T (- Creation d'un PipedOutputStream \303\240 connecter sur) N
(270) # () S 4 T () S 8 T () S 12 T ( * ) S 16 T (- le PipedInputStream de la frame) N
(271) # () S 4 T () S 8 T () S 12 T ( */) N
(272) # () S
() p 4 T () S 8 T () S 12 T () S
(try) K n
(273) # () S
() p 4 T () S 8 T () S 12 T ({) N
(274) # () S 4 T () S 8 T () S 12 T () S 16 T (userOut = ) S
(new) K
( PipedOutputStream\(frame.getInPipe\(\)\);) p n
(275) # () S 4 T () S 8 T () S 12 T (}) N
(276) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(IOException e\)) p n
(277) # () S 4 T () S 8 T () S 12 T ({) N
(278) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(Failure.USER_OUTPUT_STREAM) N
(279) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (+ ") S
( unable to get piped out stream) str
("\);) p n
(280) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(281) # () S 4 T () S 8 T () S 12 T () S 16 T (System.exit\(Failure.USER_OUTPUT_STREAM.toInteger\(\)\);) N
(282) # () S 4 T () S 8 T () S 12 T (}) N
(283) # () N
(284) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(285) # () S 4 T () S 8 T () S 12 T ( * TODO Cr\303\251ation du flux d'entr\303\251e depuis le GUI : userIn \303\240 partir du) N
(286) # () S 4 T () S 8 T () S 12 T ( * flux de sortie de la frame \(ClientFrame#getOutPipe\(\)\)) N
(287) # () S 4 T () S 8 T () S 12 T ( * ) S 16 T (- Cr\303\251ation d'un PipedInputStream \303\240 connecter sur) N
(288) # () S 4 T () S 8 T () S 12 T ( * ) S 16 T (- le PipedOutputStream de la frame) N
(289) # () S 4 T () S 8 T () S 12 T ( */) N
(290) # () S
() p 4 T () S 8 T () S 12 T () S
(try) K n
(291) # () S
() p 4 T () S 8 T () S 12 T ({) N
(292) # () S 4 T () S 8 T () S 12 T () S 16 T (userIn = ) S
(new) K
( PipedInputStream\(frame.getOutPipe\(\)\);) p n
(293) # () S 4 T () S 8 T () S 12 T (}) N
(294) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(IOException e\)) p n
(295) # () S 4 T () S 8 T () S 12 T ({) N
(296) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(Failure.USER_INPUT_STREAM) N
(297) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (+ ") S
( unable to get user piped in stream) str
("\);) p n
(298) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(299) # () S 4 T () S 8 T () S 12 T () S 16 T (System.exit\(Failure.USER_INPUT_STREAM.toInteger\(\)\);) N
(300) # () S 4 T () S 8 T () S 12 T (}) N
(301) # () N
(302) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(303) # () S 4 T () S 8 T () S 12 T ( * Insertion de la frame dans la file des \303\251v\303\250nements GUI) N
(304) # () S 4 T () S 8 T () S 12 T ( * gr\303\242ce \303\240 un Runnable anonyme) N
(305) # () S 4 T () S 8 T () S 12 T ( */) N
(306) # () S
() p 4 T () S 8 T () S 12 T (EventQueue.invokeLater\() S
(new) K
( Runnable\(\)) p n
(307) # () S 4 T () S 8 T () S 12 T ({) N
(308) # () S 4 T () S 8 T () S 12 T () S 16 T (@Override) N
(309) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(310) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(311) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(try) K n
(312) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(313) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (frame.pack\(\);) N
(314) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (frame.setVisible\() S
(true) k
(\);) p n
(315) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(316) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(catch) K
( \(Exception e\)) p n
(317) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(318) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(") S
(GUI Runnable::pack & setVisible) str
(" + e.getLocalizedMessage\(\)\);) p n
(319) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(320) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(321) # () S 4 T () S 8 T () S 12 T (}\);) N
(322) # () N
(323) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(324) # () S 4 T () S 8 T () S 12 T ( * Cr\303\251ation et lancement du thread de la frame) N
(325) # () S 4 T () S 8 T () S 12 T ( */) N
(326) # () S
() p 4 T () S 8 T () S 12 T (Thread guiThread = ) S
(new) K
( Thread\(frame\);) p n
(327) # () S 4 T () S 8 T () S 12 T (threadPool.add\(guiThread\);) N
(328) # () S 4 T () S 8 T () S 12 T (guiThread.start\(\);) N
(RunChatClient.java) (Page 4/5) (mai 22, 17 11:24) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(329) # () p n
(330) # () S 4 T () S 8 T (}) N
(331) # () S 4 T () S 8 T () S
(else) K
( ) p
(// client console) c n
(332) # () S
() p 4 T () S 8 T ({) N
(333) # () S 4 T () S 8 T () S 12 T () S
(// lecture depuis la console) c n
(334) # () S
() p 4 T () S 8 T () S 12 T (userIn = System.in;) N
(335) # () S 4 T () S 8 T () S 12 T () S
(// \303\251criture vers la console) c n
(336) # () S
() p 4 T () S 8 T () S 12 T (userOut = System.out;) N
(337) # () S 4 T () S 8 T () S 12 T () S
(// On a pas besoin d'un commonRun avec le client console) c n
(338) # () S
() p 4 T () S 8 T () S 12 T (commonRun = ) S
(null) k
(;) p n
(339) # () S 4 T () S 8 T (}) N
(340) # () N
(341) # () S 4 T () S 8 T () S
(/*) c n
(342) # () S 4 T () S 8 T ( * Lancement du ChatClient) N
(343) # () S 4 T () S 8 T ( */) N
(344) # () S
() p 4 T () S 8 T (UserOutputType outType = UserOutputType.fromInteger\(guiVersion\);) N
(345) # () S 4 T () S 8 T (ChatClient client = ) S
(new) K
( ChatClient\(host,) p 52 T () S 56 T () S
(// h\303\264te du serveur) c n
(346) # () S
() p 4 T () S 8 T (                                   port,) S 52 T () S 56 T () S
(// port tcp) c n
(347) # () S
() p 4 T () S 8 T (                                   name,) S 52 T () S 56 T () S
(// nom d'utilisateur) c n
(348) # () S
() p 4 T () S 8 T (                                   userIn,) S 52 T () S 56 T () S
(// entr\303\251es utilisateur) c n
(349) # () S
() p 4 T () S 8 T (                                   userOut,) S 52 T () S 56 T () S
(// sorties utilisateur) c n
(350) # () S
() p 4 T () S 8 T (                                   outType,) S 52 T () S 56 T () S
(// Type sortie utilisateur) c n
(351) # () S
() p 4 T () S 8 T (                                   commonRun,) S 56 T () S
(// commonRun avec le GUI) c n
(352) # () S
() p 4 T () S 8 T (                                   logger\);) S 52 T () S 56 T () S
(// parent logger) c n
(353) # () S
() p 4 T () S 8 T () S
(if) K
( \(client.isReady\(\)\)) p n
(354) # () S 4 T () S 8 T ({) N
(355) # () S 4 T () S 8 T () S 12 T (Thread clientThread = ) S
(new) K
( Thread\(client\);) p n
(356) # () S 4 T () S 8 T () S 12 T (threadPool.add\(clientThread\);) N
(357) # () N
(358) # () S 4 T () S 8 T () S 12 T (clientThread.start\(\);) N
(359) # () N
(360) # () S 4 T () S 8 T () S 12 T (logger.fine\(") S
(client launched) str
("\);) p n
(361) # () N
(362) # () S 4 T () S 8 T () S 12 T () S
(// attente de l'ensemble des threads du threadPool pour terminer) c n
(363) # () S
() p 4 T () S 8 T () S 12 T () S
(for) K
( \(Thread t : threadPool\)) p n
(364) # () S 4 T () S 8 T () S 12 T ({) N
(365) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(try) K n
(366) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(367) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (t.join\(\);) N
(368) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.fine\(") S
(client thread end) str
("\);) p n
(369) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(370) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(catch) K
( \(InterruptedException e\)) p n
(371) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(372) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.severe\(") S
(join interrupted) str
(" + e.getLocalizedMessage\(\)\);) p n
(373) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(374) # () S 4 T () S 8 T () S 12 T (}) N
(375) # () S 4 T () S 8 T (}) N
(376) # () S 4 T () S 8 T () S
(else) K n
(377) # () S
() p 4 T () S 8 T ({) N
(378) # () S 4 T () S 8 T () S 12 T (logger.severe\(Failure.CLIENT_NOT_READY + ") S
( abort ...) str
("\);) p n
(379) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.CLIENT_NOT_READY.toInteger\(\)\);) N
(380) # () S 4 T () S 8 T (}) N
(381) # () S 4 T (}) N
(382) # () N
(383) # () S 4 T () S
(/**) C n
(384) # () S 4 T ( * Programme principal de lancement d'un client de chat) N
(385) # () S 4 T ( * @param args argument du programme) N
(386) # () S 4 T ( * <ul>) N
(387) # () S 4 T ( * <li>--host <host address> : set host to connect to</li>) N
(388) # () S 4 T ( * <li>--port <port number> : set host connection port</li>) N
(389) # () S 4 T ( * <li>--name <user name> : user name to use to connect</li>) N
(390) # () S 4 T ( * <li>--verbose : set verbose on</li>) N
(391) # () S 4 T ( * <li>--gui <1 or 2>: use graphical interface rather than console interface) N
(392) # () S 4 T ( * </li>) N
(393) # () S 4 T ( * </ul>) N
(394) # () S 4 T ( */) N
(395) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(396) # () S 4 T ({) N
(397) # () N
(398) # () S 4 T () S 8 T (RunChatClient client = ) S
(new) K
( RunChatClient\(args\);) p n
(399) # () N
(400) # () S 4 T () S 8 T (client.launch\(\);) N
(401) # () S 4 T (}) N
(402) # (}) N
(RunChatClient.java) (Page 5/5) (mai 22, 17 11:24) title
border
grestore
(Printed by Pierre) rhead
(src/RunChatClient.java) (5/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (import) K
( java.io.IOException;) p n
(2) # () S
(import) K
( java.net.SocketException;) p n
(3) # () N
(4) # () S
(import) K
( chat.Failure;) p n
(5) # () S
(import) K
( chat.server.ChatServer;) p n
(6) # () N
(7) # () S
(/**) C n
(8) # ( * Classe/programme qui lance un serveur de chat) N
(9) # ( * @author davidroussel) N
(10) # ( */) N
(11) # () S
(public) K
( ) p
(class) K
( ) p
(RunChatServer) L
( ) p
(extends) K
( AbstractRunChat) p n
(12) # ({) N
(13) # () S 4 T () S
(/**) C n
(14) # () S 4 T ( * Time out de la server socket avant qu'elle ne recommence \303\240 attendre) N
(15) # () S 4 T ( * des connections des \303\251ventuels clients) N
(16) # () S 4 T ( */) N
(17) # () S
() p 4 T () S
(private) K
( ) p
(int) k
( timeout;) p n
(18) # () N
(19) # () S 4 T () S
(/**) C n
(20) # () S 4 T ( * Flag permettant \(ou pas\) de quitter le serveur lorsque le dernier) N
(21) # () S 4 T ( * client se d\303\251logue) N
(22) # () S 4 T ( */) N
(23) # () S
() p 4 T () S
(private) K
( ) p
(boolean) k
( quitOnLastclient;) p n
(24) # () N
(25) # () S 4 T () S
(/**) C n
(26) # () S 4 T ( * Default time out to wait for client connection : 5 seconds) N
(27) # () S 4 T ( */) N
(28) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(final) K
( ) p
(int) k
( DEFAULTTIMEOUT = 5000;) p n
(29) # () N
(30) # () S 4 T () S
(/**) C n
(31) # () S 4 T ( * Constructeur d'un lanceur de serveur d'apr\303\250s les arguments du programme) N
(32) # () S 4 T ( * principal) N
(33) # () S 4 T ( * @param args les arguments du programme principal) N
(34) # () S 4 T ( */) N
(35) # () S
() p 4 T () S
(protected) K
( RunChatServer\(String[] args\)) p n
(36) # () S 4 T ({) N
(37) # () S 4 T () S 8 T () S
(super) K
(\(args\);) p n
(38) # () S 4 T (}) N
(39) # () N
(40) # () S 4 T () S
(/**) C n
(41) # () S 4 T ( * Mise en place des attributs du serveur de chat en fonction des arguments) N
(42) # () S 4 T ( * utilis\303\251s dans la ligne de commande) N
(43) # () S 4 T ( * @param args les arguments fournis au programme principal.) N
(44) # () S 4 T ( */) N
(45) # () S
() p 4 T (@Override) N
(46) # () S 4 T () S
(protected) K
( ) p
(void) k
( setAttributes\(String[] args\)) p n
(47) # () S 4 T ({) N
(48) # () S 4 T () S 8 T () S
(/*) c n
(49) # () S 4 T () S 8 T ( * On met d'abord les attributs locaux \303\240 leur valeur par d\303\251faut) N
(50) # () S 4 T () S 8 T ( */) N
(51) # () S
() p 4 T () S 8 T (timeout = DEFAULTTIMEOUT;) N
(52) # () S 4 T () S 8 T (quitOnLastclient = ) S
(true) k
(;) p n
(53) # () N
(54) # () S 4 T () S 8 T () S
(/*) c n
(55) # () S 4 T () S 8 T ( * parsing des arguments communs aux clients et serveur) N
(56) # () S 4 T () S 8 T ( * ) S 12 T (-v | --verbose) N
(57) # () S 4 T () S 8 T ( * ) S 12 T (-p | --port : port \303\240 utiliser pour la serverSocket) N
(58) # () S 4 T () S 8 T ( */) N
(59) # () S
() p 4 T () S 8 T (super.setAttributes\(args\);) N
(60) # () N
(61) # () S 4 T () S 8 T () S
(/*) c n
(62) # () S 4 T () S 8 T ( * parsing des arguments sp\303\251cifique au  serveur) N
(63) # () S 4 T () S 8 T ( * ) S 12 T (-t | --timeout : timeout d'attente de la server socket) N
(64) # () S 4 T () S 8 T ( */) N
(65) # () S
() p 4 T () S 8 T () S
(for) K
( \() p
(int) k
( i=0; i < args.length; i++\)) p n
(66) # () S 4 T () S 8 T ({) N
(67) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(args[i].equals\(") p
(--timeout) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-t) str
("\)\)) p n
(68) # () S 4 T () S 8 T () S 12 T ({) N
(69) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(i < \(args.length - 1\)\)) p n
(70) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(71) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// parse next arg for in port value) c n
(72) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Integer timeInteger = readInt\(args[++i]\);) N
(73) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(timeInteger ) p
(\271) sy
( ) p
(null) k
(\)) p n
(74) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(75) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (timeout = timeInteger.intValue\(\);) N
(76) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(77) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.info\(") S
(Setting timeout to ) str
(" + timeout\);) p n
(78) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(79) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(80) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(81) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.warning\(") S
(invalid timeout value) str
("\);) p n
(82) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(RunChatServer.java) (Page 1/2) (avril 13, 16 18:48) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S 8 T () S 12 T (}) N
(84) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(args[i].equals\(") p
(--quit) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-q) str
("\)\)) p n
(85) # () S 4 T () S 8 T () S 12 T ({) N
(86) # () S 4 T () S 8 T () S 12 T () S 16 T (quitOnLastclient = ) S
(true) k
(;) p n
(87) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.info\(") S
(Setting quit on last client to true) str
("\);) p n
(88) # () S 4 T () S 8 T () S 12 T (}) N
(89) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(args[i].equals\(") p
(--noquit) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-n) str
("\)\)) p n
(90) # () S 4 T () S 8 T () S 12 T ({) N
(91) # () S 4 T () S 8 T () S 12 T () S 16 T (quitOnLastclient = ) S
(false) k
(;) p n
(92) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.info\(") S
(Setting quit on last client to false) str
("\);) p n
(93) # () S 4 T () S 8 T () S 12 T (}) N
(94) # () S 4 T () S 8 T (}) N
(95) # () S 4 T (}) N
(96) # () N
(97) # () S 4 T () S
(/**) C n
(98) # () S 4 T ( * Lancement du serveur de chat) N
(99) # () S 4 T ( */) N
(100) # () S
() p 4 T (@Override) N
(101) # () S 4 T () S
(protected) K
( ) p
(void) k
( launch\(\)) p n
(102) # () S 4 T ({) N
(103) # () S 4 T () S 8 T () S
(/*) c n
(104) # () S 4 T () S 8 T ( * Create and Launch server on local ip adress with port number and verbose) N
(105) # () S 4 T () S 8 T ( * status) N
(106) # () S 4 T () S 8 T ( */) N
(107) # () S
() p 4 T () S 8 T (logger.info\(") S
(Creating server on port ) str
(" + port + ") p
( with timeout ) str
(") p n
(108) # () S 4 T () S 8 T () S 12 T () S 16 T (+ timeout + ") S
( ms and verbose ) str
(" + \(verbose ? ") p
(on) str
(" : ") p
(off) str
("\)\);) p n
(109) # () N
(110) # () S 4 T () S 8 T (ChatServer server = ) S
(null) k
(;) p n
(111) # () S 4 T () S 8 T () S
(try) K n
(112) # () S
() p 4 T () S 8 T ({) N
(113) # () S 4 T () S 8 T () S 12 T (server = ) S
(new) K
( ChatServer\(port, timeout, quitOnLastclient, logger\);) p n
(114) # () S 4 T () S 8 T (}) N
(115) # () S 4 T () S 8 T () S
(catch) K
( \(SocketException se\)) p n
(116) # () S 4 T () S 8 T ({) N
(117) # () S 4 T () S 8 T () S 12 T (logger.severe\(Failure.SET_SERVER_SOCKET_TIMEOUT + ") S
(, abort ...) str
("\);) p n
(118) # () S 4 T () S 8 T () S 12 T (logger.severe\(se.getLocalizedMessage\(\)\);) N
(119) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.SET_SERVER_SOCKET_TIMEOUT.toInteger\(\)\);) N
(120) # () S 4 T () S 8 T (}) N
(121) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(122) # () S 4 T () S 8 T ({) N
(123) # () S 4 T () S 8 T () S 12 T (logger.severe\(Failure.CREATE_SERVER_SOCKET + ") S
(, abort ...) str
("\);) p n
(124) # () S 4 T () S 8 T () S 12 T (e.printStackTrace\(\);) N
(125) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.CREATE_SERVER_SOCKET.toInteger\(\)\);) N
(126) # () S 4 T () S 8 T (}) N
(127) # () N
(128) # () S 4 T () S 8 T () S
(// Wait for serverThread to stop) c n
(129) # () S
() p 4 T () S 8 T (Thread serverThread = ) S
(null) k
(;) p n
(130) # () S 4 T () S 8 T () S
(if) K
( \(server ) p
(\271) sy
( ) p
(null) k
(\)) p n
(131) # () S 4 T () S 8 T ({) N
(132) # () S 4 T () S 8 T () S 12 T (serverThread = ) S
(new) K
( Thread\(server\);) p n
(133) # () S 4 T () S 8 T () S 12 T (serverThread.start\(\);) N
(134) # () N
(135) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(Waiting for server to terminate ... ) str
("\);) p n
(136) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(137) # () S
() p 4 T () S 8 T () S 12 T ({) N
(138) # () S 4 T () S 8 T () S 12 T () S 16 T (serverThread.join\(\);) N
(139) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.fine\(") S
(Server terminated, program end.) str
("\);) p n
(140) # () S 4 T () S 8 T () S 12 T (}) N
(141) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(InterruptedException e\)) p n
(142) # () S 4 T () S 8 T () S 12 T ({) N
(143) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(") S
(Server Thread Join interrupted) str
("\);) p n
(144) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(145) # () S 4 T () S 8 T () S 12 T (}) N
(146) # () S 4 T () S 8 T (}) N
(147) # () S 4 T (}) N
(148) # () N
(149) # () S 4 T () S
(/**) C n
(150) # () S 4 T ( * Programme principal) N
(151) # () S 4 T ( * @param args les arguments) N
(152) # () S 4 T ( * <ul>) N
(153) # () S 4 T ( * ) S 8 T (<li>--port <port number> : set host connection port</li>) N
(154) # () S 4 T ( * ) S 8 T (<li>--verbose : set verbose on</li>) N
(155) # () S 4 T ( * ) S 8 T (<li>--timeout <timeout in ms> : server socket waiting time out</li>) N
(156) # () S 4 T ( * </ul>) N
(157) # () S 4 T ( */) N
(158) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(159) # () S 4 T ({) N
(160) # () S 4 T () S 8 T (RunChatServer server = ) S
(new) K
( RunChatServer\(args\);) p n
(161) # () N
(162) # () S 4 T () S 8 T (server.launch\(\);) N
(163) # () S 4 T (}) N
(164) # (}) N
(RunChatServer.java) (Page 2/2) (avril 13, 16 18:48) title
border
grestore
(Printed by Pierre) rhead
(src/RunChatServer.java) (6/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat.client;) p n
(2) # () N
(3) # () S
(import) K
( java.io.IOException;) p n
(4) # () S
(import) K
( java.io.InputStream;) p n
(5) # () S
(import) K
( java.io.OutputStream;) p n
(6) # () S
(import) K
( java.io.PrintWriter;) p n
(7) # () S
(import) K
( java.net.Socket;) p n
(8) # () S
(import) K
( java.net.UnknownHostException;) p n
(9) # () S
(import) K
( java.util.logging.Logger;) p n
(10) # () N
(11) # () S
(import) K
( chat.Failure;) p n
(12) # () S
(import) K
( chat.UserOutputType;) p n
(13) # () S
(import) K
( logger.LoggerFactory;) p n
(14) # () N
(15) # () S
(/**) C n
(16) # ( * Classe Principale d'un client de chat.) N
(17) # ( * Instancie :) N
(18) # ( * ) S 4 T (- la socket pour commnuniquer avec le serveur) N
(19) # ( * ) S 4 T (- le UserHandler pour traiter les messages de l'utilisateur) N
(20) # ( * ) S 4 T (- le ServerHandler pour traiter les messages du serveur) N
(21) # ( * @author davidroussel) N
(22) # ( */) N
(23) # () S
(public) K
( ) p
(class) K
( ) p
(ChatClient) L
( ) p
(implements) K
( Runnable) p n
(24) # ({) N
(25) # () S 4 T () S
(/**) C n
(26) # () S 4 T ( * Nom d'utilisateur utilis\303\251 pour se connecter) N
(27) # () S 4 T ( */) N
(28) # () S
() p 4 T () S
(private) K
( String userName;) p n
(29) # () N
(30) # () S 4 T () S
(/**) C n
(31) # () S 4 T ( * Socket du client) N
(32) # () S 4 T ( */) N
(33) # () S
() p 4 T () S
(private) K
( Socket clientSocket;) p n
(34) # () N
(35) # () S 4 T () S
(/**) C n
(36) # () S 4 T ( * Flux d'entr\303\251e depuis le serveur) N
(37) # () S 4 T ( */) N
(38) # () S
() p 4 T () S
(private) K
( InputStream serverIn;) p n
(39) # () N
(40) # () S 4 T () S
(/**) C n
(41) # () S 4 T ( * Flux de sortie vers le serveur) N
(42) # () S 4 T ( */) N
(43) # () S
() p 4 T () S
(private) K
( OutputStream serverOut;) p n
(44) # () N
(45) # () S 4 T () S
(/**) C n
(46) # () S 4 T ( * Ecrivain vers le flux de sortie vers le serveur. Utilis\303\251 temporairement) N
(47) # () S 4 T ( * pour envoyer notre nom d'utilisateur au serveur) N
(48) # () S 4 T ( */) N
(49) # () S
() p 4 T () S
(private) K
( PrintWriter serverOutPW;) p n
(50) # () N
(51) # () S 4 T () S
(/**) C n
(52) # () S 4 T ( * Flux d'entr\303\251e depuis l'utilisateur) N
(53) # () S 4 T ( */) N
(54) # () S
() p 4 T () S
(private) K
( InputStream userIn;) p n
(55) # () N
(56) # () S 4 T () S
(/**) C n
(57) # () S 4 T ( * Flux de sortie vers l'utilisateur) N
(58) # () S 4 T ( */) N
(59) # () S
() p 4 T () S
(private) K
( OutputStream userOut;) p n
(60) # () N
(61) # () S 4 T () S
(/**) C n
(62) # () S 4 T ( * Handler des donn\303\251es en provenance du serveur) N
(63) # () S 4 T ( *) N
(64) # () S 4 T ( * @uml.property name="serverHandler") N
(65) # () S 4 T ( * @uml.associationEnd multiplicity="\(1 1\)" aggregation="composite") N
(66) # () S 4 T ( */) N
(67) # () S
() p 4 T () S
(private) K
( ServerHandler serverHandler = ) p
(null) k
(;) p n
(68) # () N
(69) # () S 4 T () S
(/**) C n
(70) # () S 4 T ( * Handler des donn\303\251es en provenance de l'utilisateur) N
(71) # () S 4 T ( *) N
(72) # () S 4 T ( * @uml.property name="userHandler") N
(73) # () S 4 T ( * @uml.associationEnd multiplicity="\(1 1\)" aggregation="composite") N
(74) # () S 4 T ( */) N
(75) # () S
() p 4 T () S
(private) K
( UserHandler userHandler = ) p
(null) k
(;) p n
(76) # () N
(77) # () S 4 T () S
(/**) C n
(78) # () S 4 T ( * Etat d'ex\303\251cution commun du {@link #userHandler} et du) N
(79) # () S 4 T ( * {@link #serverHandler}, lorsque l'un des deux Runnable se termine, il met) N
(80) # () S 4 T ( * commonRun \303\240 faux ce qui force l'autre \303\240 se terminer.) N
(81) # () S 4 T ( */) N
(82) # () S
() p 4 T () S
(private) K
( Boolean commonRun;) p n
(ChatClient.java) (Page 1/5) (avril 24, 17 16:52) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p n
(84) # () S 4 T () S
(/**) C n
(85) # () S 4 T ( * Etat du client. true si la socket ainsi que les diff\303\251rents flux) N
(86) # () S 4 T ( * d'entr\303\251e/sortie ont \303\251t\303\251 cr\303\251\303\251s) N
(87) # () S 4 T ( *) N
(88) # () S 4 T ( * @uml.property name="ready") N
(89) # () S 4 T ( */) N
(90) # () S
() p 4 T () S
(private) K
( ) p
(boolean) k
( ready;) p n
(91) # () N
(92) # () S 4 T () S
(/**) C n
(93) # () S 4 T ( * Le logger utilis\303\251 pour afficher les messages d'infos|erreurs|warnings) N
(94) # () S 4 T ( */) N
(95) # () S
() p 4 T () S
(private) K
( Logger logger;) p n
(96) # () N
(97) # () S 4 T () S
(/**) C n
(98) # () S 4 T ( * Constructeur d'un client de chat) N
(99) # () S 4 T ( *) N
(100) # () S 4 T ( * @param host l'adresse du serveur) N
(101) # () S 4 T ( * @param port le port \303\240 utiliser pour communiquer avec le serveur) N
(102) # () S 4 T ( * @param name le nom d'utilisateur utilis\303\251) N
(103) # () S 4 T ( * @param in le flux d'entr\303\251e depuis l'utilisateur) N
(104) # () S 4 T ( * @param out le flux de sortie vers l'utilisateur) N
(105) # () S 4 T ( * @param outType le type de donn\303\251es attendues dans le flux de sortie vers) N
(106) # () S 4 T ( * le client \(texte ou objets\)) N
(107) # () S 4 T ( * @param l'\303\251tat d'ex\303\251cution commun avec un autre runnable. ou bien null) N
(108) # () S 4 T ( *            s'il n'y a pas d'autre runnable \303\240 synchroniser avec ceux) N
(109) # () S 4 T ( *            lanc\303\251s dans le ChatClient) N
(110) # () S 4 T ( * @param verbose niveau de debug pour les messages) N
(111) # () S 4 T ( */) N
(112) # () S
() p 4 T () S
(public) K
( ChatClient\(String host,) p n
(113) # () S 4 T (                  ) S
(int) k
( port,) p n
(114) # () S 4 T (                  String name,) N
(115) # () S 4 T (                  InputStream in,) N
(116) # () S 4 T (                  OutputStream out,) N
(117) # () S 4 T (                  UserOutputType outType,) N
(118) # () S 4 T (                  Boolean commonRun,) N
(119) # () S 4 T (                  Logger parentLogger\)) N
(120) # () S 4 T ({) N
(121) # () S 4 T () S 8 T (userName = name;) N
(122) # () S 4 T () S 8 T (ready = ) S
(false) k
(;) p n
(123) # () N
(124) # () S 4 T () S 8 T () S
(// Cr\303\251ation du logger) c n
(125) # () S
() p 4 T () S 8 T (logger = LoggerFactory.getParentLogger\(getClass\(\),) N
(126) # () S 4 T () S 8 T (                                       parentLogger,) N
(127) # () S 4 T () S 8 T (                                       parentLogger.getLevel\(\)\);) N
(128) # () N
(129) # () S 4 T () S 8 T () S
(/*) c n
(130) # () S 4 T () S 8 T ( * Cr\303\251ation de la socket vers host/port) N
(131) # () S 4 T () S 8 T ( */) N
(132) # () S
() p 4 T () S 8 T (clientSocket = ) S
(null) k
(;) p n
(133) # () S 4 T () S 8 T () S
(try) K n
(134) # () S
() p 4 T () S 8 T ({) N
(135) # () S 4 T () S 8 T () S 12 T (clientSocket = ) S
(new) K
( Socket\(host, port\);) p n
(136) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(ChatClient: socket created) str
("\);) p n
(137) # () S 4 T () S 8 T (}) N
(138) # () S 4 T () S 8 T () S
(catch) K
( \(UnknownHostException e\)) p n
(139) # () S 4 T () S 8 T ({) N
(140) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(141) # () S 4 T () S 8 T () S 12 T ( * Notez bien cette fa\303\247on de faire, vous devrez la  reproduire) N
(142) # () S 4 T () S 8 T () S 12 T ( * par la suite) N
(143) # () S 4 T () S 8 T () S 12 T ( */) N
(144) # () S
() p 4 T () S 8 T () S 12 T (logger.severe\(") S
(ChatClient: ) str
(" + Failure.UNKNOWN_HOST + ") p
(: ) str
(" + host\);) p n
(145) # () S 4 T () S 8 T () S 12 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(146) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.UNKNOWN_HOST.toInteger\(\)\);) N
(147) # () S 4 T () S 8 T (}) N
(148) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(149) # () S 4 T () S 8 T ({) N
(150) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(ChatClient: ) str
(" + Failure.CLIENT_CONNECTION) p n
(151) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (+ ") S
( to: \\") str
(" + host + ") p
(\\" at port \\") str
(" + port + ") p
(\\") str
("\);) p n
(152) # () S 4 T () S 8 T () S 12 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(153) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.CLIENT_CONNECTION.toInteger\(\)\);) N
(154) # () S 4 T () S 8 T (}) N
(155) # () N
(156) # () S 4 T () S 8 T () S
(/*) c n
(157) # () S 4 T () S 8 T ( * Obtention du flux de sortie vers le serveur \(serverOut\) \303\240 partir) N
(158) # () S 4 T () S 8 T ( * de la clientSocket.) N
(159) # () S 4 T () S 8 T ( * avec utilisation du logger pour afficher la progression ou les erreurs) N
(160) # () S 4 T () S 8 T ( * ) S 12 T (- logger.info\("ChatClient: got client output stream to server"\); si le serverOut est non) N
0 T ( null) N
(161) # () S 4 T () S 8 T ( * ) S 12 T (- logger.severe\("ChatClient: null server out" + Failure.CLIENT_INPUT_STREAM\); si le serv) N
0 T (erOut est null) N
(162) # () S 4 T () S 8 T ( * ) S 12 T (- logger.severe\("ChatClient: " + Failure.CLIENT_OUTPUT_STREAM\); si une IOException survi) N
(ChatClient.java) (Page 2/5) (avril 24, 17 16:52) title
border
grestore
(Printed by Pierre) rhead
(src/chat/client/ChatClient.java) (7/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (ent) c n
(163) # () S 4 T () S 8 T ( * les "severe" doivent \303\252tre suivi d'un System.exit\(...\) comme ci-dessus;) N
(164) # () S 4 T () S 8 T ( */) N
(165) # () S
() p 4 T () S 8 T (serverOut = ) S
(null) k
(;) p n
(166) # () S 4 T () S 8 T () S
(try) K n
(167) # () S
() p 4 T () S 8 T ({) N
(168) # () S 4 T () S 8 T () S 12 T (serverOut = clientSocket.getOutputStream\(\);) N
(169) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(serverOut ) p
(\271) sy
( ) p
(null) k
(\)) p n
(170) # () S 4 T () S 8 T () S 12 T ({) N
(171) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.info\(") S
(ChatClient: got client output stream to server) str
("\);) p n
(172) # () S 4 T () S 8 T () S 12 T (}) N
(173) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(174) # () S
() p 4 T () S 8 T () S 12 T ({) N
(175) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(") S
(ChatClient: null server out) str
(" + Failure.CLIENT_INPUT_STREAM\);) p n
(176) # () S 4 T () S 8 T () S 12 T () S 16 T (System.exit\(Failure.CLIENT_OUTPUT_STREAM.toInteger\(\)\);) N
(177) # () S 4 T () S 8 T () S 12 T (}) N
(178) # () S 4 T () S 8 T () S 12 T () S
(// throw new IOException\(\); // Remove this line when serverOut is obtained) c n
(179) # () S
() p 4 T () S 8 T (}) N
(180) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(181) # () S 4 T () S 8 T ({) N
(182) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(ChatClient: ) str
(" + Failure.CLIENT_OUTPUT_STREAM\);) p n
(183) # () S 4 T () S 8 T () S 12 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(184) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.CLIENT_OUTPUT_STREAM.toInteger\(\)\);) N
(185) # () S 4 T () S 8 T (}) N
(186) # () N
(187) # () S 4 T () S 8 T () S
(/*) c n
(188) # () S 4 T () S 8 T ( * Cr\303\251ation PrintWriter temporaire sur le serverOut) N
(189) # () S 4 T () S 8 T ( * \(avec autoFlush\): serverOutPW) N
(190) # () S 4 T () S 8 T ( * et envoi de notre nom d'utilisateur au serveur \(avec un println\)) N
(191) # () S 4 T () S 8 T ( * afin qu'il puisse cr\303\251er un thread d\303\251di\303\251 \303\240 notre traitement) N
(192) # () S 4 T () S 8 T ( * ajout d'un message d'info au logger pour la cr\303\251ation du serverOutPW) N
(193) # () S 4 T () S 8 T ( * et d'un warning si celui ci a des erreurs apr\303\250s l'envoi du nom au) N
(194) # () S 4 T () S 8 T ( * serveur.) N
(195) # () S 4 T () S 8 T ( */) N
(196) # () S
() p 4 T () S 8 T () S
(if) K
( \(serverOut ) p
(\271) sy
( ) p
(null) k
(\)) p n
(197) # () S 4 T () S 8 T ({) N
(198) # () S 4 T () S 8 T () S 12 T (serverOutPW = ) S
(new) K
( PrintWriter\(serverOut, ) p
(true) k
(\);) p n
(199) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(ChatClient: sending name to server ... ) str
("\);) p n
(200) # () N
(201) # () S 4 T () S 8 T () S 12 T (serverOutPW.println\(userName\);) N
(202) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(serverOutPW.checkError\(\)\)) p n
(203) # () S 4 T () S 8 T () S 12 T ({) N
(204) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ChatClient: serverOutPw has errors) str
("\);) p n
(205) # () S 4 T () S 8 T () S 12 T (}) N
(206) # () S 4 T () S 8 T (}) N
(207) # () N
(208) # () S 4 T () S 8 T () S
(/*) c n
(209) # () S 4 T () S 8 T ( * Obtention du flux d'entr\303\251e depuis le serveur \(serverIn\) \303\240 partir) N
(210) # () S 4 T () S 8 T ( * de la clientSocket.) N
(211) # () S 4 T () S 8 T ( * Si une IOException) N
(212) # () S 4 T () S 8 T ( * ) S 12 T (- ajout d'un "severe" au logger avec Failure.CLIENT_INPUT_STREAM) N
(213) # () S 4 T () S 8 T ( * ) S 12 T (- System.exit\(...\);) N
(214) # () S 4 T () S 8 T ( */) N
(215) # () S
() p 4 T () S 8 T (serverIn = ) S
(null) k
(;) p n
(216) # () S 4 T () S 8 T () S
(try) K n
(217) # () S
() p 4 T () S 8 T ({) N
(218) # () S 4 T () S 8 T () S 12 T (serverIn = clientSocket.getInputStream\(\);) N
(219) # () S 4 T () S 8 T () S 12 T () S
(// throw new IOException\(\); // Remove this line when serverIn is obtained) c n
(220) # () S
() p 4 T () S 8 T (}) N
(221) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(222) # () S 4 T () S 8 T ({) N
(223) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(ChatClient: ) str
(" + Failure.CLIENT_INPUT_STREAM\);) p n
(224) # () S 4 T () S 8 T () S 12 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(225) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.CLIENT_INPUT_STREAM.toInteger\(\)\);) N
(226) # () S 4 T () S 8 T (}) N
(227) # () N
(228) # () S 4 T () S 8 T () S
(// obtention des flux de l'utilisateur) c n
(229) # () S
() p 4 T () S 8 T (userIn = in;) N
(230) # () S 4 T () S 8 T (userOut = out;) N
(231) # () N
(232) # () S 4 T () S 8 T () S
(// Etat d'ex\303\251cution commun) c n
(233) # () S
() p 4 T () S 8 T () S
(if) K
( \(commonRun ) p
(\272) sy
( ) p
(null) k
(\)) p n
(234) # () S 4 T () S 8 T ({) N
(235) # () S 4 T () S 8 T () S 12 T (this.commonRun = ) S
(new) K
( Boolean\() p
(true) k
(\);) p n
(236) # () S 4 T () S 8 T (}) N
(237) # () S 4 T () S 8 T () S
(else) K n
(238) # () S
() p 4 T () S 8 T ({) N
(239) # () S 4 T () S 8 T () S 12 T (this.commonRun = commonRun;) N
(240) # () S 4 T () S 8 T (}) N
(241) # () N
(242) # () S 4 T () S 8 T () S
(// Cr\303\251ation du user handler) c n
(243) # () S
() p 4 T () S 8 T (userHandler = ) S
(new) K
( UserHandler\(userIn,) p n
(ChatClient.java) (Page 3/5) (avril 24, 17 16:52) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(244) # () p 4 T () S 8 T (                              serverOut,) N
(245) # () S 4 T () S 8 T (                              this.commonRun,) N
(246) # () S 4 T () S 8 T (                              logger\);) N
(247) # () N
(248) # () S 4 T () S 8 T () S
(// cr\303\251ation du server handler) c n
(249) # () S
() p 4 T () S 8 T (serverHandler = ) S
(new) K
( ServerHandler\(userName,) p n
(250) # () S 4 T () S 8 T (                                  serverIn,) N
(251) # () S 4 T () S 8 T (                                  userOut,) N
(252) # () S 4 T () S 8 T (                                  outType,) N
(253) # () S 4 T () S 8 T (                                  this.commonRun,) N
(254) # () S 4 T () S 8 T (                                  logger\);) N
(255) # () N
(256) # () S 4 T () S 8 T (ready = ) S
(true) k
(;) p n
(257) # () S 4 T (}) N
(258) # () N
(259) # () S 4 T () S
(/**) C n
(260) # () S 4 T ( * Acc\303\250s en lecture de l'\303\251tat du client) N
(261) # () S 4 T ( *) N
(262) # () S 4 T ( * @return the ready) N
(263) # () S 4 T ( * @uml.property name="ready") N
(264) # () S 4 T ( */) N
(265) # () S
() p 4 T () S
(public) K
( ) p
(boolean) k
( isReady\(\)) p n
(266) # () S 4 T ({) N
(267) # () S 4 T () S 8 T () S
(return) K
( ready;) p n
(268) # () S 4 T (}) N
(269) # () N
(270) # () S 4 T () S
(/*) c n
(271) # () S 4 T ( * \(non-Javadoc\)) N
(272) # () S 4 T ( * @see java.lang.Runnable#run\(\)) N
(273) # () S 4 T ( */) N
(274) # () S
() p 4 T (@Override) N
(275) # () S 4 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(276) # () S 4 T ({) N
(277) # () S 4 T () S 8 T () S
(/*) c n
(278) # () S 4 T () S 8 T ( * Tant que ce que l'on lit depuis l'utilisateur n'est pas null \(avec un) N
(279) # () S 4 T () S 8 T ( * ctrl-D par exemple\), on envoie ce que l'on a lu au serveur et on) N
(280) # () S 4 T () S 8 T ( * attends que celui ci nous r\303\251ponde pour afficher ce qu'il nous envoie.) N
(281) # () S 4 T () S 8 T ( * On a donc deux boucles d'attente : d'une part l'utilisateur, d'autre) N
(282) # () S 4 T () S 8 T ( * part le serveur. Chaque boucle est donc trait\303\251e dans son propre) N
(283) # () S 4 T () S 8 T ( * thread UserHandler traite les entr\303\251es de l'utilisateur ServerHandler) N
(284) # () S 4 T () S 8 T ( * traite les entr\303\251es du serveur et on attends la fin des deux threads) N
(285) # () S 4 T () S 8 T ( * pour terminer le client Les deux threads partagent une variable) N
(286) # () S 4 T () S 8 T ( * "commonRun" lorsque l'un des deux threads se termine il met cette) N
(287) # () S 4 T () S 8 T ( * vatiable \303\240 false. A chaque tour de boucle de chacun des threads ils) N
(288) # () S 4 T () S 8 T ( * consultent \(de mani\303\250re atomique\) cette variable afin de savoir s'ils) N
(289) # () S 4 T () S 8 T ( * peuvent continuer) N
(290) # () S 4 T () S 8 T ( */) N
(291) # () N
(292) # () S
() p 4 T () S 8 T (Thread[] threads = ) S
(new) K
( Thread[2];) p n
(293) # () N
(294) # () S 4 T () S 8 T () S
(// Cr\303\251ation du thread du UserHandler) c n
(295) # () S
() p 4 T () S 8 T (threads[0] = ) S
(new) K
( Thread\(userHandler\);) p n
(296) # () N
(297) # () S 4 T () S 8 T () S
(// Cr\303\251ation du thread du ServerHandler) c n
(298) # () S
() p 4 T () S 8 T (threads[1] = ) S
(new) K
( Thread\(serverHandler\);) p n
(299) # () N
(300) # () S 4 T () S 8 T () S
(// Lancement des threads) c n
(301) # () S
() p 4 T () S 8 T () S
(for) K
( \() p
(int) k
( i = 0; i < threads.length; i++\)) p n
(302) # () S 4 T () S 8 T ({) N
(303) # () S 4 T () S 8 T () S 12 T (threads[i].start\(\);) N
(304) # () S 4 T () S 8 T (}) N
(305) # () N
(306) # () S 4 T () S 8 T () S
(// Attente de la fin des 2 threads) c n
(307) # () S
() p 4 T () S 8 T () S
(for) K
( \() p
(int) k
( i = 0; i < threads.length; i++\)) p n
(308) # () S 4 T () S 8 T ({) N
(309) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(310) # () S
() p 4 T () S 8 T () S 12 T ({) N
(311) # () S 4 T () S 8 T () S 12 T () S 16 T (threads[i].join\(\);) N
(312) # () S 4 T () S 8 T () S 12 T (}) N
(313) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(InterruptedException e\)) p n
(314) # () S 4 T () S 8 T () S 12 T ({) N
(315) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(Join thread ) str
(" + i + ") p
( interrupted) str
("\);) p n
(316) # () S 4 T () S 8 T () S 12 T (}) N
(317) # () S 4 T () S 8 T (}) N
(318) # () N
(319) # () S 4 T () S 8 T (logger.info\(") S
(ChatClient: All threads terminated) str
("\);) p n
(320) # () N
(321) # () S 4 T () S 8 T (cleanup\(\);) N
(322) # () S 4 T (}) N
(323) # () N
(324) # () S 4 T () S
(/**) C n
(325) # () S 4 T ( * Nettoyage du client : fermeture des flux d'entr\303\251e/sortie et fermeture de) N
(ChatClient.java) (Page 4/5) (avril 24, 17 16:52) title
border
grestore
(Printed by Pierre) rhead
(src/chat/client/ChatClient.java) (8/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5,1) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(326) # () C 4 T ( * la socket) N
(327) # () S 4 T ( */) N
(328) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( cleanup\(\)) p n
(329) # () S 4 T ({) N
(330) # () S 4 T () S 8 T () S
(// Cleanup du #userHandler) c n
(331) # () S
() p 4 T () S 8 T (userHandler.cleanup\(\);) N
(332) # () N
(333) # () S 4 T () S 8 T () S
(// Cleanup du #serverHandler) c n
(334) # () S
() p 4 T () S 8 T (serverHandler.cleanup\(\);) N
(335) # () N
(336) # () S 4 T () S 8 T () S
(// fermeture du flux temporaire de sortie vers le serveur) c n
(337) # () S
() p 4 T () S 8 T (logger.info\(") S
(ChatClient: closing server output stream ... ) str
("\);) p n
(338) # () S 4 T () S 8 T (serverOutPW.close\(\);) N
(339) # () N
(340) # () S 4 T () S 8 T () S
(// fermeture de la socket) c n
(341) # () S
() p 4 T () S 8 T (logger.info\(") S
(ChatClient: closing client socket ... ) str
("\);) p n
(342) # () S 4 T () S 8 T () S
(try) K n
(343) # () S
() p 4 T () S 8 T ({) N
(344) # () S 4 T () S 8 T () S 12 T (clientSocket.close\(\);) N
(345) # () S 4 T () S 8 T (}) N
(346) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(347) # () S 4 T () S 8 T ({) N
(348) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(ChatClient: closing client socket failed) str
("\);) p n
(349) # () S 4 T () S 8 T () S 12 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(350) # () S 4 T () S 8 T (}) N
(351) # () S 4 T (}) N
(352) # (}) N
(ChatClient.java) (Page 5/5) (avril 24, 17 16:52) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat.client;) p n
(2) # () N
(3) # () S
(/**) C n
(4) # ( * Sous-package contenant les classes relative \303\240 la partie client du) N
(5) # ( * client/serveur de chat) N
(6) # ( */) N
(package-info.java) (Page 1/1) (nov. 17, 14 17:46) title
border
grestore
(Printed by Pierre) rhead
(src/chat/client/ChatClient.java, src/chat/client/package-info.java) (9/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat.client;) p n
(2) # () N
(3) # () S
(import) K
( java.io.IOException;) p n
(4) # () S
(import) K
( java.io.InputStream;) p n
(5) # () S
(import) K
( java.io.ObjectInputStream;) p n
(6) # () S
(import) K
( java.io.ObjectOutputStream;) p n
(7) # () S
(import) K
( java.io.OutputStream;) p n
(8) # () S
(import) K
( java.io.PrintWriter;) p n
(9) # () S
(import) K
( java.util.logging.Logger;) p n
(10) # () N
(11) # () S
(import) K
( chat.Failure;) p n
(12) # () S
(import) K
( chat.UserOutputType;) p n
(13) # () S
(import) K
( logger.LoggerFactory;) p n
(14) # () S
(import) K
( models.Message;) p n
(15) # () N
(16) # () S
(/**) C n
(17) # ( * Server Handler. Classe s'occupant de lire le flux de messages en provenance) N
(18) # ( * du serveur et de le transmettre sur le flux de sortie du client.) N
(19) # ( * Un client peut accepter soit) N
(20) # ( * ) S 4 T (- du texte uniquement \(c'est le cas du client console et du 1er client GUI\)) N
(21) # ( * ) S 4 T (- des messages \(comme ceux envoy\303\251s par le serveur\) \303\240 travers un ObjectStream) N
(22) # ( *) N
(23) # ( * @author davidroussel) N
(24) # ( */) N
(25) # () S
(class) K
( ) p
(ServerHandler) L
( ) p
(implements) K
( Runnable) p n
(26) # ({) N
(27) # () S 4 T () S
(/**) C n
(28) # () S 4 T ( * Flux d'entr\303\251e objet en provenance du serveur) N
(29) # () S 4 T ( */) N
(30) # () S
() p 4 T () S
(private) K
( ObjectInputStream serverInOS;) p n
(31) # () N
(32) # () S 4 T () S
(/**) C n
(33) # () S 4 T ( * Le type de flux \303\240 utiliser pour envoyer les message au client.) N
(34) # () S 4 T ( * Si le type de flux est {@link TEX}) N
(35) # () S 4 T ( */) N
(36) # () S
() p 4 T () S
(private) K
( UserOutputType userOutType;) p n
(37) # () N
(38) # () S 4 T () S
(/**) C n
(39) # () S 4 T ( * Ecrivain vers le flux de sortie texte vers l'utilisateur) N
(40) # () S 4 T ( */) N
(41) # () S
() p 4 T () S
(private) K
( PrintWriter userOutPW;) p n
(42) # () N
(43) # () S 4 T () S
(/**) C n
(44) # () S 4 T ( * Flux de sortie objet vers l'utilisateur) N
(45) # () S 4 T ( */) N
(46) # () S
() p 4 T () S
(private) K
( ObjectOutputStream userOutOS;) p n
(47) # () N
(48) # () S 4 T () S
(/**) C n
(49) # () S 4 T ( * Etat d'ex\303\251cution commun du ServerHandler et du {@link UserHandler}) N
(50) # () S 4 T ( */) N
(51) # () S
() p 4 T () S
(private) K
( Boolean commonRun;) p n
(52) # () N
(53) # () S 4 T () S
(/**) C n
(54) # () S 4 T ( * Logger utilis\303\251 pour afficher \(ou pas\) les messages d'erreurs) N
(55) # () S 4 T ( */) N
(56) # () S
() p 4 T () S
(private) K
( Logger logger;) p n
(57) # () N
(58) # () S 4 T () S
(/**) C n
(59) # () S 4 T ( * Constructeur d'un ServerHandler) N
(60) # () S 4 T ( * @param name notre nom d'utilisateur sur le serveur) N
(61) # () S 4 T ( * @param in le flux d'entr\303\251e en provenance du serveur) N
(62) # () S 4 T ( * @param out le flux de sortie vers l'utilisateur) N
(63) # () S 4 T ( * @param commonRun l'\303\251tat d'ex\303\251cution commun du {@link ServerHandler} et du) N
(64) # () S 4 T ( *            {@link UserHandler}) N
(65) # () S 4 T ( * @param parentLogger logger parent pour affichage des messages de debug) N
(66) # () S 4 T ( */) N
(67) # () S
() p 4 T () S
(public) K
( ServerHandler\(String name,) p n
(68) # () S 4 T (                     InputStream in,) N
(69) # () S 4 T (                     OutputStream out,) N
(70) # () S 4 T (                     UserOutputType outType,) N
(71) # () S 4 T (                     Boolean commonRun,) N
(72) # () S 4 T (                     Logger parentLogger\)) N
(73) # () S 4 T ({) N
(74) # () S 4 T () S 8 T (logger = LoggerFactory.getParentLogger\(getClass\(\),) N
(75) # () S 4 T () S 8 T (                                       parentLogger,) N
(76) # () S 4 T () S 8 T (                                       parentLogger.getLevel\(\)\);) N
(77) # () S 4 T () S 8 T () S
(/*) c n
(78) # () S 4 T () S 8 T ( * On v\303\251rifie que l'InputStream est non null et on cr\303\251e notre serverInOS) N
(79) # () S 4 T () S 8 T ( * sur cet InputStream Sinon on quitte avec la valeur) N
(80) # () S 4 T () S 8 T ( * Failure.CLIENT_INPUT_STREAM) N
(81) # () S 4 T () S 8 T ( */) N
(82) # () S
() p 4 T () S 8 T () S
(if) K
( \(in ) p
(\271) sy
( ) p
(null) k
(\)) p n
(ServerHandler.java) (Page 1/4) (avril 24, 17 18:41) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S 8 T ({) N
(84) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(ServerHandler: creating server input reader ... ) str
("\);) p n
(85) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(86) # () S 4 T () S 8 T () S 12 T ( * Cr\303\251ation du ObjectInputStream \303\240 partir du flux d'entr\303\251e) N
(87) # () S 4 T () S 8 T () S 12 T ( * en provenance du serveur, si une IOException survient,) N
(88) # () S 4 T () S 8 T () S 12 T ( * on quitte avec la valeur Failure.CLIENT_INPUT_STREAM) N
(89) # () S 4 T () S 8 T () S 12 T ( */) N
(90) # () S
() p 4 T () S 8 T () S 12 T (serverInOS = ) S
(null) k
(;) p n
(91) # () S 4 T () S 8 T () S 12 T () N
(92) # () S 4 T () S 8 T () S 12 T () S
(try) K
( {) p n
(93) # () S 4 T () S 8 T () S 12 T () S 16 T (serverInOS = ) S
(new) K
( ObjectInputStream\(in\);) p n
(94) # () S 4 T () S 8 T () S 12 T (} ) S
(catch) K
( \(Exception e\) {) p n
(95) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(") S
(ServerHandler: cannot create serverInOS ObjectInputStream ) str
(" + Failure.CLIENT_INPUT_STR) p n
0 T (EAM\);) N
(96) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(97) # () S 4 T () S 8 T () S 12 T () S 16 T (System.exit\(Failure.CLIENT_INPUT_STREAM.toInteger\(\)\);) N
(98) # () S 4 T () S 8 T () S 12 T (}) N
(99) # () S 4 T () S 8 T (}) N
(100) # () S 4 T () S 8 T () S
(else) K n
(101) # () S
() p 4 T () S 8 T ({) N
(102) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(ServerHandler: ) str
(" + Failure.CLIENT_INPUT_STREAM\);) p n
(103) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.CLIENT_INPUT_STREAM.toInteger\(\)\);) N
(104) # () S 4 T () S 8 T (}) N
(105) # () N
(106) # () S 4 T () S 8 T () S
(/*) c n
(107) # () S 4 T () S 8 T ( * On v\303\251rifie que l'OutputStream est non null et on cr\303\251e notre userOutPW) N
(108) # () S 4 T () S 8 T ( * ou bien notre userOutOS sur cet OutputStream. Sinon on quitte avec) N
(109) # () S 4 T () S 8 T ( * la valeur Failure.USER_OUTPUT_STREAM) N
(110) # () S 4 T () S 8 T ( */) N
(111) # () S
() p 4 T () S 8 T () S
(if) K
( \(out ) p
(\271) sy
( ) p
(null) k
(\)) p n
(112) # () S 4 T () S 8 T ({) N
(113) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(ServerHandler: creating user output ... ) str
("\);) p n
(114) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(115) # () S 4 T () S 8 T () S 12 T ( * En fonction du outType, cr\303\251ation d'un PrintWriter sur le) N
(116) # () S 4 T () S 8 T () S 12 T ( * flux de sortie vers l'utilisateur, ou bien d'un ObjectOutputStream) N
(117) # () S 4 T () S 8 T () S 12 T ( */) N
(118) # () S
() p 4 T () S 8 T () S 12 T (userOutType = outType;) N
(119) # () S 4 T () S 8 T () S 12 T () S
(switch) K
( \(userOutType\)) p n
(120) # () S 4 T () S 8 T () S 12 T ({) N
(121) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( OBJECT:) p n
(122) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (userOutPW = ) S
(null) k
(;) p n
(123) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(try) K
( {) p n
(124) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (userOutOS = ) S
(new) K
( ObjectOutputStream\(out\);) p n
(125) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (} ) S
(catch) K
( \(IOException e\) {) p n
(126) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(") S
(ServerHandler: cannot create userOutOS) str
(" + Failure.SERVER_OUTPUT_STREAM\)) p n
0 T (;) N
(127) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(128) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (System.exit\(Failure.SERVER_OUTPUT_STREAM.toInteger\(\)\);) N
(129) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(130) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(131) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( TEXT:) p n
(132) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(default) K
(:) p n
(133) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (userOutOS = ) S
(null) k
(;) p n
(134) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (userOutPW = ) S
(new) K
( PrintWriter\(out, ) p
(true) k
(\);) p n
(135) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(136) # () S 4 T () S 8 T () S 12 T (}) N
(137) # () S 4 T () S 8 T (}) N
(138) # () S 4 T () S 8 T () S
(else) K n
(139) # () S
() p 4 T () S 8 T ({) N
(140) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(ServerHandler: ) str
(" + Failure.USER_OUTPUT_STREAM\);) p n
(141) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.USER_OUTPUT_STREAM.toInteger\(\)\);) N
(142) # () S 4 T () S 8 T (}) N
(143) # () N
(144) # () S 4 T () S 8 T () S
(/*) c n
(145) # () S 4 T () S 8 T ( * On v\303\251rifie que le commonRun pass\303\251 en argument est non null avant de) N
(146) # () S 4 T () S 8 T ( * le copier dans notre commonRun. Sinon on quitte avec la valeur) N
(147) # () S 4 T () S 8 T ( * Failure.OTHER) N
(148) # () S 4 T () S 8 T ( */) N
(149) # () S
() p 4 T () S 8 T () S
(if) K
( \(commonRun ) p
(\271) sy
( ) p
(null) k
(\)) p n
(150) # () S 4 T () S 8 T ({) N
(151) # () S 4 T () S 8 T () S 12 T (this.commonRun = commonRun;) N
(152) # () S 4 T () S 8 T (}) N
(153) # () S 4 T () S 8 T () S
(else) K n
(154) # () S
() p 4 T () S 8 T ({) N
(155) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(ServerHandler: null common run ) str
(" + Failure.OTHER\);) p n
(156) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.OTHER.toInteger\(\)\);) N
(157) # () S 4 T () S 8 T (}) N
(158) # () S 4 T (}) N
(159) # () N
(160) # () S 4 T () S
(/**) C n
(161) # () S 4 T ( * Ex\303\251cution d'un ServerHandler. \303M-^Icoute les entr\303\251es en provenance du serveur) N
(162) # () S 4 T ( * et les envoient sur la sortie vers l'utilisateur) N
(ServerHandler.java) (Page 2/4) (avril 24, 17 18:41) title
border
grestore
(Printed by Pierre) rhead
(src/chat/client/ServerHandler.java) (10/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(163) # () C 4 T ( *) N
(164) # () S 4 T ( * @see java.lang.Runnable#run\(\)) N
(165) # () S 4 T ( */) N
(166) # () S
() p 4 T (@Override) N
(167) # () S 4 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(168) # () S 4 T ({) N
(169) # () S 4 T () S 8 T () S
(/*) c n
(170) # () S 4 T () S 8 T ( * Boucle principale de lecture des messages en provenance du serveur:) N
(171) # () S 4 T () S 8 T ( * tantque commonRun est vrai on lit une ligne depuis le serverInBR dans) N
(172) # () S 4 T () S 8 T ( * serverInput Si cette ligne est non nulle, on l'envoie dans le) N
(173) # () S 4 T () S 8 T ( * userOutPW Toute erreur ou exception dans cette boucle nous fait) N
(174) # () S 4 T () S 8 T ( * quitter cette boucle A la fin de la boucle on passe le commonRun \303\240) N
(175) # () S 4 T () S 8 T ( * false de mani\303\250re synchronis\303\251e \(atomique\) afin que le UserHandler) N
(176) # () S 4 T () S 8 T ( * s'arr\303\252te aussi.) N
(177) # () S 4 T () S 8 T ( */) N
(178) # () S
() p 4 T () S 8 T () S
(while) K
( \(commonRun.booleanValue\(\)\)) p n
(179) # () S 4 T () S 8 T ({) N
(180) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(181) # () S 4 T () S 8 T () S 12 T ( * lecture d'un message du serveur avec le serverInOS) N
(182) # () S 4 T () S 8 T () S 12 T ( * Si une Exception intervient) N
(183) # () S 4 T () S 8 T () S 12 T ( * ) S 16 T (- Ajout d'un warning au logger) N
(184) # () S 4 T () S 8 T () S 12 T ( * ) S 16 T (- on quitte la boucle while \(commonRun...) N
(185) # () S 4 T () S 8 T () S 12 T ( */) N
(186) # () S
() p 4 T () S 8 T () S 12 T (Message message = ) S
(null) k
(;) p n
(187) # () S 4 T () S 8 T () S 12 T () S
(try) K
( {) p n
(188) # () S 4 T () S 8 T () S 12 T () S 16 T (message = \(Message\) serverInOS.readObject\(\);) N
(189) # () S 4 T () S 8 T () S 12 T (} ) S
(catch) K
( \(Exception e\) {) p n
(190) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ServerHandler: Cannot readObject serverInOS) str
("\);) p n
(191) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(break) K
(;) p n
(192) # () S 4 T () S 8 T () S 12 T (}) N
(193) # () N
(194) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(\(message ) p
(\271) sy
( ) p
(null) k
(\)\)) p n
(195) # () S 4 T () S 8 T () S 12 T ({) N
(196) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(/*) c n
(197) # () S 4 T () S 8 T () S 12 T () S 16 T ( * Affichage du message vers l'utilisateur avec) N
(198) # () S 4 T () S 8 T () S 12 T () S 16 T ( * ) S 20 T (- le userOutPW si le client attends du texte) N
(199) # () S 4 T () S 8 T () S 12 T () S 16 T ( * ) S 20 T (- le userOutOS si le client attends des objet \(des Message\)) N
(200) # () S 4 T () S 8 T () S 12 T () S 16 T ( * v\303\251rification de l'\303\251tat d'erreur du userOutPW) N
(201) # () S 4 T () S 8 T () S 12 T () S 16 T ( * avec ajout d'un warning au logger si c'est le cas) N
(202) # () S 4 T () S 8 T () S 12 T () S 16 T ( */) N
(203) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(boolean) k
( error = ) p
(false) k
(;) p n
(204) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(switch) K
( \(userOutType\)) p n
(205) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(206) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(case) K
( OBJECT:) p n
(207) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(try) K
( {) p n
(208) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (userOutOS.writeObject\(message\);) N
(209) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (} ) S
(catch) K
( \(IOException e\) {) p n
(210) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.warning\(") S
(ServerHandler: Cannot writeObject userOutOS) str
(" + Failure.USER_OUTPUT_STRE) p n
0 T (AM\);) N
(211) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (error = ) S
(true) k
(;) p n
(212) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(213) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(; ) p
(// Break this switch) c n
(214) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(case) K
( TEXT:) p n
(215) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(default) K
(:) p n
(216) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (userOutPW.println\(message\);) N
(217) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(if) K
(\(userOutPW.checkError\(\)\)) p n
(218) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (error = ) S
(true) k
(;) p n
(219) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(220) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(221) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(error\)) p n
(222) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(223) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(; ) p
(// break this loop) c n
(224) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (}) N
(225) # () S 4 T () S 8 T () S 12 T (}) N
(226) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(227) # () S
() p 4 T () S 8 T () S 12 T ({) N
(228) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ServerHandler: null input read) str
("\);) p n
(229) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(break) K
(;) p n
(230) # () S 4 T () S 8 T () S 12 T (}) N
(231) # () S 4 T () S 8 T (}) N
(232) # () N
(233) # () S 4 T () S 8 T () S
(if) K
( \(commonRun.booleanValue\(\)\)) p n
(234) # () S 4 T () S 8 T ({) N
(235) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(ServerHandler: changing run state at the end ... ) str
("\);) p n
(236) # () N
(237) # () S 4 T () S 8 T () S 12 T () S
(synchronized) K
( \(commonRun\)) p n
(238) # () S 4 T () S 8 T () S 12 T ({) N
(239) # () S 4 T () S 8 T () S 12 T () S 16 T (commonRun = Boolean.FALSE;) N
(240) # () S 4 T () S 8 T () S 12 T (}) N
(241) # () S 4 T () S 8 T (}) N
(242) # () S 4 T (}) N
(243) # () N
(ServerHandler.java) (Page 3/4) (avril 24, 17 18:41) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(244) # () p 4 T () S
(/**) C n
(245) # () S 4 T ( * Fermeture des flux) N
(246) # () S 4 T ( */) N
(247) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( cleanup\(\)) p n
(248) # () S 4 T ({) N
(249) # () S 4 T () S 8 T (logger.info\(") S
(ServerHandler: closing server input stream reader ... ) str
("\);) p n
(250) # () S 4 T () S 8 T () S
(/*) c n
(251) # () S 4 T () S 8 T ( * fermeture du lecteur de flux d'entr\303\251e du serveur Si une) N
(252) # () S 4 T () S 8 T ( * IOException intervient ajout d'un severe au logger) N
(253) # () S 4 T () S 8 T ( */) N
(254) # () S
() p 4 T () S 8 T () S
(try) K n
(255) # () S
() p 4 T () S 8 T ({) N
(256) # () S 4 T () S 8 T () S 12 T (serverInOS.close\(\);) N
(257) # () S 4 T () S 8 T (}) N
(258) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(259) # () S 4 T () S 8 T ({) N
(260) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(ServerHandler: closing server input stream reader failed: ) str
(" +) p n
(261) # () S 4 T () S 8 T () S 12 T (              e.getLocalizedMessage\(\)\);) N
(262) # () S 4 T () S 8 T (}) N
(263) # () N
(264) # () S 4 T () S 8 T (logger.info\(") S
(ServerHandler: closing user output print writer ... ) str
("\);) p n
(265) # () N
(266) # () S 4 T () S 8 T () S
(/*) c n
(267) # () S 4 T () S 8 T ( * fermeture des flux de sortie vers l'utilisateur \(si != null\)) N
(268) # () S 4 T () S 8 T ( * Si une exception intervient, ajout d'un severe au logger) N
(269) # () S 4 T () S 8 T ( */) N
(270) # () S
() p 4 T () S 8 T () S
(if) K
( \(userOutPW ) p
(\271) sy
( ) p
(null) k
(\)) p n
(271) # () S 4 T () S 8 T ({) N
(272) # () S 4 T () S 8 T () S 12 T (userOutPW.close\(\);) N
(273) # () N
(274) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(userOutPW.checkError\(\)\)) p n
(275) # () S 4 T () S 8 T () S 12 T ({) N
(276) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(") S
(ServerHandler: closed user text output has errors: ) str
("\);) p n
(277) # () S 4 T () S 8 T () S 12 T (}) N
(278) # () S 4 T () S 8 T (}) N
(279) # () N
(280) # () S 4 T () S 8 T () S
(if) K
( \(userOutOS ) p
(\271) sy
( ) p
(null) k
(\)) p n
(281) # () S 4 T () S 8 T ({) N
(282) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(283) # () S
() p 4 T () S 8 T () S 12 T ({) N
(284) # () S 4 T () S 8 T () S 12 T () S 16 T (userOutOS.close\(\);) N
(285) # () S 4 T () S 8 T () S 12 T (}) N
(286) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(IOException e\)) p n
(287) # () S 4 T () S 8 T () S 12 T ({) N
(288) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(") S
(ServerHandler: closing user object output stream failed: ) str
(") p n
(289) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (+ e.getLocalizedMessage\(\)\);) N
(290) # () S 4 T () S 8 T () S 12 T (}) N
(291) # () S 4 T () S 8 T (}) N
(292) # () S 4 T (}) N
(293) # (}) N
(ServerHandler.java) (Page 4/4) (avril 24, 17 18:41) title
border
grestore
(Printed by Pierre) rhead
(src/chat/client/ServerHandler.java) (11/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat.client;) p n
(2) # () N
(3) # () S
(import) K
( java.io.BufferedReader;) p n
(4) # () S
(import) K
( java.io.IOException;) p n
(5) # () S
(import) K
( java.io.InputStream;) p n
(6) # () S
(import) K
( java.io.InputStreamReader;) p n
(7) # () S
(import) K
( java.io.OutputStream;) p n
(8) # () S
(import) K
( java.io.PrintWriter;) p n
(9) # () S
(import) K
( java.util.logging.Logger;) p n
(10) # () N
(11) # () S
(import) K
( chat.Failure;) p n
(12) # () S
(import) K
( chat.Vocabulary;) p n
(13) # () S
(import) K
( logger.LoggerFactory;) p n
(14) # () N
(15) # () S
(/**) C n
(16) # ( * User Handler Classe s'occupant de r\303\251cup\303\251rer ce que tape l'utilisateur et de) N
(17) # ( * l'envoyer au serveur de chat) N
(18) # ( *) N
(19) # ( * @author davidroussel) N
(20) # ( */) N
(21) # () S
(class) K
( ) p
(UserHandler) L
( ) p
(implements) K
( Runnable) p n
(22) # ({) N
(23) # () S 4 T () S
(/**) C n
(24) # () S 4 T ( * Lecteur du flux d'entr\303\251e depuis l'utilisateur) N
(25) # () S 4 T ( */) N
(26) # () S
() p 4 T () S
(private) K
( BufferedReader userInBR;) p n
(27) # () N
(28) # () S 4 T () S
(/**) C n
(29) # () S 4 T ( * Ecrivain vers le flux de sortie vers le serveur) N
(30) # () S 4 T ( */) N
(31) # () S
() p 4 T () S
(private) K
( PrintWriter serverOutPW;) p n
(32) # () N
(33) # () S 4 T () S
(/**) C n
(34) # () S 4 T ( * Etat d'ex\303\251cution commun du UserHandler et du {@link ServerHandler}) N
(35) # () S 4 T ( */) N
(36) # () S
() p 4 T () S
(private) K
( Boolean commonRun;) p n
(37) # () N
(38) # () S 4 T () S
(/**) C n
(39) # () S 4 T ( * Logger utilis\303\251 pour afficher \(ou pas\) les messafes d'erreurs) N
(40) # () S 4 T ( */) N
(41) # () S
() p 4 T () S
(private) K
( Logger logger;) p n
(42) # () N
(43) # () S 4 T () S
(/**) C n
(44) # () S 4 T ( * Constructeur d'un UserHandler) N
(45) # () S 4 T ( *) N
(46) # () S 4 T ( * @param in Le flux d'entr\303\251e de l'utilisateur pour les entr\303\251es utilisateur) N
(47) # () S 4 T ( * @param out le flux de sortie vers le serveur) N
(48) # () S 4 T ( * @param commonRun l'\303\251tat d'ex\303\251cution commun du {@link UserHandler} et du) N
(49) # () S 4 T ( *            {@link ServerHandler}) N
(50) # () S 4 T ( * @param parentLogger le logger parent) N
(51) # () S 4 T ( */) N
(52) # () S
() p 4 T () S
(public) K
( UserHandler\(InputStream in, OutputStream out, Boolean commonRun,) p n
(53) # () S 4 T () S 8 T () S 12 T (Logger parentLogger\)) N
(54) # () S 4 T ({) N
(55) # () S 4 T () S 8 T (logger = LoggerFactory.getParentLogger\(getClass\(\), parentLogger,) N
(56) # () S 4 T () S 8 T () S 12 T () S 16 T (parentLogger.getLevel\(\)\);) N
(57) # () N
(58) # () S 4 T () S 8 T () S
(/*) c n
(59) # () S 4 T () S 8 T ( * Cr\303\251ation du lecteur de flux d'entr\303\251e de l'utilisateur : userInBR sur) N
(60) # () S 4 T () S 8 T ( * l'InputStream in si celui ci est non null. Sinon on quitte avec la) N
(61) # () S 4 T () S 8 T ( * valeur Failure.USER_INPUT_STREAM) N
(62) # () S 4 T () S 8 T ( */) N
(63) # () S
() p 4 T () S 8 T () S
(if) K
( \(in ) p
(\271) sy
( ) p
(null) k
(\)) p n
(64) # () S 4 T () S 8 T ({) N
(65) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(UserHandler: creating user input buffered reader ... ) str
("\);) p n
(66) # () N
(67) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(68) # () S 4 T () S 8 T () S 12 T ( * Cr\303\251ation du BufferedReader sur un InputStreamReader \303\240 partir) N
(69) # () S 4 T () S 8 T () S 12 T ( * du flux d'entr\303\251e en provenance de l'utilisateur) N
(70) # () S 4 T () S 8 T () S 12 T ( */) N
(71) # () S
() p 4 T () S 8 T () S 12 T (userInBR = ) S
(new) K
( BufferedReader\() p
(new) K
( InputStreamReader\(in\)\);) p n
(72) # () S 4 T () S 8 T (}) N
(73) # () S 4 T () S 8 T () S
(else) K n
(74) # () S
() p 4 T () S 8 T ({) N
(75) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(UserHandler: null input stream) str
(") p n
(76) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (+ Failure.USER_INPUT_STREAM\);) N
(77) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.USER_INPUT_STREAM.toInteger\(\)\);) N
(78) # () S 4 T () S 8 T (}) N
(79) # () N
(80) # () S 4 T () S 8 T () S
(/*) c n
(81) # () S 4 T () S 8 T ( * Cr\303\251ation de l'\303\251crivain vers le flux de sortie vers le serveur :) N
(82) # () S 4 T () S 8 T ( * serverOutPW sur l'OutputStream out si celui ci est non null. Sinon,) N
(UserHandler.java) (Page 1/3) (avril 24, 17 20:22) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () c 4 T () S 8 T ( * on quitte avec la valeur Failure.CLIENT_OUTPUT_STREAM) N
(84) # () S 4 T () S 8 T ( */) N
(85) # () S
() p 4 T () S 8 T () S
(if) K
( \(out ) p
(\271) sy
( ) p
(null) k
(\)) p n
(86) # () S 4 T () S 8 T ({) N
(87) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(UserHandler: creating server output print writer ... ) str
("\);) p n
(88) # () N
(89) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(90) # () S 4 T () S 8 T () S 12 T ( * Cr\303\251ation du PrintWriter sur le flux de sortie vers le) N
(91) # () S 4 T () S 8 T () S 12 T ( * serveur \(en mode autoflush\)) N
(92) # () S 4 T () S 8 T () S 12 T ( */) N
(93) # () S
() p 4 T () S 8 T () S 12 T (serverOutPW = ) S
(new) K
( PrintWriter\(out, ) p
(true) k
(\);) p n
(94) # () S 4 T () S 8 T (}) N
(95) # () S 4 T () S 8 T () S
(else) K n
(96) # () S
() p 4 T () S 8 T ({) N
(97) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(UserHandler: null output stream) str
(") p n
(98) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (+ Failure.CLIENT_OUTPUT_STREAM\);) N
(99) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.CLIENT_OUTPUT_STREAM.toInteger\(\)\);) N
(100) # () S 4 T () S 8 T (}) N
(101) # () N
(102) # () S 4 T () S 8 T () S
(/*) c n
(103) # () S 4 T () S 8 T ( * On v\303\251rifie que le commonRun pass\303\251 en argument est non null avant de) N
(104) # () S 4 T () S 8 T ( * le copier dans notre commonRun. Sinon on quitte avec la valeur) N
(105) # () S 4 T () S 8 T ( * Failure.OTHER) N
(106) # () S 4 T () S 8 T ( */) N
(107) # () S
() p 4 T () S 8 T () S
(if) K
( \(commonRun ) p
(\271) sy
( ) p
(null) k
(\)) p n
(108) # () S 4 T () S 8 T ({) N
(109) # () S 4 T () S 8 T () S 12 T (this.commonRun = commonRun;) N
(110) # () S 4 T () S 8 T (}) N
(111) # () S 4 T () S 8 T () S
(else) K n
(112) # () S
() p 4 T () S 8 T ({) N
(113) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(ServerHandler: null common run ) str
(" + Failure.OTHER\);) p n
(114) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.OTHER.toInteger\(\)\);) N
(115) # () S 4 T () S 8 T (}) N
(116) # () S 4 T (}) N
(117) # () N
(118) # () S 4 T () S
(/**) C n
(119) # () S 4 T ( * Ex\303\251ction d'un UserHandler. \303M-^Icoute les entr\303\251es en provenance de) N
(120) # () S 4 T ( * l'utilisateur et les envoie dans le flux de sortie vers le serveur) N
(121) # () S 4 T ( *) N
(122) # () S 4 T ( * @see java.lang.Runnable#run\(\)) N
(123) # () S 4 T ( */) N
(124) # () S
() p 4 T (@Override) N
(125) # () S 4 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(126) # () S 4 T ({) N
(127) # () S 4 T () S 8 T (String userInput = ) S
(null) k
(;) p n
(128) # () N
(129) # () S 4 T () S 8 T () S
(/*) c n
(130) # () S 4 T () S 8 T ( * Boucle principale de lecture des messages en provenance de) N
(131) # () S 4 T () S 8 T ( * l'utilisateur. tantque commonRun est vrai on lit une ligne depuis le) N
(132) # () S 4 T () S 8 T ( * userInBR dans userInput Si cette ligne est non nulle, on l'envoie) N
(133) # () S 4 T () S 8 T ( * dans serverOutPW) N
(134) # () S 4 T () S 8 T ( */) N
(135) # () S
() p 4 T () S 8 T () S
(while) K
( \(commonRun.booleanValue\(\)\)) p n
(136) # () S 4 T () S 8 T ({) N
(137) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(138) # () S 4 T () S 8 T () S 12 T ( * Lecture d'une ligne en provenance de l'utilisateur gr\303\242ce) N
(139) # () S 4 T () S 8 T () S 12 T ( * au userInBR. Si une IOException intervient - Ajout d'un) N
(140) # () S 4 T () S 8 T () S 12 T ( * severe au logger - On quitte la boucle) N
(141) # () S 4 T () S 8 T () S 12 T ( */) N
(142) # () S
() p 4 T () S 8 T () S 12 T () S
(try) K
( {) p n
(143) # () S 4 T () S 8 T () S 12 T () S 16 T (userInput = userInBR.readLine\(\);) N
(144) # () S 4 T () S 8 T () S 12 T (} ) S
(catch) K
( \(IOException e\) {) p n
(145) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(") S
(UserHandler: userInBR.readLine\(\)) str
("\);) p n
(146) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(147) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(break) K
(;) p n
(148) # () S 4 T () S 8 T () S 12 T (}) N
(149) # () N
(150) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(userInput ) p
(\271) sy
( ) p
(null) k
(\)) p n
(151) # () S 4 T () S 8 T () S 12 T ({) N
(152) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(/*) c n
(153) # () S 4 T () S 8 T () S 12 T () S 16 T ( * Envoi du texte au serveur gr\303\242ce au serverOutPW et) N
(154) # () S 4 T () S 8 T () S 12 T () S 16 T ( * v\303\251rification de l'\303\251tat d'erreur du serverOutPW avec ajout) N
(155) # () S 4 T () S 8 T () S 12 T () S 16 T ( * d'un warning au logger et break si c'est le cas.) N
(156) # () S 4 T () S 8 T () S 12 T () S 16 T ( */) N
(157) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \() p
(\330) sy
(serverOutPW.checkError\(\)\) {) p n
(158) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (serverOutPW.println\(userInput\);) N
(159) # () S 4 T () S 8 T () S 12 T () S 16 T (} ) S
(else) K
( {) p n
(160) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.warning\(") S
(Error in serverOutPW) str
("\);) p n
(161) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(162) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(163) # () N
(164) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(/*) c n
(UserHandler.java) (Page 2/3) (avril 24, 17 20:22) title
border
grestore
(Printed by Pierre) rhead
(src/chat/client/UserHandler.java) (12/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3,1) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () c 4 T () S 8 T () S 12 T () S 16 T ( * Si la commande Vocabulary.byeCmd a \303\251t\303\251 tap\303\251e par) N
(166) # () S 4 T () S 8 T () S 12 T () S 16 T ( * l'utilisateur on quitte la boucle) N
(167) # () S 4 T () S 8 T () S 12 T () S 16 T ( */) N
(168) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(userInput.equals\(Vocabulary.byeCmd\)\)) p n
(169) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(170) # () S 4 T () S 8 T () S 12 T (}) N
(171) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(172) # () S
() p 4 T () S 8 T () S 12 T ({) N
(173) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(UserHandler: null user input) str
("\);) p n
(174) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(break) K
(;) p n
(175) # () S 4 T () S 8 T () S 12 T (}) N
(176) # () S 4 T () S 8 T (}) N
(177) # () N
(178) # () S 4 T () S 8 T () S
(if) K
( \(commonRun.booleanValue\(\)\)) p n
(179) # () S 4 T () S 8 T ({) N
(180) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(UserHandler: changing run state at the end ... ) str
("\);) p n
(181) # () N
(182) # () S 4 T () S 8 T () S 12 T () S
(synchronized) K
( \(commonRun\)) p n
(183) # () S 4 T () S 8 T () S 12 T ({) N
(184) # () S 4 T () S 8 T () S 12 T () S 16 T (commonRun = Boolean.FALSE;) N
(185) # () S 4 T () S 8 T () S 12 T (}) N
(186) # () S 4 T () S 8 T (}) N
(187) # () S 4 T (}) N
(188) # () N
(189) # () S 4 T () S
(/**) C n
(190) # () S 4 T ( * Fermeture des flux) N
(191) # () S 4 T ( */) N
(192) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( cleanup\(\)) p n
(193) # () S 4 T ({) N
(194) # () S 4 T () S 8 T (logger.info\(") S
(UserHandler: closing user input stream reader ... ) str
("\);) p n
(195) # () S 4 T () S 8 T () S
(/*) c n
(196) # () S 4 T () S 8 T ( * fermeture du lecteur de flux d'entr\303\251e de l'utilisateur Si une) N
(197) # () S 4 T () S 8 T ( * IOException intervient : - Ajout d'un severe au logger) N
(198) # () S 4 T () S 8 T ( */) N
(199) # () S
() p 4 T () S 8 T () S
(try) K n
(200) # () S
() p 4 T () S 8 T ({) N
(201) # () S 4 T () S 8 T () S 12 T (userInBR.close\(\);) N
(202) # () S 4 T () S 8 T (}) N
(203) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(204) # () S 4 T () S 8 T ({) N
(205) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(UserHandler: closing server input stream reader failed) str
("\);) p n
(206) # () S 4 T () S 8 T () S 12 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(207) # () S 4 T () S 8 T (}) N
(208) # () N
(209) # () S 4 T () S 8 T (logger.info\(") S
(UserHandler: closing server output print writer ... ) str
("\);) p n
(210) # () S 4 T () S 8 T () S
(// fermeture de l'\303\251crivain vers le flux de sortie vers le serveur) c n
(211) # () S
() p 4 T () S 8 T (serverOutPW.close\(\);) N
(212) # () S 4 T (}) N
(213) # (}) N
(UserHandler.java) (Page 3/3) (avril 24, 17 20:22) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat;) p n
(2) # () N
(3) # () S
(import) K
( java.io.BufferedReader;) p n
(4) # () S
(import) K
( java.io.InputStreamReader;) p n
(5) # () S
(import) K
( java.io.ObjectOutputStream;) p n
(6) # () S
(import) K
( java.io.PipedInputStream;) p n
(7) # () S
(import) K
( java.io.PipedOutputStream;) p n
(8) # () N
(9) # () S
(/**) C n
(10) # ( * Enum\303\251ration de toutes les erreurs possibles dans le syst\303\250me client/serveur de) N
(11) # ( * chat.) N
(12) # ( *) N
(13) # ( * @author davidroussel) N
(14) # ( */) N
(15) # () S
(public) K
( enum Failure) p n
(16) # ({) N
(17) # () S 4 T () S
(/**) C n
(18) # () S 4 T ( * Unable to get local host IP address) N
(19) # () S 4 T ( */) N
(20) # () S
() p 4 T (NO_LOCAL_HOST,) N
(21) # () S 4 T () S
(/**) C n
(22) # () S 4 T ( * Invalid port, usr ports should be > 1024) N
(23) # () S 4 T ( */) N
(24) # () S
() p 4 T (INVALID_PORT,) N
(25) # () S 4 T () S
(/**) C n
(26) # () S 4 T ( * Unable to determin log name or user name) N
(27) # () S 4 T ( */) N
(28) # () S
() p 4 T (NO_USER_NAME,) N
(29) # () S 4 T () S
(/**) C n
(30) # () S 4 T ( * Unable to access system env to get user or log names) N
(31) # () S 4 T ( */) N
(32) # () S
() p 4 T (NO_ENV_ACCESS,) N
(33) # () S 4 T () S
(/**) C n
(34) # () S 4 T ( * Unable to set timeout on server) N
(35) # () S 4 T ( */) N
(36) # () S
() p 4 T (SET_SERVER_SOCKET_TIMEOUT,) N
(37) # () S 4 T () S
(/**) C n
(38) # () S 4 T ( * Unable to create server socket) N
(39) # () S 4 T ( */) N
(40) # () S
() p 4 T (CREATE_SERVER_SOCKET,) N
(41) # () S 4 T () S
(/**) C n
(42) # () S 4 T ( * @uml.property name="uNKNOWN_HOST") N
(43) # () S 4 T ( * @uml.associationEnd) N
(44) # () S 4 T ( */) N
(45) # () S
() p 4 T (UNKNOWN_HOST,) N
(46) # () S 4 T () S
(/**) C n
(47) # () S 4 T ( * Unable to create client socket to host) N
(48) # () S 4 T ( */) N
(49) # () S
() p 4 T (CLIENT_CONNECTION,) N
(50) # () S 4 T () S
(/**) C n
(51) # () S 4 T ( * Unable to obtain input stream from server on client) N
(52) # () S 4 T ( * OR to obtain input stream from client on server) N
(53) # () S 4 T ( */) N
(54) # () S
() p 4 T (CLIENT_INPUT_STREAM,) N
(55) # () S 4 T () S
(/**) C n
(56) # () S 4 T ( * Unable to obtain output stream to server on client) N
(57) # () S 4 T ( * OR to obtain temporary print writer to server on client) N
(58) # () S 4 T ( * OR to obtain temporary print writer to client in server) N
(59) # () S 4 T ( * @uml.property name="cLIENT_OUTPUT_STREAM") N
(60) # () S 4 T ( * @uml.associationEnd) N
(61) # () S 4 T ( */) N
(62) # () S
() p 4 T (CLIENT_OUTPUT_STREAM,) N
(63) # () S 4 T () S
(/**) C n
(64) # () S 4 T ( * Unable to create {@link PipedInputStream} from gui client Out Pipe) N
(65) # () S 4 T ( * OR unable to create {@link BufferedReader} on {@link InputStreamReader}) N
(66) # () S 4 T ( * from user) N
(67) # () S 4 T ( */) N
(68) # () S
() p 4 T (USER_INPUT_STREAM,) N
(69) # () S 4 T () S
(/**) C n
(70) # () S 4 T ( * Unable to create {@link PipedOutputStream} to GUI client In Pipe) N
(71) # () S 4 T ( * OR Unable to create {@link ObjectOutputStream} to user in client) N
(72) # () S 4 T ( */) N
(73) # () S
() p 4 T (USER_OUTPUT_STREAM,) N
(74) # () S 4 T () S
(/**) C n
(75) # () S 4 T ( * Unable to accept new connection from client in server) N
(76) # () S 4 T ( */) N
(77) # () S
() p 4 T (SERVER_CONNECTION,) N
(78) # () S 4 T () S
(/**) C n
(79) # () S 4 T ( * Not used yet) N
(80) # () S 4 T ( */) N
(81) # () S
() p 4 T (SERVER_INPUT_STREAM,) N
(82) # () S 4 T () S
(/**) C n
(Failure.java) (Page 1/3) (avril 10, 16 19:17) title
border
grestore
(Printed by Pierre) rhead
(src/chat/client/UserHandler.java, src/chat/Failure.java) (13/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () C 4 T ( * Not used yet) N
(84) # () S 4 T ( */) N
(85) # () S
() p 4 T (SERVER_OUTPUT_STREAM,) N
(86) # () S 4 T () S
(/**) C n
(87) # () S 4 T ( * @uml.property name="nO_NAME_CLIENT") N
(88) # () S 4 T ( * @uml.associationEnd) N
(89) # () S 4 T ( */) N
(90) # () S
() p 4 T (NO_NAME_CLIENT,) N
(91) # () S 4 T () S
(/**) C n
(92) # () S 4 T ( * GUI Client lauch failed) N
(93) # () S 4 T ( */) N
(94) # () S
() p 4 T (CLIENT_NOT_READY,) N
(95) # () S 4 T () S
(/**) C n
(96) # () S 4 T ( * Other) N
(97) # () S 4 T ( */) N
(98) # () S
() p 4 T (OTHER;) N
(99) # () N
(100) # () S 4 T () S
(/**) C n
(101) # () S 4 T ( * Affichage sous forme de texte des erreurs possibles) N
(102) # () S 4 T ( */) N
(103) # () S
() p 4 T (@Override) N
(104) # () S 4 T () S
(public) K
( String toString\(\)) p n
(105) # () S 4 T ({) N
(106) # () S 4 T () S 8 T () S
(switch) K
( \() p
(this) k
(\)) p n
(107) # () S 4 T () S 8 T ({) N
(108) # () S 4 T () S 8 T () S
(// RunChatClient Failures \(3\)) c n
(109) # () S
() p 4 T () S 8 T () S 12 T () S
(case) K
( NO_LOCAL_HOST:) p n
(110) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Unable to get local host name) str
("\);) p n
(111) # () S 4 T () S 8 T () S 12 T () S
(case) K
( INVALID_PORT:) p n
(112) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Port number should be > 1024) str
("\);) p n
(113) # () S 4 T () S 8 T () S 12 T () S
(case) K
( NO_USER_NAME:) p n
(114) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Empty user name) str
("\);) p n
(115) # () S 4 T () S 8 T () S 12 T () S
(case) K
( NO_ENV_ACCESS:) p n
(116) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\() p n
(117) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (") S
(System does not allow access to environment variables) str
("\);) p n
(118) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// RunChatServer Failures \(2\)) c n
(119) # () S
() p 4 T () S 8 T () S 12 T () S
(case) K
( SET_SERVER_SOCKET_TIMEOUT:) p n
(120) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Unable to set Server socket timeout) str
("\);) p n
(121) # () S 4 T () S 8 T () S 12 T () S
(case) K
( CREATE_SERVER_SOCKET:) p n
(122) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Unable to create Server socket) str
("\);) p n
(123) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Chat Client \(4\)) c n
(124) # () S
() p 4 T () S 8 T () S 12 T () S
(case) K
( UNKNOWN_HOST:) p n
(125) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Unkown host) str
("\);) p n
(126) # () S 4 T () S 8 T () S 12 T () S
(case) K
( CLIENT_CONNECTION:) p n
(127) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Couldn't get I/O for connection to host) str
("\);) p n
(128) # () S 4 T () S 8 T () S 12 T () S
(case) K
( CLIENT_INPUT_STREAM:) p n
(129) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Could not get intput stream from client) str
("\);) p n
(130) # () S 4 T () S 8 T () S 12 T () S
(case) K
( CLIENT_OUTPUT_STREAM:) p n
(131) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Could not get output stream to client) str
("\);) p n
(132) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// ServerHandler \(2\)) c n
(133) # () S
() p 4 T () S 8 T () S 12 T () S
(case) K
( USER_INPUT_STREAM:) p n
(134) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Could not get input stream from user) str
("\);) p n
(135) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// ServerHandler) c n
(136) # () S
() p 4 T () S 8 T () S 12 T () S
(case) K
( USER_OUTPUT_STREAM:) p n
(137) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Could not get output stream to user) str
("\);) p n
(138) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// ChatServer#run \(3\)) c n
(139) # () S
() p 4 T () S 8 T () S 12 T () S
(case) K
( SERVER_CONNECTION:) p n
(140) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Client connection to server failed) str
("\);) p n
(141) # () S 4 T () S 8 T () S 12 T () S
(case) K
( SERVER_INPUT_STREAM:) p n
(142) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(could not get input stream from server) str
("\);) p n
(143) # () S 4 T () S 8 T () S 12 T () S
(case) K
( SERVER_OUTPUT_STREAM:) p n
(144) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(could not get output stream to server) str
("\);) p n
(145) # () S 4 T () S 8 T () S 12 T () S
(case) K
( NO_NAME_CLIENT:) p n
(146) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Unable to read client's name) str
("\);) p n
(147) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Client \(1\)) c n
(148) # () S
() p 4 T () S 8 T () S 12 T () S
(case) K
( CLIENT_NOT_READY:) p n
(149) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Main Client not ready) str
("\);) p n
(150) # () S 4 T () S 8 T () S 12 T () S
(case) K
( OTHER:) p n
(151) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Other cause) str
("\);) p n
(152) # () S 4 T () S 8 T (}) N
(153) # () S 4 T () S 8 T () S
(throw) K
( ) p
(new) K
( AssertionError\(") p
(Failure: unknown op: ) str
(" + ) p
(this) k
(\);) p n
(154) # () S 4 T (}) N
(155) # () N
(156) # () S 4 T () S
(/**) C n
(157) # () S 4 T ( * Conversion en entier du type d'erreur) N
(158) # () S 4 T ( *) N
(159) # () S 4 T ( * @return le num\303\251ro de l'erreur) N
(160) # () S 4 T ( * @code System.exit\(Failure.CLIENT_NOT_READY.toInteger\(\)\);) N
(161) # () S 4 T ( * @endcode) N
(162) # () S 4 T ( */) N
(163) # () S
() p 4 T () S
(public) K
( ) p
(int) k
( toInteger\(\)) p n
(164) # () S 4 T ({) N
(Failure.java) (Page 2/3) (avril 10, 16 19:17) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T () S
(return) K
( ordinal\(\) + 1;) p n
(166) # () S 4 T (}) N
(167) # () N
(168) # (}) N
(Failure.java) (Page 3/3) (avril 10, 16 19:17) title
border
grestore
(Printed by Pierre) rhead
(src/chat/Failure.java) (14/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 15
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat;) p n
(2) # () N
(3) # () S
(/**) C n
(4) # ( * Package contenant les parties client et serveur d'un serveur de Chat ainsi) N
(5) # ( * que le vocabulaire de commandes sp\303\251ciales et un enum de toutes les causes) N
(6) # ( * possible d'\303\251checs des programmes. Un serveur de chat permet \303\240 plusieurs) N
(7) # ( * clients de se connecter au serveur et chaque ligne envoy\303\251e d'un client est) N
(8) # ( * r\303\251p\303\251t\303\251e \303\240 l'ensemble des client pr\303\251c\303\251d\303\251e par l'identifiant du client qui l'a) N
(9) # ( * envoy\303\251e.) N
(10) # ( */) N
(package-info.java) (Page 1/1) (nov. 17, 14 17:45) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat.server;) p n
(2) # () N
(3) # () S
(import) K
( java.io.BufferedReader;) p n
(4) # () S
(import) K
( java.io.IOException;) p n
(5) # () S
(import) K
( java.io.InputStreamReader;) p n
(6) # () S
(import) K
( java.io.PrintWriter;) p n
(7) # () S
(import) K
( java.net.ServerSocket;) p n
(8) # () S
(import) K
( java.net.Socket;) p n
(9) # () S
(import) K
( java.net.SocketTimeoutException;) p n
(10) # () S
(import) K
( java.util.Vector;) p n
(11) # () S
(import) K
( java.util.logging.Logger;) p n
(12) # () N
(13) # () S
(import) K
( chat.Failure;) p n
(14) # () S
(import) K
( logger.LoggerFactory;) p n
(15) # () N
(16) # () S
(/**) C n
(17) # ( * Classe du serveur de chat Chaque message de chaque client doit \303\252tre renvoy\303\251 \303\240) N
(18) # ( * tous autres clients) N
(19) # ( *) N
(20) # ( * @author davidroussel) N
(21) # ( */) N
(22) # () S
(public) K
( ) p
(class) K
( ) p
(ChatServer) L
( ) p
(implements) K
( Runnable) p n
(23) # ({) N
(24) # () S 4 T () S
(/**) C n
(25) # () S 4 T ( * La socket serveur) N
(26) # () S 4 T ( */) N
(27) # () S
() p 4 T () S
(private) K
( ServerSocket serverSocket;) p n
(28) # () N
(29) # () S 4 T () S
(/**) C n
(30) # () S 4 T ( * Le port par d\303\251faut utilis\303\251) N
(31) # () S 4 T ( */) N
(32) # () S
() p 4 T () S
(public) K
( ) p
(final) K
( ) p
(static) K
( ) p
(int) k
( DEFAULTPORT = 1394;) p n
(33) # () N
(34) # () S 4 T () S
(/**) C n
(35) # () S 4 T ( * Temps d'attente \(en ms\) par d\303\251faut d'une connection d'un client. Au bout) N
(36) # () S 4 T ( * de ce temps une {@link SocketTimeoutException} est g\303\251n\303\251r\303\251e et on peut) N
(37) # () S 4 T ( * choisir de recommencer \303\240 attendre \(s'il reste des clients\) ou bien) N
(38) # () S 4 T ( * arr\303\252ter le serveur \(s'il n'y a plus de clients\)) N
(39) # () S 4 T ( */) N
(40) # () S
() p 4 T () S
(public) K
( ) p
(final) K
( ) p
(static) K
( ) p
(int) k
( DEFAULTTIMEOUT = 1000;) p n
(41) # () N
(42) # () S 4 T () S
(/**) C n
(43) # () S 4 T ( * La liste des diff\303\251rents clients. Un client est constitu\303\251 :) N
(44) # () S 4 T ( * <ul>) N
(45) # () S 4 T ( * <li>d'une {@link Socket}</li>) N
(46) # () S 4 T ( * <li>d'un nom : {@link String}</li>) N
(47) # () S 4 T ( * <li>d'un flux d'entr\303\251e : {@link BufferedReader}</li>) N
(48) # () S 4 T ( * <li>d'un flux de sortie {@link PrintWriter}</li>) N
(49) # () S 4 T ( * </ul>) N
(50) # () S 4 T ( * Cette liste devra \303\252tre acc\303\251d\303\251e de mani\303\250re synchrone par les diff\303\251rents) N
(51) # () S 4 T ( * threads traitant les diff\303\251rents clients.) N
(52) # () S 4 T ( *) N
(53) # () S 4 T ( * @uml.property name="clients") N
(54) # () S 4 T ( * @uml.associationEnd multiplicity="\(0 -1\)" ordering="true") N
(55) # () S 4 T ( *                     aggregation="composite") N
(56) # () S 4 T ( *                     inverse="chatServer:chat.server.InputOutputClient") N
(57) # () S 4 T ( */) N
(58) # () S
() p 4 T () S
(private) K
( Vector<InputOutputClient> clients;) p n
(59) # () N
(60) # () S 4 T () S
(/**) C n
(61) # () S 4 T ( * Liste des handlers de chaque client) N
(62) # () S 4 T ( * @uml.property name="handlers") N
(63) # () S 4 T ( * @uml.associationEnd multiplicity="\(0 -1\)" ordering="true") N
(64) # () S 4 T ( *                     aggregation="composite") N
(65) # () S 4 T ( *                     inverse="chatServer:chat.server.ClientHandler") N
(66) # () S 4 T ( */) N
(67) # () S
() p 4 T () S
(private) K
( Vector<ClientHandler> handlers;) p n
(68) # () N
(69) # () S 4 T () S
(/**) C n
(70) # () S 4 T ( * logger pour afficher les messages d'erreur) N
(71) # () S 4 T ( */) N
(72) # () S
() p 4 T () S
(private) K
( Logger logger;) p n
(73) # () N
(74) # () S 4 T () S
(/**) C n
(75) # () S 4 T ( * Etat d'\303\251coute du serveur. Cet \303\251tat est vrai au d\303\251part et passe \303\240 false) N
(76) # () S 4 T ( * lorsque le dernier client se d\303\251connecte.) N
(77) # () S 4 T ( */) N
(78) # () S
() p 4 T () S
(private) K
( ) p
(boolean) k
( listening;) p n
(79) # () N
(80) # () S 4 T () S
(/**) C n
(81) # () S 4 T ( * Termine le serveur lorsque le dernier client se d\303\251logue) N
(82) # () S 4 T ( */) N
(ChatServer.java) (Page 1/5) (avril 13, 16 18:26) title
border
grestore
(Printed by Pierre) rhead
(src/chat/package-info.java, src/chat/server/ChatServer.java) (15/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 16
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S
(private) K
( ) p
(final) K
( ) p
(boolean) k
( quitOnLastClient;) p n
(84) # () N
(85) # () S 4 T () S
(/**) C n
(86) # () S 4 T ( * Constructeur valu\303\251 d'un serveur de chat. Celui ci initialise la) N
(87) # () S 4 T ( * {@link ServerSocket},) N
(88) # () S 4 T ( *) N
(89) # () S 4 T ( * @param port le port sur lequel on \303\251coute les requ\303\250tes) N
(90) # () S 4 T ( * @param verbose affiche les messages de d\303\251bug ou pas) N
(91) # () S 4 T ( * @param timeout temps d'attente de connection d'un client) N
(92) # () S 4 T ( * @param quitOnLastClient quitte le serveur lorsque le dernier client) N
(93) # () S 4 T ( * se d\303\251logue) N
(94) # () S 4 T ( * @param parentLogger logger parent pour l'affichage des messages de) N
(95) # () S 4 T ( * debug) N
(96) # () S 4 T ( * @throws IOException Si une erreur intervient lors de la cr\303\251ation de la) N
(97) # () S 4 T ( *             {@link ServerSocket}) N
(98) # () S 4 T ( */) N
(99) # () S
() p 4 T () S
(public) K
( ChatServer\() p
(int) k
( port,) p n
(100) # () S 4 T (                  ) S
(int) k
( timeout,) p n
(101) # () S 4 T (                  ) S
(boolean) k
( quitOnLastClient,) p n
(102) # () S 4 T (                  Logger parentLogger\)) N
(103) # () S 4 T (    ) S
(throws) K
( IOException) p n
(104) # () S 4 T ({) N
(105) # () S 4 T () S 8 T (this.quitOnLastClient = quitOnLastClient;) N
(106) # () S 4 T () S 8 T (logger = LoggerFactory.getParentLogger\(getClass\(\),) N
(107) # () S 4 T () S 8 T (                                       parentLogger,) N
(108) # () S 4 T () S 8 T (                                       parentLogger.getLevel\(\)\);) N
(109) # () N
(110) # () S 4 T () S 8 T (logger.info\(") S
(ChatServer::ChatServer\(port = ) str
(" + port + ") p
(, timeout = ) str
(") p n
(111) # () S 4 T () S 8 T (    + timeout + ") S
(, quit = ) str
(" + \(quitOnLastClient ? ") p
(true) str
(" : ") p
(false) str
("\)) p n
(112) # () S 4 T () S 8 T (    + ") S
(\)) str
("\);) p n
(113) # () N
(114) # () S 4 T () S 8 T (serverSocket = ) S
(new) K
( ServerSocket\(port\);) p n
(115) # () S 4 T () S 8 T () S
(if) K
( \(serverSocket ) p
(\271) sy
( ) p
(null) k
(\)) p n
(116) # () S 4 T () S 8 T ({) N
(117) # () S 4 T () S 8 T () S 12 T (serverSocket.setSoTimeout\(timeout\);) N
(118) # () S 4 T () S 8 T (}) N
(119) # () N
(120) # () S 4 T () S 8 T (clients = ) S
(new) K
( Vector<InputOutputClient>\(\);) p n
(121) # () S 4 T () S 8 T (handlers = ) S
(new) K
( Vector<ClientHandler>\(\);) p n
(122) # () S 4 T (}) N
(123) # () N
(124) # () S 4 T () S
(/**) C n
(125) # () S 4 T ( * Constructeur valu\303\251 d'un serveur de chat. Celui ci initialise la) N
(126) # () S 4 T ( * {@link ServerSocket},) N
(127) # () S 4 T ( *) N
(128) # () S 4 T ( * @param port le port sur lequel on \303\251coute les requ\303\250tes) N
(129) # () S 4 T ( * @param verbose affiche les messages de d\303\251bug ou pas) N
(130) # () S 4 T ( * @param parentLogger logger parent pour l'affichage de messages de debug) N
(131) # () S 4 T ( * @throws IOException Si une erreur intervient lors de la cr\303\251ation de la) N
(132) # () S 4 T ( *             {@link ServerSocket}) N
(133) # () S 4 T ( */) N
(134) # () S
() p 4 T () S
(public) K
( ChatServer\() p
(int) k
( port, Logger parentLogger\) ) p
(throws) K
( IOException) p n
(135) # () S 4 T ({) N
(136) # () S 4 T () S 8 T () S
(this) k
(\(port, DEFAULTTIMEOUT, ) p
(true) k
(, parentLogger\);) p n
(137) # () S 4 T (}) N
(138) # () N
(139) # () S 4 T () S
(/**) C n
(140) # () S 4 T ( * Constructeur par d\303\251faut d'un serveur de chat. Celui ci initialise la) N
(141) # () S 4 T ( * @param parentLogger logger parent pour l'affichage des messages de) N
(142) # () S 4 T ( * debug) N
(143) # () S 4 T ( * {@link ServerSocket}, Le port utilis\303\251 par d\303\251faut est d\303\251fini par) N
(144) # () S 4 T ( * {@link #DEFAULTPORT}) N
(145) # () S 4 T ( *) N
(146) # () S 4 T ( * @throws IOException Si une erreur intervient lors de la cr\303\251ation de la) N
(147) # () S 4 T ( *             {@link ServerSocket}) N
(148) # () S 4 T ( * @see #DEFAULTPORT) N
(149) # () S 4 T ( */) N
(150) # () S
() p 4 T () S
(public) K
( ChatServer\(Logger parentLogger\) ) p
(throws) K
( IOException) p n
(151) # () S 4 T ({) N
(152) # () S 4 T () S 8 T () S
(this) k
(\(DEFAULTPORT, parentLogger\);) p n
(153) # () S 4 T (}) N
(154) # () N
(155) # () S 4 T () S
(/**) C n
(156) # () S 4 T ( * Accesseur en lecture du {@link #quitOnLastClient}) N
(157) # () S 4 T ( * @return la valeu du {@link #quitOnLastClient}) N
(158) # () S 4 T ( */) N
(159) # () S
() p 4 T () S
(public) K
( ) p
(boolean) k
( isQuitOnLastClient\(\)) p n
(160) # () S 4 T ({) N
(161) # () S 4 T () S 8 T () S
(return) K
( quitOnLastClient;) p n
(162) # () S 4 T (}) N
(163) # () N
(164) # () S 4 T () S
(/**) C n
(ChatServer.java) (Page 2/5) (avril 13, 16 18:26) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () C 4 T ( * Change l'\303\251tat d'\303\251coute du serveur) N
(166) # () S 4 T ( * @param value la nouvelle valeur) N
(167) # () S 4 T ( */) N
(168) # () S
() p 4 T () S
(public) K
( ) p
(synchronized) K
( ) p
(void) k
( setListening\() p
(boolean) k
( value\)) p n
(169) # () S 4 T ({) N
(170) # () S 4 T () S 8 T (listening = value;) N
(171) # () S 4 T (}) N
(172) # () N
(173) # () S 4 T () S
(/**) C n
(174) # () S 4 T ( * Ex\303\251cution du serveur de chat : - On attend la connection d'un client -) N
(175) # () S 4 T ( * Lorsque celle ci se produit le client est trait\303\251 dans un nouveau thread -) N
(176) # () S 4 T ( * Lorsqu'un client envoie un message au serveur, celui ci le rediffuse \303\240) N
(177) # () S 4 T ( * l'ensemble des autres clients) N
(178) # () S 4 T ( *) N
(179) # () S 4 T ( * @see java.lang.Runnable#run\(\)) N
(180) # () S 4 T ( */) N
(181) # () S
() p 4 T (@Override) N
(182) # () S 4 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(183) # () S 4 T ({) N
(184) # () S 4 T () S 8 T (Vector<Thread> handlerThreads = ) S
(new) K
( Vector<Thread>\(\);) p n
(185) # () S 4 T () S 8 T (listening = ) S
(true) k
(;) p n
(186) # () N
(187) # () S 4 T () S 8 T () S
(while) K
( \(listening\)) p n
(188) # () S 4 T () S 8 T ({) N
(189) # () S 4 T () S 8 T () S 12 T (Socket clientSocket = ) S
(null) k
(;) p n
(190) # () S 4 T () S 8 T () S 12 T (String clientName = ) S
(null) k
(;) p n
(191) # () N
(192) # () S 4 T () S 8 T () S 12 T () S
(// acceptation de la socket du client) c n
(193) # () S
() p 4 T () S 8 T () S 12 T () S
(try) K n
(194) # () S
() p 4 T () S 8 T () S 12 T ({) N
(195) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// on attends ici une connection d'un nouveau client) c n
(196) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (clientSocket = serverSocket.accept\(\); ) S
(// --> IOException) c n
(197) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (logger.fine\(") S
(ChatServer: client connection accepted) str
("\);) p n
(198) # () N
(199) # () S 4 T () S 8 T () S 12 T (}) N
(200) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(SocketTimeoutException ste\)) p n
(201) # () S 4 T () S 8 T () S 12 T ({) N
(202) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// on re-attends) c n
(203) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (logger.info\(") S
(Socket timeout, rewaiting ...) str
("\);) p n
(204) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(continue) K
(;) p n
(205) # () S 4 T () S 8 T () S 12 T (}) N
(206) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(IOException e\)) p n
(207) # () S 4 T () S 8 T () S 12 T ({) N
(208) # () N
(209) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(Failure.SERVER_CONNECTION.toString\(\)) N
(210) # () S 4 T () S 8 T () S 12 T () S 16 T (    + ") S
(: ) str
(" + e.getLocalizedMessage\(\)\);) p n
(211) # () S 4 T () S 8 T () S 12 T () S 16 T (System.exit\(Failure.SERVER_CONNECTION.toInteger\(\)\);) N
(212) # () S 4 T () S 8 T () S 12 T (}) N
(213) # () N
(214) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(clientSocket ) p
(\271) sy
( ) p
(null) k
(\)) p n
(215) # () S 4 T () S 8 T () S 12 T ({) N
(216) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// r\303\251cup\303\251ration du nom du client) c n
(217) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (BufferedReader reader = ) S
(null) k
(;) p n
(218) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.info\(") S
(ChatServer: Creatingc client input stream to get client's name ... ) str
("\);) p n
(219) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(try) K n
(220) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(221) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (reader = ) S
(new) K
( BufferedReader\() p
(new) K
( InputStreamReader\() p n
(222) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (clientSocket.getInputStream\(\)\)\);) N
(223) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(224) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(catch) K
( \(IOException e1\)) p n
(225) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(226) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.severe\(") S
(ChatServer: ) str
(" + Failure.CLIENT_INPUT_STREAM\);) p n
(227) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.severe\(e1.getLocalizedMessage\(\)\);) N
(228) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (System.exit\(Failure.CLIENT_INPUT_STREAM.toInteger\(\)\);) N
(229) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(230) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(reader ) p
(\271) sy
( ) p
(null) k
(\)) p n
(231) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(232) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.info\(") S
(ChatServer: reading client's name: ) str
("\);) p n
(233) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(try) K n
(234) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(235) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(// Lecture du nom du client) c n
(236) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (clientName = reader.readLine\(\);) N
(237) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.info\(") S
(ChatServer: client name ) str
(" + clientName\);) p n
(238) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(239) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(catch) K
( \(IOException e\)) p n
(240) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(241) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(") S
(ChatServer: ) str
("+ Failure.NO_NAME_CLIENT\);) p n
(242) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(243) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (System.exit\(Failure.NO_NAME_CLIENT.toInteger\(\)\);) N
(244) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(245) # () N
(246) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(/*) c n
(ChatServer.java) (Page 3/5) (avril 13, 16 18:26) title
border
grestore
(Printed by Pierre) rhead
(src/chat/server/ChatServer.java) (16/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4-5) 17
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(247) # () c 4 T () S 8 T () S 12 T () S 16 T () S 20 T ( * On ne doit PAS fermer le client input stream car cela) N
(248) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ( * revient \303\240 fermer la socket) N
(249) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ( */) N
(250) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (}) N
(251) # () N
(252) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Avant d'enregister cette connection dans l'ensemble des) c n
(253) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// clients il faut v\303\251rifier qu'aucun client ne porte le m\303\252me) c n
(254) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// nom) c n
(255) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(searchClientByName\(clientName\) ) p
(\272) sy
( ) p
(null) k
(\)) p n
(256) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(257) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Cr\303\251ation d'un nouveau client) c n
(258) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (InputOutputClient newClient =) N
(259) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(new) K
( InputOutputClient\(clientSocket,) p n
(260) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (                      clientName,) N
(261) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (                      logger\);) N
(262) # () N
(263) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Ajout du nouveau client \303\240 la liste des clients.) c n
(264) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(synchronized) K
( \(clients\)) p n
(265) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(266) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (clients.add\(newClient\);) N
(267) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(268) # () N
(269) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Cr\303\251ation et lancement d'un handler pour ce client) c n
(270) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (ClientHandler handler = ) S
(new) K
( ClientHandler\() p
(this) k
(,) p n
(271) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (                                          newClient,) N
(272) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (                                          clients,) N
(273) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (                                          logger\);) N
(274) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (handlers.add\(handler\);) N
(275) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Thread handlerThread = ) S
(new) K
( Thread\(handler\);) p n
(276) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (handlerThread.start\(\);) N
(277) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (handlerThreads.add\(handlerThread\);) N
(278) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(279) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K
( ) p
(// un client avec ce nom existe d\303\251j\303\240) c n
(280) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(281) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// on notifie au client qu'il est refus\303\251) c n
(282) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(try) K n
(283) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(284) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (PrintWriter out = ) S
(new) K
( PrintWriter\() p n
(285) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (clientSocket.getOutputStream\(\), ) S
(true) k
(\);) p n
(286) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (out.println\(") S
(server > Sorry another client already use the name ) str
(") p n
(287) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (+ clientName\);) N
(288) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (out.println\(") S
(Hit ^D to close your client and try another name) str
("\);) p n
(289) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (out.close\(\);) N
(290) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(291) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(catch) K
( \(IOException e\)) p n
(292) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(293) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(") S
(ChatServer: ) str
(" + Failure.CLIENT_OUTPUT_STREAM\);) p n
(294) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(295) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(296) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(297) # () N
(298) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(/*) c n
(299) # () S 4 T () S 8 T () S 12 T () S 16 T ( * Lorsqu'un ClientHandler se termine il lance la m\303\251thode) N
(300) # () S 4 T () S 8 T () S 12 T () S 16 T ( * cleanup qui lorqu'il n'y a plus aucun thread modifie la) N
(301) # () S 4 T () S 8 T () S 12 T () S 16 T ( * valeur de "listening" \303\240 false) N
(302) # () S 4 T () S 8 T () S 12 T () S 16 T ( */) N
(303) # () S
() p 4 T () S 8 T () S 12 T (}) N
(304) # () S 4 T () S 8 T (} ) S
(// while listening) c n
(305) # () N
(306) # () S
() p 4 T () S 8 T () S
(// attente de la fin de tous les threads de ClientHandler) c n
(307) # () S
() p 4 T () S 8 T () S
(for) K
( \(Thread t : handlerThreads\)) p n
(308) # () S 4 T () S 8 T ({) N
(309) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(310) # () S
() p 4 T () S 8 T () S 12 T ({) N
(311) # () S 4 T () S 8 T () S 12 T () S 16 T (t.join\(\);) N
(312) # () S 4 T () S 8 T () S 12 T (}) N
(313) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(InterruptedException e\)) p n
(314) # () S 4 T () S 8 T () S 12 T ({) N
(315) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(") S
(ChatServer::run: Client handlers join interrupted) str
("\);) p n
(316) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(317) # () S 4 T () S 8 T () S 12 T (}) N
(318) # () S 4 T () S 8 T (}) N
(319) # () N
(320) # () S 4 T () S 8 T (logger.info\(") S
(ChatServer::run: all client handlers terminated) str
("\);) p n
(321) # () N
(322) # () N
(323) # () S 4 T () S 8 T (handlerThreads.clear\(\);) N
(324) # () S 4 T () S 8 T (handlers.clear\(\);) N
(325) # () S 4 T () S 8 T (clients.clear\(\);) N
(326) # () N
(327) # () S 4 T () S 8 T () S
(// Fermeture de la socket du serveur) c n
(328) # () S
() p 4 T () S 8 T (logger.info\(") S
(ChatServer::run: Closing server socket ... ) str
("\);) p n
(ChatServer.java) (Page 4/5) (avril 13, 16 18:26) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(329) # () p 4 T () S 8 T () S
(try) K n
(330) # () S
() p 4 T () S 8 T ({) N
(331) # () S 4 T () S 8 T () S 12 T (serverSocket.close\(\);) N
(332) # () S 4 T () S 8 T (}) N
(333) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(334) # () S 4 T () S 8 T ({) N
(335) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(Close serversocket Failed !) str
("\);) p n
(336) # () S 4 T () S 8 T () S 12 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(337) # () S 4 T () S 8 T (}) N
(338) # () N
(339) # () S 4 T (}) N
(340) # () N
(341) # () S 4 T () S
(/**) C n
(342) # () S 4 T ( * M\303\251thode invoqu\303\251e par les {@link ClientHandler} \303\240 la fin de leur ex\303\251cution) N
(343) # () S 4 T ( * pour \303\251ventuellement arr\303\252ter le serveur lorsqu'il n'y a plus de clients) N
(344) # () S 4 T ( */) N
(345) # () S
() p 4 T () S
(protected) K
( ) p
(synchronized) K
( ) p
(void) k
( cleanup\(\)) p n
(346) # () S 4 T ({) N
(347) # () S 4 T () S 8 T () S
(// s'il ne reste plus de threads on arr\303\252te la boucle) c n
(348) # () S
() p 4 T () S 8 T () S
(int) k
( nbThreads = ClientHandler.getNbThreads\(\);) p n
(349) # () S 4 T () S 8 T () S
(if) K
( \(nbThreads ) p
(\243) sy
( 0\)) p n
(350) # () S 4 T () S 8 T ({) N
(351) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(quitOnLastClient\)) p n
(352) # () S 4 T () S 8 T () S 12 T ({) N
(353) # () S 4 T () S 8 T () S 12 T () S 16 T (listening = ) S
(false) k
(;) p n
(354) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.info\(") S
(ChatServer::run: no more threads.) str
("\);) p n
(355) # () S 4 T () S 8 T () S 12 T (}) N
(356) # () S 4 T () S 8 T (}) N
(357) # () S 4 T () S 8 T () S
(else) K n
(358) # () S
() p 4 T () S 8 T ({) N
(359) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(ChatServer::run: still ) str
(" + nbThreads +) p n
(360) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
( threads remaining ...) str
("\);) p n
(361) # () S 4 T () S 8 T (}) N
(362) # () S 4 T (}) N
(363) # () N
(364) # () S 4 T () S
(/**) C n
(365) # () S 4 T ( * Recherche parmis les clients d\303\251j\303\240 enregistr\303\251s un client portant le m\303\252me) N
(366) # () S 4 T ( * nom que l'argument) N
(367) # () S 4 T ( *) N
(368) # () S 4 T ( * @param clientName le nom du client \303\240 rechercher parmis les clients d\303\251j\303\240) N
(369) # () S 4 T ( *            enregistr\303\251s) N
(370) # () S 4 T ( * @return le client recherch\303\251 s'il existe ou bien null s'il n'existe pas) N
(371) # () S 4 T ( */) N
(372) # () S
() p 4 T () S
(protected) K
( InputOutputClient searchClientByName\(String clientName\)) p n
(373) # () S 4 T ({) N
(374) # () S 4 T () S 8 T () S
(/*) c n
(375) # () S 4 T () S 8 T ( * La consultation de la liste des clients \303\240 la recherche d'un nom doit) N
(376) # () S 4 T () S 8 T ( * \303\252tre atomique afin qu'aucun autre thread ne puisse modifier cette) N
(377) # () S 4 T () S 8 T ( * liste pendant qu'on la consulte : d'o\303\271 le "synchronized") N
(378) # () S 4 T () S 8 T ( */) N
(379) # () S
() p 4 T () S 8 T () S
(synchronized) K
( \(clients\)) p n
(380) # () S 4 T () S 8 T ({) N
(381) # () S 4 T () S 8 T () S 12 T () S
(for) K
( \(InputOutputClient c : clients\)) p n
(382) # () S 4 T () S 8 T () S 12 T ({) N
(383) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(c.getName\(\).equals\(clientName\)\)) p n
(384) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(385) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( c;) p n
(386) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(387) # () S 4 T () S 8 T () S 12 T (}) N
(388) # () S 4 T () S 8 T (}) N
(389) # () N
(390) # () S 4 T () S 8 T () S
(return) K
( ) p
(null) k
(;) p n
(391) # () S 4 T (}) N
(392) # (}) N
(ChatServer.java) (Page 5/5) (avril 13, 16 18:26) title
border
grestore
(Printed by Pierre) rhead
(src/chat/server/ChatServer.java) (17/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 18
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat.server;) p n
(2) # () N
(3) # () S
(import) K
( java.io.IOException;) p n
(4) # () S
(import) K
( java.io.InvalidClassException;) p n
(5) # () S
(import) K
( java.io.NotSerializableException;) p n
(6) # () S
(import) K
( java.io.ObjectOutputStream;) p n
(7) # () S
(import) K
( java.util.Vector;) p n
(8) # () S
(import) K
( java.util.logging.Logger;) p n
(9) # () N
(10) # () S
(import) K
( chat.Vocabulary;) p n
(11) # () S
(import) K
( logger.LoggerFactory;) p n
(12) # () S
(import) K
( models.Message;) p n
(13) # () N
(14) # () S
(/**) C n
(15) # ( * Classe utilis\303\251e pour traiter chacune des connections des clients dans un) N
(16) # ( * nouveau thread) N
(17) # ( *) N
(18) # ( * @author davidroussel) N
(19) # ( */) N
(20) # () S
(public) K
( ) p
(class) K
( ) p
(ClientHandler) L
( ) p
(implements) K
( Runnable) p n
(21) # ({) N
(22) # () S 4 T () S
(/**) C n
(23) # () S 4 T ( * le ChatServer qui a lanc\303\251 ce thread) N
(24) # () S 4 T ( *) N
(25) # () S 4 T ( * @uml.property name="parent") N
(26) # () S 4 T ( * @uml.associationEnd aggregation="shared") N
(27) # () S 4 T ( */) N
(28) # () S
() p 4 T () S
(private) K
( ChatServer parent;) p n
(29) # () N
(30) # () S 4 T () S
(/**) C n
(31) # () S 4 T ( * Le client principal de ce handler) N
(32) # () S 4 T ( *) N
(33) # () S 4 T ( * @uml.property name="mainClient") N
(34) # () S 4 T ( * @uml.associationEnd aggregation="shared") N
(35) # () S 4 T ( */) N
(36) # () S
() p 4 T () S
(private) K
( InputClient mainClient;) p n
(37) # () N
(38) # () S 4 T () S
(/**) C n
(39) # () S 4 T ( * Les autres clients reli\303\251s au serveur.) N
(40) # () S 4 T ( *) N
(41) # () S 4 T ( * @uml.property name="allClients") N
(42) # () S 4 T ( * @uml.associationEnd multiplicity="\(1 -1\)" ordering="true") N
(43) # () S 4 T ( *                     aggregation="shared") N
(44) # () S 4 T ( *                     inverse="clientHandler:chat.server.InputOutputClient") N
(45) # () S 4 T ( */) N
(46) # () S
() p 4 T () S
(private) K
( Vector<InputOutputClient> allClients;) p n
(47) # () N
(48) # () S 4 T () S
(/**) C n
(49) # () S 4 T ( * Compteur d'instances du nombre de threads cr\303\251\303\251s pour traiter les) N
(50) # () S 4 T ( * connections) N
(51) # () S 4 T ( *) N
(52) # () S 4 T ( * @uml.property name="nbThreads") N
(53) # () S 4 T ( */) N
(54) # () S
() p 4 T () S
(private) K
( ) p
(static) K
( ) p
(int) k
( nbThreads = 0;) p n
(55) # () N
(56) # () S 4 T () S
(/**) C n
(57) # () S 4 T ( * Logger pour l'affichage des messages de debug) N
(58) # () S 4 T ( */) N
(59) # () S
() p 4 T () S
(private) K
( Logger logger;) p n
(60) # () N
(61) # () S 4 T () S
(/**) C n
(62) # () S 4 T ( * Constructeur d'un handler de client) N
(63) # () S 4 T ( *) N
(64) # () S 4 T ( * @param parent le {@link ChatServer} qui a lanc\303\251 ce Runnable) N
(65) # () S 4 T ( * @param mainClient le client principal qu'il faut \303\251couter) N
(66) # () S 4 T ( * @param allClients les autres clients \303\240 qui il faut redistribuer ce) N
(67) # () S 4 T ( *            qu'envoie le client principal) N
(68) # () S 4 T ( */) N
(69) # () S
() p 4 T () S
(public) K
( ClientHandler\(ChatServer parent,) p n
(70) # () S 4 T (                     InputClient mainClient,) N
(71) # () S 4 T (                     Vector<InputOutputClient> allClients,) N
(72) # () S 4 T (                     Logger parentLogger\)) N
(73) # () S 4 T ({) N
(74) # () S 4 T () S 8 T (this.parent = parent;) N
(75) # () S 4 T () S 8 T (this.mainClient = mainClient;) N
(76) # () S 4 T () S 8 T (this.allClients = allClients;) N
(77) # () S 4 T () S 8 T (nbThreads++;) N
(78) # () S 4 T () S 8 T (logger = LoggerFactory.getParentLogger\(getClass\(\),) N
(79) # () S 4 T () S 8 T (                                       parentLogger,) N
(80) # () S 4 T () S 8 T (                                       parentLogger.getLevel\(\)\);) N
(81) # () S 4 T (}) N
(82) # () N
(ClientHandler.java) (Page 1/4) (mai 03, 16 17:09) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S
(/**) C n
(84) # () S 4 T ( * Accesseur en lecture du nombre de ClientHandler en activit\303\251) N
(85) # () S 4 T ( *) N
(86) # () S 4 T ( * @return the nbThreads) N
(87) # () S 4 T ( * @uml.property name="nbThreads") N
(88) # () S 4 T ( */) N
(89) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(int) k
( getNbThreads\(\)) p n
(90) # () S 4 T ({) N
(91) # () S 4 T () S 8 T () S
(return) K
( nbThreads;) p n
(92) # () S 4 T (}) N
(93) # () N
(94) # () S 4 T () S
(/**) C n
(95) # () S 4 T ( * Ex\303\251cution d'un handler de client. Consiste \303\240 lire une ligne du client) N
(96) # () S 4 T ( * jusqu'\303\240 ce que l'on re\303\247oive la commande bye, ou qu'une IOException) N
(97) # () S 4 T ( * intervienne si le flux est coup\303\251) N
(98) # () S 4 T ( *) N
(99) # () S 4 T ( * @see java.lang.Runnable#run\(\)) N
(100) # () S 4 T ( */) N
(101) # () S
() p 4 T (@Override) N
(102) # () S 4 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(103) # () S 4 T ({) N
(104) # () S 4 T () S 8 T () S
(boolean) k
( loggedOut = ) p
(false) k
(;) p n
(105) # () S 4 T () S 8 T () S
(boolean) k
( killed = ) p
(false) k
(;) p n
(106) # () S 4 T () S 8 T (String clientInput = ) S
(null) k
(;) p n
(107) # () N
(108) # () N
(109) # () S 4 T () S 8 T () S
(try) K n
(110) # () S
() p 4 T () S 8 T ({) N
(111) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(112) # () S 4 T () S 8 T () S 12 T ( * Attente d'une ligne de texte de la part d'un client \(appel) N
(113) # () S 4 T () S 8 T () S 12 T ( * bloquant\)) N
(114) # () S 4 T () S 8 T () S 12 T ( */) N
(115) # () S
() p 4 T () S 8 T () S 12 T () S
(while) K
( \() p
(\330) sy
(loggedOut ) p
(\331) sy
( ) p
(\330) sy
(killed ) p
(\331) sy n
(116) # () S
() p 4 T () S 8 T () S 12 T (       \(\(clientInput = mainClient.getIn\(\).readLine\(\)\) ) S
(\271) sy
( ) p
(null) k
(\)\)) p n
(117) # () S 4 T () S 8 T () S 12 T ({) N
(118) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Affiche ce qui est re\303\247u par le serveur dans la console) c n
(119) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (System.out.println\(mainClient.getName\(\) + ") S
( > ) str
(" + clientInput\);) p n
(120) # () N
(121) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// on v\303\251rifie que ce client n'a pas \303\251t\303\251 banni par un super utilisateur) c n
(122) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(mainClient.isBanned\(\)\)) p n
(123) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(124) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.info\(mainClient.getName\(\) + ") S
( is banned) str
("\);) p n
(125) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (loggedOut = ) S
(true) k
(;) p n
(126) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(127) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(128) # () N
(129) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// On v\303\251rifie qu'il ne s'agit pas d'un message de contr\303\264le \(kick ou bye\)) c n
(130) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(boolean) k
( controlMessage = ) p
(false) k
(;) p n
(131) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(for) K
( \(String command : Vocabulary.commands\)) p n
(132) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(133) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(clientInput.toLowerCase\(\).startsWith\(command\)\)) p n
(134) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(135) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (controlMessage = ) S
(true) k
(;) p n
(136) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(137) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(138) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(139) # () N
(140) # () S 4 T () S 8 T () S 12 T () S 16 T (StringBuffer messageContent = ) S
(new) K
( StringBuffer\(\);) p n
(141) # () N
(142) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(controlMessage\)) p n
(143) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(144) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Le client veut nous quitter) c n
(145) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(clientInput.toLowerCase\(\).equals\(Vocabulary.byeCmd\)\)) p n
(146) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(147) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (messageContent.append\(mainClient.getName\(\) +) N
(148) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (                      ") S
( logged out) str
("\);) p n
(149) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (loggedOut = ) S
(true) k
(;) p n
(150) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(151) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// on v\303\251rifie si un kill est demand\303\251 par le client) c n
(152) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(else) K
( ) p
(if) K
( \(clientInput.toLowerCase\(\).startsWith\(Vocabulary.killCmd\)\)) p n
(153) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(154) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(// on v\303\251rifie que le client est super-utilisateur) c n
(155) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(// \(1er de tous les clients\)) c n
(156) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(if) K
( \(allClients.get\(0\) ) p
(\272) sy
( mainClient\)) p n
(157) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(158) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (killed = ) S
(true) k
(;) p n
(159) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (parent.setListening\() S
(false) k
(\);) p n
(160) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(break) K
(;) p n
(161) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(162) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(163) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// on v\303\251rifie si un kick est demand\303\251 par le client) c n
(164) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(else) K
( ) p
(if) K
( \(clientInput.toLowerCase\(\).startsWith\(Vocabulary.kickCmd\)\)) p n
(ClientHandler.java) (Page 2/4) (mai 03, 16 17:09) title
border
grestore
(Printed by Pierre) rhead
(src/chat/server/ClientHandler.java) (18/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 19
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(166) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (messageContent.append\(Vocabulary.kickCmd\);) N
(167) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(// On bloque l'acc\303\250s \303\240 allClients tant que l'on traite) c n
(168) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(// la commande du mainClient) c n
(169) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(synchronized) K
( \(allClients\)) p n
(170) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(171) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(// on v\303\251rifie que le client est super-utilisateur) c n
(172) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(// \(1er de tous les clients\)) c n
(173) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(if) K
( \(allClients.get\(0\) ) p
(\272) sy
( mainClient\)) p n
(174) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T ({) N
(175) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S
(// on recherche le nom du client \303\240 kicker) c n
(176) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (String kickedName = ) S
(null) k
(;) p n
(177) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S
(try) K n
(178) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T ({) N
(179) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S
(/*) c n
(180) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T ( * On recherche le nom du client \303\240 kicker) N
(181) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T ( * dans kick clientToKill) N
(182) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T ( */) N
(183) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (kickedName = clientInput.substring\() N
(184) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T (Vocabulary.kickCmd.length\(\) + 1\);) N
(185) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (}) N
(186) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S
(catch) K
( \(IndexOutOfBoundsException iob\)) p n
(187) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T ({) N
(188) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (logger.warning\(") S
(ClientHandler: Error retreiving client name to kick) str
("\);) p n
(189) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (}) N
(190) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S
(if) K
( \(kickedName ) p
(\271) sy
( ) p
(null) k
(\)) p n
(191) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T ({) N
(192) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (messageContent.append\(") S
( ) str
(" + kickedName\);) p n
(193) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (InputOutputClient kickedClient =) N
(194) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T (parent.searchClientByName\(kickedName\);) N
(195) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S
(if) K
( \(kickedClient ) p
(\271) sy
( ) p
(null) k
(\)) p n
(196) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T ({) N
(197) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T (kickedClient.setBanned\() S
(true) k
(\);) p n
(198) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T (logger.info\(") S
(Clienthandler[) str
(") p n
(199) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T () S 44 T (+ mainClient.getName\(\) + ") S
(] client ) str
(") p n
(200) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T () S 44 T (+ kickedName + ") S
( banned) str
("\);) p n
(201) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T (messageContent.append\(") S
( [request granted by server]) str
("\);) p n
(202) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (}) N
(203) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S
(else) K n
(204) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T ({) N
(205) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T (messageContent.append\(") S
( [client ) str
(") p n
(206) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T () S 44 T (+ kickedName + ") S
( does not exist]) str
("\);) p n
(207) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (}) N
(208) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (}) N
(209) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S
(else) K n
(210) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T ({) N
(211) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (messageContent.append\(") S
( [no client name to kick]) str
("\);) p n
(212) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (}) N
(213) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (}) N
(214) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(else) K n
(215) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T ({) N
(216) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S
(int) k
( cmdL = Vocabulary.kickCmd.length\(\);) p n
(217) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (messageContent.append\(clientInput.substring\(cmdL, \(clientInput.lengt) N
0 T (h\(\)\)\)\);) N
(218) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (messageContent.append\(") S
( [request denied by server]) str
("\);) p n
(219) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (}) N
(220) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (messageContent.append\(") S
( by ) str
(" + mainClient.getName\(\)\);) p n
(221) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(222) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(223) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(224) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(225) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(226) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Il s'agit d'un message ordinaire) c n
(227) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (messageContent.append\(clientInput\);) N
(228) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(229) # () N
(230) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(/*) c n
(231) # () S 4 T () S 8 T () S 12 T () S 16 T ( * Cr\303\251ation du message \303\240 diffuser) N
(232) # () S 4 T () S 8 T () S 12 T () S 16 T ( */) N
(233) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (Message message = ) S
(null) k
(;) p n
(234) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(controlMessage\)) p n
(235) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(236) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (message = ) S
(new) K
( Message\(messageContent.toString\(\)\);) p n
(237) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(238) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(239) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(240) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (message = ) S
(new) K
( Message\(messageContent.toString\(\),) p n
(241) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (                      mainClient.getName\(\)\);) N
(242) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(243) # () N
(244) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(/*) c n
(245) # () S 4 T () S 8 T () S 12 T () S 16 T ( * Diffusion du message \303\240 tous les clients.) N
(ClientHandler.java) (Page 3/4) (mai 03, 16 17:09) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(246) # () c 4 T () S 8 T () S 12 T () S 16 T ( * allClients est un Vector qui est atomique donc a) N
(247) # () S 4 T () S 8 T () S 12 T () S 16 T ( * priori on a pas besoin du "synchronized \(allClients\)",) N
(248) # () S 4 T () S 8 T () S 12 T () S 16 T ( * N\303\251anmoins ce synchronized permet de bloquer l'acc\303\250s \303\240) N
(249) # () S 4 T () S 8 T () S 12 T () S 16 T ( * l'ensemble des autres clients quand on diffuse le message de) N
(250) # () S 4 T () S 8 T () S 12 T () S 16 T ( * notre mainClient \303\240 tous les clients. Sans quoi on pourrait) N
(251) # () S 4 T () S 8 T () S 12 T () S 16 T ( * diffuser le message \303\240 un client, puis se faire interrompre) N
(252) # () S 4 T () S 8 T () S 12 T () S 16 T ( * par un autre client, puis diffuser le message \303\240 un autre) N
(253) # () S 4 T () S 8 T () S 12 T () S 16 T ( * client, etc. A v\303\251rifier ...) N
(254) # () S 4 T () S 8 T () S 12 T () S 16 T ( */) N
(255) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(synchronized) K
( \(allClients\)) p n
(256) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(257) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(for) K
( \(InputOutputClient c : allClients\)) p n
(258) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(259) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(if) K
( \(c.isReady\(\)\)) p n
(260) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(261) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(// r\303\251cup\303\251ration du flux de sortie et envoi du message) c n
(262) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (ObjectOutputStream out = c.getOut\(\);) N
(263) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (out.writeObject\(message\);) N
(264) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(265) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(else) K n
(266) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(267) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (logger.warning\(") S
(ClientHandler[) str
(") p n
(268) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (+ mainClient.getName\(\) + ") S
(]Client ) str
(") p n
(269) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (+ c.getName\(\) + ") S
( not ready) str
("\);) p n
(270) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(271) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(272) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(273) # () S 4 T () S 8 T () S 12 T (}) N
(274) # () S 4 T () S 8 T (}) N
(275) # () S 4 T () S 8 T () S
(catch) K
( \(InvalidClassException ice\)) p n
(276) # () S 4 T () S 8 T ({) N
(277) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(ClientHandler[) str
(") p n
(278) # () S 4 T () S 8 T () S 12 T () S 16 T (+ mainClient.getName\(\) + ") S
(]: write to client invalid class ) str
(" +) p n
(279) # () S 4 T () S 8 T () S 12 T () S 16 T (ice.getLocalizedMessage\(\)\);) N
(280) # () S 4 T () S 8 T (}) N
(281) # () S 4 T () S 8 T () S
(catch) K
( \(NotSerializableException nse\)) p n
(282) # () S 4 T () S 8 T ({) N
(283) # () S 4 T () S 8 T () S 12 T (logger.severe\() N
(284) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(ClientHandler[) str
(" + mainClient.getName\(\)) p n
(285) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (+ ") S
(]: write to not serializable exception ) str
(") p n
(286) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (+ nse.getLocalizedMessage\(\)\);) N
(287) # () S 4 T () S 8 T (}) N
(288) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(289) # () S 4 T () S 8 T ({) N
(290) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(ClientHandler[) str
(" + mainClient.getName\(\)) p n
(291) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (+ ") S
(]: received or write failed, Closing client ) str
(" + ) p
(this) k
(\);) p n
(292) # () S 4 T () S 8 T (}) N
(293) # () N
(294) # () S 4 T () S 8 T () S
(// remove current client from allClients \(should be atomic\)) c n
(295) # () S
() p 4 T () S 8 T () S
(synchronized) K
( \(allClients\)) p n
(296) # () S 4 T () S 8 T ({) N
(297) # () S 4 T () S 8 T () S 12 T (allClients.remove\(mainClient\);) N
(298) # () S 4 T () S 8 T (}) N
(299) # () S 4 T () S 8 T () S
(// cleanup current client) c n
(300) # () S
() p 4 T () S 8 T (mainClient.cleanup\(\);) N
(301) # () S 4 T () S 8 T () S
(synchronized) K
( \(parent\)) p n
(302) # () S 4 T () S 8 T ({) N
(303) # () S 4 T () S 8 T () S 12 T () S
(// d\303\251cr\303\251mentation du nombre de threads des clients) c n
(304) # () S
() p 4 T () S 8 T () S 12 T (nbThreads--;) N
(305) # () S 4 T () S 8 T () S 12 T () S
(// Nettoyage du ChatServer parent \(qui pourra evt s'arr\303\252ter s'il n'y a) c n
(306) # () S
() p 4 T () S 8 T () S 12 T () S
(// plus de clients\)) c n
(307) # () S
() p 4 T () S 8 T () S 12 T (parent.cleanup\(\);) N
(308) # () S 4 T () S 8 T (}) N
(309) # () S 4 T (}) N
(310) # () N
(311) # (}) N
(ClientHandler.java) (Page 4/4) (mai 03, 16 17:09) title
border
grestore
(Printed by Pierre) rhead
(src/chat/server/ClientHandler.java) (19/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 20
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat.server;) p n
(2) # () N
(3) # () S
(import) K
( java.io.BufferedReader;) p n
(4) # () S
(import) K
( java.io.IOException;) p n
(5) # () S
(import) K
( java.io.InputStreamReader;) p n
(6) # () S
(import) K
( java.net.Socket;) p n
(7) # () S
(import) K
( java.util.logging.Logger;) p n
(8) # () N
(9) # () S
(import) K
( logger.LoggerFactory;) p n
(10) # () N
(11) # () S
(/**) C n
(12) # ( * Classe stockant les caract\303\251ristiques d'un client trait\303\251 par un) N
(13) # ( * {@link ClientHandler}. Celui ci est caract\303\251ris\303\251 par) N
(14) # ( * <ul>) N
(15) # ( * <li>{@link #clientSocket} : {@link Socket} du client</li>) N
(16) # ( * <li>{@link #name} : nom du client</li>) N
(17) # ( * <li>{@link #inBR} : {@link BufferedReader} cr\303\251\303\251 \303\240 partir d'un) N
(18) # ( * {@link InputStreamReader} sur l'{@link InputStream} de la {@link Socket}) N
(19) # ( * et permettant de lire le texte en provenance du client</li>) N
(20) # ( * <li>{@link #ready} indique que l'{@link BufferedReader} a \303\251t\303\251 cr\303\251\303\251 et que) N
(21) # ( * l'on est pr\303\252t \303\240 lire les lignes en provenance du client</li>) N
(22) # ( * <li>{@link #banned} indique le statut de bannissement</li>) N
(23) # ( * </ul>) N
(24) # ( *) N
(25) # ( * @author davidroussel) N
(26) # ( */) N
(27) # () S
(public) K
( ) p
(class) K
( ) p
(InputClient) L n
(28) # () S
({) p n
(29) # () S 4 T () S
(/**) C n
(30) # () S 4 T ( * La socket du client) N
(31) # () S 4 T ( */) N
(32) # () S
() p 4 T () S
(protected) K
( Socket clientSocket;) p n
(33) # () N
(34) # () S 4 T () S
(/**) C n
(35) # () S 4 T ( * Le nom du client) N
(36) # () S 4 T ( *) N
(37) # () S 4 T ( * @uml.property name="name") N
(38) # () S 4 T ( */) N
(39) # () S
() p 4 T () S
(protected) K
( String name;) p n
(40) # () N
(41) # () S 4 T () S
(/**) C n
(42) # () S 4 T ( * le flux d'entr\303\251e du client \(celui sur lequel on lit ce qui vient du) N
(43) # () S 4 T ( * client\)) N
(44) # () S 4 T ( */) N
(45) # () S
() p 4 T () S
(protected) K
( BufferedReader inBR;) p n
(46) # () N
(47) # () S 4 T () S
(/**) C n
(48) # () S 4 T ( * Un Main client est "ready" lorsque sa clientSocket est non nulle et que) N
(49) # () S 4 T ( * l'on a r\303\251ussi \303\240 obtenir son input stream) N
(50) # () S 4 T ( *) N
(51) # () S 4 T ( * @uml.property name="ready") N
(52) # () S 4 T ( */) N
(53) # () S
() p 4 T () S
(protected) K
( ) p
(boolean) k
( ready;) p n
(54) # () N
(55) # () S 4 T () S
(/**) C n
(56) # () S 4 T ( * Etat de bannissement du client. Id\303\251e : le premier utilisateur du serveur) N
(57) # () S 4 T ( * est consid\303\251r\303\251 comme le super-user \(un MainClient\). En cons\303\251quence il a) N
(58) # () S 4 T ( * le privil\303\250ge de pouvoir kicker les autres clients.) N
(59) # () S 4 T ( *) N
(60) # () S 4 T ( * @uml.property name="banned") N
(61) # () S 4 T ( */) N
(62) # () S
() p 4 T () S
(protected) K
( ) p
(boolean) k
( banned;) p n
(63) # () N
(64) # () S 4 T () S
(/**) C n
(65) # () S 4 T ( * logger pour afficher les messages de debug) N
(66) # () S 4 T ( */) N
(67) # () S
() p 4 T () S
(protected) K
( Logger logger;) p n
(68) # () N
(69) # () S 4 T () S
(/**) C n
(70) # () S 4 T ( * Constructeur d'un MainClient) N
(71) # () S 4 T ( * @param socket the client's socket) N
(72) # () S 4 T ( * @param name the client's name) N
(73) # () S 4 T ( * @param parentLogger logger parent pour l'affichage des messages de debug) N
(74) # () S 4 T ( */) N
(75) # () S
() p 4 T () S
(public) K
( InputClient\(Socket socket, String name, Logger parentLogger\)) p n
(76) # () S 4 T ({) N
(77) # () S 4 T () S 8 T (clientSocket = socket;) N
(78) # () S 4 T () S 8 T (this.name = name;) N
(79) # () S 4 T () S 8 T (inBR = ) S
(null) k
(;) p n
(80) # () S 4 T () S 8 T (ready = ) S
(false) k
(;) p n
(81) # () N
(82) # () S 4 T () S 8 T (logger = LoggerFactory.getParentLogger\(getClass\(\),) N
(InputClient.java) (Page 1/3) (janv. 06, 15 18:04) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S 8 T (                                       parentLogger,) N
(84) # () S 4 T () S 8 T (                                       parentLogger.getLevel\(\)\);) N
(85) # () N
(86) # () S 4 T () S 8 T () S
(if) K
( \(socket ) p
(\271) sy
( ) p
(null) k
(\)) p n
(87) # () S 4 T () S 8 T ({) N
(88) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(InputClient: Creating Input Stream ... ) str
("\);) p n
(89) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(90) # () S
() p 4 T () S 8 T () S 12 T ({) N
(91) # () S 4 T () S 8 T () S 12 T () S 16 T (inBR = ) S
(new) K
( BufferedReader\() p
(new) K
( InputStreamReader\() p n
(92) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (socket.getInputStream\(\)\)\);) N
(93) # () S 4 T () S 8 T () S 12 T () S 16 T (ready = ) S
(true) k
(;) p n
(94) # () S 4 T () S 8 T () S 12 T (}) N
(95) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(IOException e\)) p n
(96) # () S 4 T () S 8 T () S 12 T ({) N
(97) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(") S
(InputClient: unable to get client socket input stream) str
("\);) p n
(98) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(99) # () S 4 T () S 8 T () S 12 T (}) N
(100) # () S 4 T () S 8 T (}) N
(101) # () S 4 T (}) N
(102) # () N
(103) # () S 4 T () S
(/**) C n
(104) # () S 4 T ( * Accesseur en lecture du nom du client) N
(105) # () S 4 T ( *) N
(106) # () S 4 T ( * @return the name) N
(107) # () S 4 T ( * @uml.property name="name") N
(108) # () S 4 T ( */) N
(109) # () S
() p 4 T () S
(public) K
( String getName\(\)) p n
(110) # () S 4 T ({) N
(111) # () S 4 T () S 8 T () S
(return) K
( name;) p n
(112) # () S 4 T (}) N
(113) # () N
(114) # () S 4 T () S
(/**) C n
(115) # () S 4 T ( * Accesseur en lecture du flux d'entr\303\251e du client) N
(116) # () S 4 T ( *) N
(117) # () S 4 T ( * @return the input {@link BufferedReader}) N
(118) # () S 4 T ( */) N
(119) # () S
() p 4 T () S
(public) K
( BufferedReader getIn\(\)) p n
(120) # () S 4 T ({) N
(121) # () S 4 T () S 8 T () S
(return) K
( inBR;) p n
(122) # () S 4 T (}) N
(123) # () N
(124) # () S 4 T () S
(/**) C n
(125) # () S 4 T ( * Accesseur en lecture de l'\303\251tat du client) N
(126) # () S 4 T ( *) N
(127) # () S 4 T ( * @return the ready) N
(128) # () S 4 T ( * @uml.property name="ready") N
(129) # () S 4 T ( */) N
(130) # () S
() p 4 T () S
(public) K
( ) p
(boolean) k
( isReady\(\)) p n
(131) # () S 4 T ({) N
(132) # () S 4 T () S 8 T () S
(return) K
( ready;) p n
(133) # () S 4 T (}) N
(134) # () N
(135) # () S 4 T () S
(/**) C n
(136) # () S 4 T ( * Accesseur en lecture de l'\303\251tat de banissement) N
(137) # () S 4 T ( *) N
(138) # () S 4 T ( * @return l'\303\251tat de banissement) N
(139) # () S 4 T ( * @uml.property name="banned") N
(140) # () S 4 T ( */) N
(141) # () S
() p 4 T () S
(public) K
( ) p
(boolean) k
( isBanned\(\)) p n
(142) # () S 4 T ({) N
(143) # () S 4 T () S 8 T () S
(return) K
( banned;) p n
(144) # () S 4 T (}) N
(145) # () N
(146) # () S 4 T () S
(/**) C n
(147) # () S 4 T ( * Accesseur en \303\251criture de l'\303\251tat de banissement) N
(148) # () S 4 T ( *) N
(149) # () S 4 T ( * @param l'\303\251tat de banissement \303\240 mettre en place) N
(150) # () S 4 T ( * @uml.property name="banned") N
(151) # () S 4 T ( */) N
(152) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( setBanned\() p
(boolean) k
( banned\)) p n
(153) # () S 4 T ({) N
(154) # () S 4 T () S 8 T (this.banned = banned;) N
(155) # () S 4 T (}) N
(156) # () N
(157) # () S 4 T () S
(/**) C n
(158) # () S 4 T ( * Nettoyage d'un client principal : fermeture du flux d'entr\303\251e et fermeture) N
(159) # () S 4 T ( * de sa socket.) N
(160) # () S 4 T ( */) N
(161) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( cleanup\(\)) p n
(162) # () S 4 T ({) N
(163) # () S 4 T () S 8 T (ready = ) S
(false) k
(;) p n
(164) # () S 4 T () S 8 T (logger.info\(") S
(MainClient::cleanup: closing input stream ... ) str
("\);) p n
(InputClient.java) (Page 2/3) (janv. 06, 15 18:04) title
border
grestore
(Printed by Pierre) rhead
(src/chat/server/InputClient.java) (20/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3,1) 21
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T () S
(try) K n
(166) # () S
() p 4 T () S 8 T ({) N
(167) # () S 4 T () S 8 T () S 12 T (inBR.close\(\);) N
(168) # () S 4 T () S 8 T (}) N
(169) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(170) # () S 4 T () S 8 T ({) N
(171) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(MainClient::cleanup: unable to close input stream) str
("\);) p n
(172) # () S 4 T () S 8 T () S 12 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(173) # () S 4 T () S 8 T (}) N
(174) # () N
(175) # () S 4 T () S 8 T (logger.info\(") S
(MainClient::cleanup: closing client socket ... ) str
("\);) p n
(176) # () S 4 T () S 8 T () S
(try) K n
(177) # () S
() p 4 T () S 8 T ({) N
(178) # () S 4 T () S 8 T () S 12 T (clientSocket.close\(\);) N
(179) # () S 4 T () S 8 T (}) N
(180) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(181) # () S 4 T () S 8 T ({) N
(182) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(MainClient::cleanup: unable to close client socket) str
("\);) p n
(183) # () S 4 T () S 8 T () S 12 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(184) # () S 4 T () S 8 T (}) N
(185) # () S 4 T (}) N
(186) # (}) N
(InputClient.java) (Page 3/3) (janv. 06, 15 18:04) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat.server;) p n
(2) # () S
(import) K
( java.io.IOException;) p n
(3) # () S
(import) K
( java.io.ObjectOutputStream;) p n
(4) # () S
(import) K
( java.net.Socket;) p n
(5) # () S
(import) K
( java.util.logging.Logger;) p n
(6) # () N
(7) # () S
(import) K
( chat.Failure;) p n
(8) # () N
(9) # () N
(10) # () S
(/**) C n
(11) # ( * Classe stockant les caract\303\251ristiques d'un client :) N
(12) # ( * voir {@link InputClient}.) N
(13) # ( * Un client "normal" ajoute aussi le flux de sortie sur lequel on \303\251crit les) N
(14) # ( * messages vers le client) N
(15) # ( * <ul>) N
(16) # ( * ) S 4 T (<li>out : {@link ObjectOutputStream}</li>) N
(17) # ( * </ul>) N
(18) # ( * @author davidroussel) N
(19) # ( *) N
(20) # ( */) N
(21) # () S
(public) K
( ) p
(class) K
( ) p
(InputOutputClient) L
( ) p
(extends) K
( InputClient) p n
(22) # ({) N
(23) # () S 4 T () S
(/**) C n
(24) # () S 4 T ( * Le flux de sortie vers le client \(celui sur lequel on \303\251crit au client\)) N
(25) # () S 4 T ( */) N
(26) # () S
() p 4 T () S
(private) K
( ObjectOutputStream outOS;) p n
(27) # () N
(28) # () S 4 T () S
(/**) C n
(29) # () S 4 T ( * Constructeur d'un client) N
(30) # () S 4 T ( * @param socket la socket du client) N
(31) # () S 4 T ( * @param name le nom du client) N
(32) # () S 4 T ( * @param verbose niveau de debug pour les messages) N
(33) # () S 4 T ( * @param parentLogger logger parent pour l'affichage des messages) N
(34) # () S 4 T ( */) N
(35) # () S
() p 4 T () S
(public) K
( InputOutputClient\(Socket socket, String name, Logger parentLogger\)) p n
(36) # () S 4 T ({) N
(37) # () S 4 T () S 8 T () S
(super) K
(\(socket, name, parentLogger\);) p n
(38) # () S 4 T () S 8 T () S
(if) K
( \(ready\)) p n
(39) # () S 4 T () S 8 T ({) N
(40) # () S 4 T () S 8 T () S 12 T (outOS = ) S
(null) k
(;) p n
(41) # () S 4 T () S 8 T () S 12 T (ready = ) S
(false) k
(;) p n
(42) # () N
(43) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(clientSocket ) p
(\271) sy
( ) p
(null) k
(\)) p n
(44) # () S 4 T () S 8 T () S 12 T ({) N
(45) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.info\(") S
(Client: Creating Output Stream ... ) str
("\);) p n
(46) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(try) K n
(47) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(48) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (outOS = ) S
(new) K
( ObjectOutputStream\(clientSocket.getOutputStream\(\)\);) p n
(49) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (ready = ) S
(true) k
(;) p n
(50) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(51) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(catch) K
( \(IOException e\)) p n
(52) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(53) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.severe\(") S
(Client: unable to get client output stream) str
("\);) p n
(54) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(55) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(56) # () S 4 T () S 8 T () S 12 T (}) N
(57) # () S 4 T () S 8 T (}) N
(58) # () S 4 T () S 8 T () S
(else) K n
(59) # () S
() p 4 T () S 8 T ({) N
(60) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(Client: ) str
(" + Failure.CLIENT_NOT_READY + ") p
(, abort...) str
("\);) p n
(61) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.CLIENT_NOT_READY.toInteger\(\)\);) N
(62) # () S 4 T () S 8 T (}) N
(63) # () S 4 T (}) N
(64) # () N
(65) # () S 4 T () S
(/**) C n
(66) # () S 4 T ( * Accesseur en lecture du flux de sortie d'un client) N
(67) # () S 4 T ( * @return the out) N
(68) # () S 4 T ( */) N
(69) # () S
() p 4 T () S
(public) K
( ObjectOutputStream getOut\(\)) p n
(70) # () S 4 T ({) N
(71) # () S 4 T () S 8 T () S
(return) K
( outOS;) p n
(72) # () S 4 T (}) N
(73) # () N
(74) # () S 4 T () S
(/**) C n
(75) # () S 4 T ( * Nettoyage d'un client : fermeture du flux de sortie et super.cleanup\(\)) N
(76) # () S 4 T ( */) N
(77) # () S
() p 4 T (@Override) N
(78) # () S 4 T () S
(public) K
( ) p
(void) k
( cleanup\(\)) p n
(79) # () S 4 T ({) N
(80) # () S 4 T () S 8 T (logger.info\(") S
(Client::cleanup: closing output stream ... ) str
("\);) p n
(81) # () S 4 T () S 8 T () S
(try) K n
(82) # () S
() p 4 T () S 8 T ({) N
(InputOutputClient.java) (Page 1/2) (avril 11, 16 15:38) title
border
grestore
(Printed by Pierre) rhead
(src/chat/server/InputClient.java, src/chat/server/InputOutputClient.java) (21/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2,1) 22
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S 8 T () S 12 T (outOS.close\(\);) N
(84) # () S 4 T () S 8 T (}) N
(85) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(86) # () S 4 T () S 8 T ({) N
(87) # () S 4 T () S 8 T () S 12 T (logger.severe\(") S
(Client: unable to close client output stream) str
("\);) p n
(88) # () S 4 T () S 8 T () S 12 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(89) # () S 4 T () S 8 T (}) N
(90) # () S 4 T () S 8 T (super.cleanup\(\);) N
(91) # () S 4 T (}) N
(92) # (}) N
(InputOutputClient.java) (Page 2/2) (avril 11, 16 15:38) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat.server;) p n
(2) # () N
(3) # () S
(/**) C n
(4) # ( * Sous-package contenant les classes relatives \303\240 la partie serveur du) N
(5) # ( * client/serveur de chat) N
(6) # ( */) N
(package-info.java) (Page 1/1) (nov. 17, 14 17:44) title
border
grestore
(Printed by Pierre) rhead
(src/chat/server/InputOutputClient.java, src/chat/server/package-info.java) (22/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 23
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat;) p n
(2) # () N
(3) # () S
(/**) C n
(4) # ( * Les diff\303\251rents types de de donn\303\251es attendues dans le flux de sortie) N
(5) # ( * vers le client pour afficher les message en provenance du serveur.) N
(6) # ( */) N
(7) # () S
(public) K
( enum UserOutputType) p n
(8) # ({) N
(9) # () S 4 T () S
(/**) C n
(10) # () S 4 T ( * Le client attends des donn\303\251es sous forme texte) N
(11) # () S 4 T ( */) N
(12) # () S
() p 4 T (TEXT,) N
(13) # () S 4 T () S
(/**) C n
(14) # () S 4 T ( * Le client attends des donn\303\251es sous forme d'objets \(en l'occurrence) N
(15) # () S 4 T ( * des Message ou des UserMessage\)) N
(16) # () S 4 T ( */) N
(17) # () S
() p 4 T (OBJECT;) N
(18) # () N
(19) # () S 4 T () S
(/**) C n
(20) # () S 4 T ( * Affichage sous forme de texte des erreurs possibles) N
(21) # () S 4 T ( */) N
(22) # () S
() p 4 T (@Override) N
(23) # () S 4 T () S
(public) K
( String toString\(\)) p n
(24) # () S 4 T ({) N
(25) # () S 4 T () S 8 T () S
(switch) K
( \() p
(this) k
(\)) p n
(26) # () S 4 T () S 8 T ({) N
(27) # () S 4 T () S 8 T () S 12 T () S
(case) K
( TEXT:) p n
(28) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Text output type) str
("\);) p n
(29) # () S 4 T () S 8 T () S 12 T () S
(case) K
( OBJECT:) p n
(30) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(") p
(Object output type) str
("\);) p n
(31) # () S 4 T () S 8 T (}) N
(32) # () S 4 T () S 8 T () S
(throw) K
( ) p
(new) K
( AssertionError\(") p
(UserOutputType: unknown type: ) str
(" + ) p
(this) k
(\);) p n
(33) # () S 4 T (}) N
(34) # () N
(35) # () S 4 T () S
(/**) C n
(36) # () S 4 T ( * Conversion en entier du type sortie vers l'utilisateur) N
(37) # () S 4 T ( *) N
(38) # () S 4 T ( * @return le num\303\251ro correspondant au type de sortie vers l'utilisateur) N
(39) # () S 4 T ( * <ul>) N
(40) # () S 4 T ( * ) S 8 T (<li>TEXT = 1</li>) N
(41) # () S 4 T ( * ) S 8 T (<li>OBJECT = 2</li>) N
(42) # () S 4 T ( * </ul>) N
(43) # () S 4 T ( */) N
(44) # () S
() p 4 T () S
(public) K
( ) p
(int) k
( toInteger\(\)) p n
(45) # () S 4 T ({) N
(46) # () S 4 T () S 8 T () S
(return) K
( ordinal\(\) + 1;) p n
(47) # () S 4 T (}) N
(48) # () N
(49) # () S 4 T () S
(public) K
( ) p
(static) K
( UserOutputType fromInteger\() p
(int) k
( value\)) p n
(50) # () S 4 T ({) N
(51) # () S 4 T () S 8 T () S
(int) k
( controlValue;) p n
(52) # () S 4 T () S 8 T () S
(if) K
( \(value < 1\)) p n
(53) # () S 4 T () S 8 T ({) N
(54) # () S 4 T () S 8 T () S 12 T (controlValue = 1;) N
(55) # () S 4 T () S 8 T (}) N
(56) # () S 4 T () S 8 T () S
(else) K
( ) p
(if) K
( \(value > 2\)) p n
(57) # () S 4 T () S 8 T ({) N
(58) # () S 4 T () S 8 T () S 12 T (controlValue = 2;) N
(59) # () S 4 T () S 8 T (}) N
(60) # () S 4 T () S 8 T () S
(else) K n
(61) # () S
() p 4 T () S 8 T ({) N
(62) # () S 4 T () S 8 T () S 12 T (controlValue = value;) N
(63) # () S 4 T () S 8 T (}) N
(64) # () S 4 T () S 8 T () S
(switch) K
( \(controlValue\)) p n
(65) # () S 4 T () S 8 T ({) N
(66) # () S 4 T () S 8 T () S 12 T () S
(default) K
(:) p n
(67) # () S 4 T () S 8 T () S 12 T () S
(case) K
( 1:) p n
(68) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( TEXT;) p n
(69) # () S 4 T () S 8 T () S 12 T () S
(case) K
( 2:) p n
(70) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( OBJECT;) p n
(71) # () S 4 T () S 8 T (}) N
(72) # () S 4 T (}) N
(73) # () N
(74) # (}) N
(UserOutputType.java) (Page 1/1) (avril 10, 16 19:39) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( chat;) p n
(2) # () S
(/**) C n
(3) # ( * Interface contenant le vocabulaire sp\303\251cial utilis\303\251 dans le serveur de chat) N
(4) # ( * @author davidroussel) N
(5) # ( */) N
(6) # () S
(public) K
( ) p
(interface) K
( ) p
(Vocabulary) L n
(7) # () S
({) p n
(8) # () S 4 T () S
(/**) C n
(9) # () S 4 T ( * Mot cl\303\251 utilis\303\251 par un client pour se d\303\251loguer du serveur) N
(10) # () S 4 T ( */) N
(11) # () S
() p 4 T () S
(public) K
( ) p
(final) K
( ) p
(static) K
( String byeCmd=") p
(bye) str
(";) p n
(12) # () N
(13) # () S 4 T () S
(/**) C n
(14) # () S 4 T ( * Mot cl\303\251 utilis\303\251 par un super user pour terminer le serveur) N
(15) # () S 4 T ( */) N
(16) # () S
() p 4 T () S
(public) K
( ) p
(final) K
( ) p
(static) K
( String killCmd=") p
(kill) str
(";) p n
(17) # () N
(18) # () S 4 T () S
(/**) C n
(19) # () S 4 T ( * Mot cl\303\251 sp\303\251cial utilis\303\251 par un super user pour d\303\251loguer de force un) N
(20) # () S 4 T ( * client : kick <username>) N
(21) # () S 4 T ( */) N
(22) # () S
() p 4 T () S
(public) K
( ) p
(final) K
( ) p
(static) K
( String kickCmd=") p
(kick) str
(";) p n
(23) # () N
(24) # () S 4 T () S
(/**) C n
(25) # () S 4 T ( * Sauts de ligne du syst\303\250me d'exploitation \(utilis\303\251 dans le texte\)) N
(26) # () S 4 T ( */) N
(27) # () S
() p 4 T () S
(public) K
( ) p
(final) K
( ) p
(static) K
( String newLine = System.getProperty\(") p
(line.separator) str
("\);) p n
(28) # () N
(29) # () S 4 T () S
(/**) C n
(30) # () S 4 T ( * Un tableau contenant l'ensemble des commandes du serveur afin de pouvoir) N
(31) # () S 4 T ( * le parcourir) N
(32) # () S 4 T ( */) N
(33) # () S
() p 4 T () S
(public) K
( ) p
(final) K
( ) p
(static) K
( String[] commands = {byeCmd, kickCmd, killCmd};) p n
(34) # () N
(35) # (}) N
(Vocabulary.java) (Page 1/1) (avril 13, 16 17:50) title
border
grestore
(Printed by Pierre) rhead
(src/chat/UserOutputType.java, src/chat/Vocabulary.java) (23/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 24
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/**) C n
(2) # ( * Package contenant des exemples de) N
(3) # ( * <ul>) N
(4) # ( * ) S 4 T (<li>{@link JFrame} illustrant une fen\303\252tre et son contenu \(et en particuluer) N
(5) # ( * ) S 4 T (lorsqu'un container contient un {@link JScrollPane} qui lui m\303\252me contient) N
(6) # ( * ) S 4 T (un {@link JTextPane} qui lui m\303\252me contient un {@link StyledDocument} dans) N
(7) # ( * ) S 4 T (lequel on peut ajouter du texte riche.</li>) N
(8) # ( * ) S 4 T (<li>{@link Runnable}</li>) N
(9) # ( * </ul>) N
(10) # ( * @author davidroussel) N
(11) # ( */) N
(12) # () S
(package) K
( examples;) p
(package-info.java) (Page 1/1) (d\303\251c. 22, 14 15:32) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( examples;) p n
(2) # () S
(import) K
( java.awt.EventQueue;) p n
(3) # () N
(4) # () S
(import) K
( examples.widgets.ExampleFrame;) p n
(5) # () N
(6) # () N
(7) # () S
(/**) C n
(8) # ( * Programme principal lan\303\247ant une {@link ExampleFrame}) N
(9) # ( * @author davidroussel) N
(10) # ( *) N
(11) # ( */) N
(12) # () S
(public) K
( ) p
(class) K
( ) p
(RunExampleFrame) L n
(13) # () S
({) p n
(14) # () S 4 T () S
(/**) C n
(15) # () S 4 T ( * Programme principal) N
(16) # () S 4 T ( * @param args) N
(17) # () S 4 T ( */) N
(18) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(19) # () S 4 T ({) N
(20) # () S 4 T () S 8 T () S
(if) K
( \(System.getProperty\(") p
(os.name) str
("\).startsWith\(") p
(Mac OS) str
("\)\)) p n
(21) # () S 4 T () S 8 T ({) N
(22) # () S 4 T () S 8 T () S 12 T () S
(// Met en place le menu en haut de l'\303\251cran plut\303\264t que dans l'application) c n
(23) # () S
() p 4 T () S 8 T () S 12 T (System.setProperty\(") S
(apple.laf.useScreenMenuBar) str
(", ") p
(true) str
("\);) p n
(24) # () S 4 T (        System.setProperty\(") S
(com.apple.mrj.application.apple.menu.about.name) str
(", ") p
(Name) str
("\);) p n
(25) # () S 4 T () S 8 T (}) N
(26) # () N
(27) # () S 4 T () S 8 T () S
(// Insertion de la frame dans la file des \303\251v\303\250nements GUI) c n
(28) # () S
() p 4 T () S 8 T (EventQueue.invokeLater\() S
(new) K
( Runnable\(\)) p n
(29) # () S 4 T () S 8 T ({) N
(30) # () S 4 T () S 8 T () S 12 T (@Override) N
(31) # () S 4 T () S 8 T () S 12 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(32) # () S 4 T () S 8 T () S 12 T ({) N
(33) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(try) K n
(34) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(35) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (ExampleFrame frame = ) S
(new) K
( ExampleFrame\(\);) p n
(36) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (frame.pack\(\);) N
(37) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (frame.setVisible\() S
(true) k
(\);) p n
(38) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(39) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(catch) K
( \(Exception e\)) p n
(40) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(41) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (e.printStackTrace\(\);) N
(42) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(43) # () S 4 T () S 8 T () S 12 T (}) N
(44) # () S 4 T () S 8 T (}\);) N
(45) # () S 4 T (}) N
(46) # (}) N
(RunExampleFrame.java) (Page 1/1) (d\303\251c. 23, 14 3:01) title
border
grestore
(Printed by Pierre) rhead
(src/examples/package-info.java, src/examples/RunExampleFrame.java) (24/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 25
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( examples;) p n
(2) # () S
(import) K
( java.awt.EventQueue;) p n
(3) # () N
(4) # () S
(import) K
( javax.swing.JFrame;) p n
(5) # () N
(6) # () S
(import) K
( examples.widgets.ExampleFrame;) p n
(7) # () S
(import) K
( examples.widgets.ListExampleFrame;) p n
(8) # () N
(9) # () N
(10) # () S
(/**) C n
(11) # ( * Programme principal lan\303\247ant une {@link ExampleFrame}) N
(12) # ( * @author davidroussel) N
(13) # ( *) N
(14) # ( */) N
(15) # () S
(public) K
( ) p
(class) K
( ) p
(RunListFrame) L n
(16) # () S
({) p n
(17) # () S 4 T () S
(/**) C n
(18) # () S 4 T ( * Programme principal) N
(19) # () S 4 T ( * @param args) N
(20) # () S 4 T ( */) N
(21) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(22) # () S 4 T ({) N
(23) # () S 4 T () S 8 T () S
(if) K
( \(System.getProperty\(") p
(os.name) str
("\).startsWith\(") p
(Mac OS) str
("\)\)) p n
(24) # () S 4 T () S 8 T ({) N
(25) # () S 4 T () S 8 T () S 12 T () S
(// Met en place le menu en haut de l'\303\251cran plut\303\264t que dans l'application) c n
(26) # () S
() p 4 T () S 8 T () S 12 T (System.setProperty\(") S
(apple.laf.useScreenMenuBar) str
(", ") p
(true) str
("\);) p n
(27) # () S 4 T (        System.setProperty\(") S
(com.apple.mrj.application.apple.menu.about.name) str
(", ") p
(Name) str
("\);) p n
(28) # () S 4 T () S 8 T (}) N
(29) # () N
(30) # () S 4 T () S 8 T () S
(// Insertion de la frame dans la file des \303\251v\303\250nements GUI) c n
(31) # () S
() p 4 T () S 8 T (EventQueue.invokeLater\() S
(new) K
( Runnable\(\)) p n
(32) # () S 4 T () S 8 T ({) N
(33) # () S 4 T () S 8 T () S 12 T (@Override) N
(34) # () S 4 T () S 8 T () S 12 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(35) # () S 4 T () S 8 T () S 12 T ({) N
(36) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(try) K n
(37) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(38) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (JFrame frame = ) S
(new) K
( ListExampleFrame\(\);) p n
(39) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (frame.pack\(\);) N
(40) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (frame.setVisible\() S
(true) k
(\);) p n
(41) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(42) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(catch) K
( \(Exception e\)) p n
(43) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(44) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (e.printStackTrace\(\);) N
(45) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(46) # () S 4 T () S 8 T () S 12 T (}) N
(47) # () S 4 T () S 8 T (}\);) N
(48) # () S 4 T (}) N
(49) # (}) N
(RunListFrame.java) (Page 1/1) (avril 12, 16 18:07) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( examples;) p n
(2) # () S
(import) K
( java.util.ArrayList;) p n
(3) # () S
(import) K
( java.util.Collection;) p n
(4) # () N
(5) # () S
(/**) C n
(6) # ( * Exemple de classe impl\303\251mentant un Runnable et lanc\303\251 dans un Thread) N
(7) # ( *) N
(8) # ( * @author davidroussel) N
(9) # ( */) N
(10) # () S
(public) K
( ) p
(class) K
( ) p
(RunnableExample) L n
(11) # () S
({) p n
(12) # () S 4 T () S
(/**) C n
(13) # () S 4 T ( * Classe interne repr\303\251sentant un simple compteur \303\240 ex\303\251cuter dans un thread.) N
(14) # () S 4 T ( * Le compteur compte de 0 \303\240 une valeur max. Lorsque le compteur atteint la) N
(15) # () S 4 T ( * valeur max le compteur s'arr\303\252te.) N
(16) # () S 4 T ( * @author davidroussel) N
(17) # () S 4 T ( */) N
(18) # () S
() p 4 T () S
(protected) K
( ) p
(static) K
( ) p
(class) K
( ) p
(Counter) L
( ) p
(implements) K
( Runnable) p n
(19) # () S 4 T ({) N
(20) # () S 4 T () S 8 T () S
(/**) C n
(21) # () S 4 T () S 8 T ( * Nombre de compteurs instanci\303\251s) N
(22) # () S 4 T () S 8 T ( */) N
(23) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(static) K
( ) p
(int) k
( CounterNumber = 0;) p n
(24) # () N
(25) # () S 4 T () S 8 T () S
(/**) C n
(26) # () S 4 T () S 8 T ( * Le num\303\251ro de compteur) N
(27) # () S 4 T () S 8 T ( */) N
(28) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(int) k
( number;) p n
(29) # () S 4 T () S 8 T () S
(/**) C n
(30) # () S 4 T () S 8 T ( * Le compteur proprement dit) N
(31) # () S 4 T () S 8 T ( */) N
(32) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(int) k
( count;) p n
(33) # () N
(34) # () S 4 T () S 8 T () S
(/**) C n
(35) # () S 4 T () S 8 T ( * La valeur max du compteur) N
(36) # () S 4 T () S 8 T ( */) N
(37) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(int) k
( max;) p n
(38) # () N
(39) # () S 4 T () S 8 T () S
(/**) C n
(40) # () S 4 T () S 8 T ( * Constructeur valu\303\251 du compteur) N
(41) # () S 4 T () S 8 T ( * @param max la valeur max du compteur \303\240 laquelle il s'arr\303\252te) N
(42) # () S 4 T () S 8 T ( */) N
(43) # () S
() p 4 T () S 8 T () S
(public) K
( Counter\() p
(int) k
( max\)) p n
(44) # () S 4 T () S 8 T ({) N
(45) # () S 4 T () S 8 T () S 12 T (number = ++CounterNumber;) N
(46) # () S 4 T () S 8 T () S 12 T (count = 0;) N
(47) # () S 4 T () S 8 T () S 12 T (this.max = max;) N
(48) # () S 4 T () S 8 T (}) N
(49) # () N
(50) # () N
(51) # () S 4 T () S 8 T () S
(/* \(non-Javadoc\)) c n
(52) # () S 4 T () S 8 T ( * @see java.lang.Object#finalize\(\)) N
(53) # () S 4 T () S 8 T ( */) N
(54) # () S
() p 4 T () S 8 T (@Override) N
(55) # () S 4 T () S 8 T () S
(protected) K
( ) p
(void) k
( finalize\(\) ) p
(throws) K
( Throwable) p n
(56) # () S 4 T () S 8 T ({) N
(57) # () S 4 T () S 8 T () S 12 T (CounterNumber--;) N
(58) # () S 4 T () S 8 T (}) N
(59) # () N
(60) # () S 4 T () S 8 T () S
(/**) C n
(61) # () S 4 T () S 8 T ( * Boucle d'\303\251x\303\251cution principale du compteur : Tant que le compteur n'a) N
(62) # () S 4 T () S 8 T ( * pas atteint la valeur max le compteur incr\303\251mente son compteur de 1,) N
(63) # () S 4 T () S 8 T ( * affiche la valeur courante du compteur puis on demande au thread) N
(64) # () S 4 T () S 8 T ( * dans lequel il tourne de passer la main \303\240 un autre thread \(en) N
(65) # () S 4 T () S 8 T ( * esp\303\251rant que ceux ci nous repassent la main un jour afin que l'on) N
(66) # () S 4 T () S 8 T ( * puisse continuer \303\240 compter\).) N
(67) # () S 4 T () S 8 T ( */) N
(68) # () S
() p 4 T () S 8 T (@Override) N
(69) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(70) # () S 4 T () S 8 T ({) N
(71) # () S 4 T () S 8 T () S 12 T () S
(while) K
( \(count < max\)) p n
(72) # () S 4 T () S 8 T () S 12 T ({) N
(73) # () S 4 T () S 8 T () S 12 T () S 16 T (count++;) N
(74) # () N
(75) # () S 4 T () S 8 T () S 12 T () S 16 T (System.out.println\() S
(this) k
(\); ) p
(// utilisation du toString) c n
(76) # () N
(77) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// passe la main \303\240 d'autres threads \(si besoin\)) c n
(78) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (Thread.yield\(\);) N
(79) # () S 4 T () S 8 T () S 12 T (}) N
(80) # () S 4 T () S 8 T (}) N
(81) # () N
(82) # () S 4 T () S 8 T () S
(/* \(non-Javadoc\)) c n
(RunnableExample.java) (Page 1/3) (d\303\251c. 22, 14 17:16) title
border
grestore
(Printed by Pierre) rhead
(src/examples/RunListFrame.java, src/examples/RunnableExample.java) (25/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 26
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () c 4 T () S 8 T ( * @see java.lang.Object#toString\(\)) N
(84) # () S 4 T () S 8 T ( */) N
(85) # () S
() p 4 T () S 8 T (@Override) N
(86) # () S 4 T () S 8 T () S
(public) K
( String toString\(\)) p n
(87) # () S 4 T () S 8 T ({) N
(88) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(new) K
( String\(") p
(Counter #) str
(" + number + ") p
( = ) str
(" + count\);) p n
(89) # () S 4 T () S 8 T (}) N
(90) # () S 4 T (}) N
(91) # () N
(92) # () S 4 T () S
(/**) C n
(93) # () S 4 T ( * Collection de compteurs Runnable \303\240 lancer) N
(94) # () S 4 T ( */) N
(95) # () S
() p 4 T () S
(protected) K
( Collection<Counter> counters;) p n
(96) # () N
(97) # () S 4 T () S
(/**) C n
(98) # () S 4 T ( * Collection de threads dans lesquels on va vaire tourner les Counter.) N
(99) # () S 4 T ( */) N
(100) # () S
() p 4 T () S
(protected) K
( Collection<Thread> threads;) p n
(101) # () N
(102) # () S 4 T () S
(/**) C n
(103) # () S 4 T ( * Constructeur d'un RunnableExample.) N
(104) # () S 4 T ( * Cr\303\251e un certain nombre de compteur \(Runnable\), puis cr\303\251e le m\303\252me nombre) N
(105) # () S 4 T ( * de threads dans lesquels on place ces compteurs) N
(106) # () S 4 T ( */) N
(107) # () S
() p 4 T () S
(public) K
( RunnableExample\() p
(int) k
( nbCounters\)) p n
(108) # () S 4 T ({) N
(109) # () S 4 T () S 8 T (counters = ) S
(new) K
( ArrayList<Counter>\(nbCounters\);) p n
(110) # () S 4 T () S 8 T (threads = ) S
(new) K
( ArrayList<Thread>\(nbCounters\);) p n
(111) # () N
(112) # () S 4 T () S 8 T () S
(for) K
( \() p
(int) k
( i = 0; i < nbCounters; i++\)) p n
(113) # () S 4 T () S 8 T ({) N
(114) # () S 4 T () S 8 T () S 12 T (Counter c = ) S
(new) K
( Counter\(10\);) p n
(115) # () S 4 T () S 8 T () S 12 T (counters.add\(c\);) N
(116) # () N
(117) # () S 4 T () S 8 T () S 12 T (Thread t = ) S
(new) K
( Thread\(c\);) p n
(118) # () S 4 T () S 8 T () S 12 T (threads.add\(t\);) N
(119) # () S 4 T () S 8 T (}) N
(120) # () S 4 T (}) N
(121) # () N
(122) # () S 4 T () S
(/**) C n
(123) # () S 4 T ( * Lancement de tous les threads \(contenant les compteurs\)) N
(124) # () S 4 T ( */) N
(125) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( launch\(\)) p n
(126) # () S 4 T ({) N
(127) # () S 4 T () S 8 T () S
(for) K
( \(Thread t : threads\)) p n
(128) # () S 4 T () S 8 T ({) N
(129) # () S 4 T () S 8 T () S 12 T (t.start\(\);) N
(130) # () S 4 T () S 8 T (}) N
(131) # () S 4 T (}) N
(132) # () N
(133) # () S 4 T () S
(/**) C n
(134) # () S 4 T ( * attente de la fin de tous les threads pour terminer le thread principal) N
(135) # () S 4 T ( */) N
(136) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( terminate\(\)) p n
(137) # () S 4 T ({) N
(138) # () S 4 T () S 8 T () S
(for) K
( \(Thread t : threads\)) p n
(139) # () S 4 T () S 8 T ({) N
(140) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(141) # () S
() p 4 T () S 8 T () S 12 T ({) N
(142) # () S 4 T () S 8 T () S 12 T () S 16 T (t.join\(\);) N
(143) # () S 4 T () S 8 T () S 12 T (}) N
(144) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(InterruptedException e\)) p n
(145) # () S 4 T () S 8 T () S 12 T ({) N
(146) # () S 4 T () S 8 T () S 12 T () S 16 T (System.err.println\(") S
(Thread) str
(" + t + ") p
( join interrupted) str
("\);) p n
(147) # () S 4 T () S 8 T () S 12 T () S 16 T (e.printStackTrace\(\);) N
(148) # () S 4 T () S 8 T () S 12 T (}) N
(149) # () S 4 T () S 8 T (}) N
(150) # () N
(151) # () S 4 T () S 8 T (System.out.println\(") S
(All threads terminated) str
("\);) p n
(152) # () S 4 T (}) N
(153) # () N
(154) # () S 4 T () S
(/**) C n
(155) # () S 4 T ( * Programme principal.) N
(156) # () S 4 T ( * Lancement de plusieurs Counters) N
(157) # () S 4 T ( *) N
(158) # () S 4 T ( * @param args arguments du programme pour y lire le nombre de compteurs \303\240) N
(159) # () S 4 T ( * lancer) N
(160) # () S 4 T ( */) N
(161) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(162) # () S 4 T ({) N
(163) # () S 4 T () S 8 T () S
(int) k
( nbCounters = 3;) p n
(164) # () S 4 T () S 8 T () S
(// on lit le nombre de counters dans le premier argument du programme) c n
(RunnableExample.java) (Page 2/3) (d\303\251c. 22, 14 17:16) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T () S
(if) K
( \(args.length > 0\)) p n
(166) # () S 4 T () S 8 T ({) N
(167) # () S 4 T () S 8 T () S 12 T () S
(int) k
( value;) p n
(168) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(169) # () S
() p 4 T () S 8 T () S 12 T ({) N
(170) # () S 4 T () S 8 T () S 12 T () S 16 T (value = Integer.parseInt\(args[0]\);) N
(171) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(value > 0\)) p n
(172) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(173) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (nbCounters = value;) N
(174) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(175) # () S 4 T () S 8 T () S 12 T (}) N
(176) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(NumberFormatException nfe\)) p n
(177) # () S 4 T () S 8 T () S 12 T ({) N
(178) # () S 4 T () S 8 T () S 12 T () S 16 T (System.err.println\(") S
(Error reading number of counters) str
("\);) p n
(179) # () S 4 T () S 8 T () S 12 T (}) N
(180) # () S 4 T () S 8 T (}) N
(181) # () N
(182) # () S 4 T () S 8 T (RunnableExample runner = ) S
(new) K
( RunnableExample\(nbCounters\);) p n
(183) # () N
(184) # () S 4 T () S 8 T (runner.launch\(\);) N
(185) # () N
(186) # () S 4 T () S 8 T (System.out.println\(") S
(All threads launched) str
("\);) p n
(187) # () N
(188) # () S 4 T () S 8 T (runner.terminate\(\);) N
(189) # () S 4 T (}) N
(190) # (}) N
(RunnableExample.java) (Page 3/3) (d\303\251c. 22, 14 17:16) title
border
grestore
(Printed by Pierre) rhead
(src/examples/RunnableExample.java) (26/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 27
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( examples;) p n
(2) # () S
(import) K
( java.util.ArrayList;) p n
(3) # () S
(import) K
( java.util.Collection;) p n
(4) # () N
(5) # () S
(/**) C n
(6) # ( * Exemple de classe impl\303\251mentant un Runnable et lanc\303\251 dans un Thread) N
(7) # ( *) N
(8) # ( * @author davidroussel) N
(9) # ( */) N
(10) # () S
(public) K
( ) p
(class) K
( ) p
(RunRunnableExample) L n
(11) # () S
({) p n
(12) # () S 4 T () S
(/**) C n
(13) # () S 4 T ( * Classe interne repr\303\251sentant un simple compteur \303\240 ex\303\251cuter dans un thread.) N
(14) # () S 4 T ( * Le compteur compte de 0 \303\240 une valeur max. Lorsque le compteur atteint la) N
(15) # () S 4 T ( * valeur max le compteur s'arr\303\252te.) N
(16) # () S 4 T ( * @author davidroussel) N
(17) # () S 4 T ( */) N
(18) # () S
() p 4 T () S
(protected) K
( ) p
(static) K
( ) p
(class) K
( ) p
(Counter) L
( ) p
(implements) K
( Runnable) p n
(19) # () S 4 T ({) N
(20) # () S 4 T () S 8 T () S
(/**) C n
(21) # () S 4 T () S 8 T ( * Nombre de compteurs instanci\303\251s) N
(22) # () S 4 T () S 8 T ( */) N
(23) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(static) K
( ) p
(int) k
( CounterNumber = 0;) p n
(24) # () N
(25) # () S 4 T () S 8 T () S
(/**) C n
(26) # () S 4 T () S 8 T ( * Le num\303\251ro de compteur) N
(27) # () S 4 T () S 8 T ( */) N
(28) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(int) k
( number;) p n
(29) # () S 4 T () S 8 T () S
(/**) C n
(30) # () S 4 T () S 8 T ( * Le compteur proprement dit) N
(31) # () S 4 T () S 8 T ( */) N
(32) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(int) k
( count;) p n
(33) # () N
(34) # () S 4 T () S 8 T () S
(/**) C n
(35) # () S 4 T () S 8 T ( * La valeur max du compteur) N
(36) # () S 4 T () S 8 T ( */) N
(37) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(int) k
( max;) p n
(38) # () N
(39) # () S 4 T () S 8 T () S
(/**) C n
(40) # () S 4 T () S 8 T ( * Constructeur valu\303\251 du compteur) N
(41) # () S 4 T () S 8 T ( * @param max la valeur max du compteur \303\240 laquelle il s'arr\303\252te) N
(42) # () S 4 T () S 8 T ( */) N
(43) # () S
() p 4 T () S 8 T () S
(public) K
( Counter\() p
(int) k
( max\)) p n
(44) # () S 4 T () S 8 T ({) N
(45) # () S 4 T () S 8 T () S 12 T (number = ++CounterNumber;) N
(46) # () S 4 T () S 8 T () S 12 T (count = 0;) N
(47) # () S 4 T () S 8 T () S 12 T (this.max = max;) N
(48) # () S 4 T () S 8 T (}) N
(49) # () N
(50) # () S 4 T () S 8 T () S
(/**) C n
(51) # () S 4 T () S 8 T ( * Nettoyage lors de la destruction) N
(52) # () S 4 T () S 8 T ( * @see java.lang.Object#finalize\(\)) N
(53) # () S 4 T () S 8 T ( */) N
(54) # () S
() p 4 T () S 8 T (@Override) N
(55) # () S 4 T () S 8 T () S
(protected) K
( ) p
(void) k
( finalize\(\) ) p
(throws) K
( Throwable) p n
(56) # () S 4 T () S 8 T ({) N
(57) # () S 4 T () S 8 T () S 12 T (CounterNumber--;) N
(58) # () S 4 T () S 8 T (}) N
(59) # () N
(60) # () S 4 T () S 8 T () S
(/**) C n
(61) # () S 4 T () S 8 T ( * Boucle d'\303\251x\303\251cution principale du compteur : Tant que le compteur n'a) N
(62) # () S 4 T () S 8 T ( * pas atteint la valeur max le compteur incr\303\251mente son compteur de 1,) N
(63) # () S 4 T () S 8 T ( * affiche la valeur courante du compteur puis on demande au thread) N
(64) # () S 4 T () S 8 T ( * dans lequel il tourne de passer la main \303\240 un autre thread \(en) N
(65) # () S 4 T () S 8 T ( * esp\303\251rant que ceux ci nous repassent la main un jour afin que l'on) N
(66) # () S 4 T () S 8 T ( * puisse continuer \303\240 compter\).) N
(67) # () S 4 T () S 8 T ( */) N
(68) # () S
() p 4 T () S 8 T (@Override) N
(69) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(70) # () S 4 T () S 8 T ({) N
(71) # () S 4 T () S 8 T () S 12 T () S
(while) K
( \(count < max\)) p n
(72) # () S 4 T () S 8 T () S 12 T ({) N
(73) # () S 4 T () S 8 T () S 12 T () S 16 T (count++;) N
(74) # () N
(75) # () S 4 T () S 8 T () S 12 T () S 16 T (System.out.println\() S
(this) k
(\); ) p
(// utilisation du toString) c n
(76) # () N
(77) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// passe la main \303\240 d'autres threads \(si besoin\)) c n
(78) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (Thread.yield\(\);) N
(79) # () S 4 T () S 8 T () S 12 T (}) N
(80) # () S 4 T () S 8 T (}) N
(81) # () N
(82) # () S 4 T () S 8 T () S
(/**) C n
(RunRunnableExample.java) (Page 1/3) (janv. 22, 15 15:02) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () C 4 T () S 8 T ( * Repr\303\251sentation sous forme de chaine de caract\303\250res) N
(84) # () S 4 T () S 8 T ( * @see java.lang.Object#toString\(\)) N
(85) # () S 4 T () S 8 T ( */) N
(86) # () S
() p 4 T () S 8 T (@Override) N
(87) # () S 4 T () S 8 T () S
(public) K
( String toString\(\)) p n
(88) # () S 4 T () S 8 T ({) N
(89) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(new) K
( String\(") p
(Counter #) str
(" + number + ") p
( = ) str
(" + count\);) p n
(90) # () S 4 T () S 8 T (}) N
(91) # () S 4 T (}) N
(92) # () N
(93) # () S 4 T () S
(/**) C n
(94) # () S 4 T ( * Collection de compteurs Runnable \303\240 lancer) N
(95) # () S 4 T ( */) N
(96) # () S
() p 4 T () S
(protected) K
( Collection<Counter> counters;) p n
(97) # () N
(98) # () S 4 T () S
(/**) C n
(99) # () S 4 T ( * Collection de threads dans lesquels on va vaire tourner les Counter.) N
(100) # () S 4 T ( */) N
(101) # () S
() p 4 T () S
(protected) K
( Collection<Thread> threads;) p n
(102) # () N
(103) # () S 4 T () S
(/**) C n
(104) # () S 4 T ( * Constructeur d'un RunnableExample.) N
(105) # () S 4 T ( * Cr\303\251e un certain nombre de compteur \(Runnable\), puis cr\303\251e le m\303\252me nombre) N
(106) # () S 4 T ( * de threads dans lesquels on place ces compteurs) N
(107) # () S 4 T ( */) N
(108) # () S
() p 4 T () S
(public) K
( RunRunnableExample\() p
(int) k
( nbCounters\)) p n
(109) # () S 4 T ({) N
(110) # () S 4 T () S 8 T (counters = ) S
(new) K
( ArrayList<Counter>\(nbCounters\);) p n
(111) # () S 4 T () S 8 T (threads = ) S
(new) K
( ArrayList<Thread>\(nbCounters\);) p n
(112) # () N
(113) # () S 4 T () S 8 T () S
(for) K
( \() p
(int) k
( i = 0; i < nbCounters; i++\)) p n
(114) # () S 4 T () S 8 T ({) N
(115) # () S 4 T () S 8 T () S 12 T (Counter c = ) S
(new) K
( Counter\(10\);) p n
(116) # () S 4 T () S 8 T () S 12 T (counters.add\(c\);) N
(117) # () N
(118) # () S 4 T () S 8 T () S 12 T (Thread t = ) S
(new) K
( Thread\(c\);) p n
(119) # () S 4 T () S 8 T () S 12 T (threads.add\(t\);) N
(120) # () S 4 T () S 8 T (}) N
(121) # () S 4 T (}) N
(122) # () N
(123) # () S 4 T () S
(/**) C n
(124) # () S 4 T ( * Lancement de tous les threads \(contenant les compteurs\)) N
(125) # () S 4 T ( */) N
(126) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( launch\(\)) p n
(127) # () S 4 T ({) N
(128) # () S 4 T () S 8 T () S
(for) K
( \(Thread t : threads\)) p n
(129) # () S 4 T () S 8 T ({) N
(130) # () S 4 T () S 8 T () S 12 T (t.start\(\);) N
(131) # () S 4 T () S 8 T (}) N
(132) # () S 4 T (}) N
(133) # () N
(134) # () S 4 T () S
(/**) C n
(135) # () S 4 T ( * attente de la fin de tous les threads pour terminer le thread principal) N
(136) # () S 4 T ( */) N
(137) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( terminate\(\)) p n
(138) # () S 4 T ({) N
(139) # () S 4 T () S 8 T () S
(for) K
( \(Thread t : threads\)) p n
(140) # () S 4 T () S 8 T ({) N
(141) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(142) # () S
() p 4 T () S 8 T () S 12 T ({) N
(143) # () S 4 T () S 8 T () S 12 T () S 16 T (t.join\(\);) N
(144) # () S 4 T () S 8 T () S 12 T (}) N
(145) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(InterruptedException e\)) p n
(146) # () S 4 T () S 8 T () S 12 T ({) N
(147) # () S 4 T () S 8 T () S 12 T () S 16 T (System.err.println\(") S
(Thread) str
(" + t + ") p
( join interrupted) str
("\);) p n
(148) # () S 4 T () S 8 T () S 12 T () S 16 T (e.printStackTrace\(\);) N
(149) # () S 4 T () S 8 T () S 12 T (}) N
(150) # () S 4 T () S 8 T (}) N
(151) # () N
(152) # () S 4 T () S 8 T (System.out.println\(") S
(All threads terminated) str
("\);) p n
(153) # () S 4 T (}) N
(154) # () N
(155) # () S 4 T () S
(/**) C n
(156) # () S 4 T ( * Programme principal.) N
(157) # () S 4 T ( * Lancement de plusieurs Counters) N
(158) # () S 4 T ( *) N
(159) # () S 4 T ( * @param args arguments du programme pour y lire le nombre de compteurs \303\240) N
(160) # () S 4 T ( * lancer) N
(161) # () S 4 T ( */) N
(162) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(163) # () S 4 T ({) N
(164) # () S 4 T () S 8 T () S
(int) k
( nbCounters = 3;) p n
(RunRunnableExample.java) (Page 2/3) (janv. 22, 15 15:02) title
border
grestore
(Printed by Pierre) rhead
(src/examples/RunRunnableExample.java) (27/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3,1) 28
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T () S
(// on lit le nombre de counters dans le premier argument du programme) c n
(166) # () S
() p 4 T () S 8 T () S
(if) K
( \(args.length > 0\)) p n
(167) # () S 4 T () S 8 T ({) N
(168) # () S 4 T () S 8 T () S 12 T () S
(int) k
( value;) p n
(169) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(170) # () S
() p 4 T () S 8 T () S 12 T ({) N
(171) # () S 4 T () S 8 T () S 12 T () S 16 T (value = Integer.parseInt\(args[0]\);) N
(172) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(value > 0\)) p n
(173) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(174) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (nbCounters = value;) N
(175) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(176) # () S 4 T () S 8 T () S 12 T (}) N
(177) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(NumberFormatException nfe\)) p n
(178) # () S 4 T () S 8 T () S 12 T ({) N
(179) # () S 4 T () S 8 T () S 12 T () S 16 T (System.err.println\(") S
(Error reading number of counters) str
("\);) p n
(180) # () S 4 T () S 8 T () S 12 T (}) N
(181) # () S 4 T () S 8 T (}) N
(182) # () N
(183) # () S 4 T () S 8 T (RunRunnableExample runner = ) S
(new) K
( RunRunnableExample\(nbCounters\);) p n
(184) # () N
(185) # () S 4 T () S 8 T (runner.launch\(\);) N
(186) # () N
(187) # () S 4 T () S 8 T (System.out.println\(") S
(All threads launched) str
("\);) p n
(188) # () N
(189) # () S 4 T () S 8 T (runner.terminate\(\);) N
(190) # () S 4 T (}) N
(191) # (}) N
(RunRunnableExample.java) (Page 3/3) (janv. 22, 15 15:02) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( examples;) p n
(2) # () S
(import) K
( java.util.Calendar;) p n
(3) # () S
(import) K
( java.util.Date;) p n
(4) # () S
(import) K
( java.util.Random;) p n
(5) # () S
(import) K
( java.util.Vector;) p n
(6) # () S
(import) K
( java.util.function.Consumer;) p n
(7) # () S
(import) K
( java.util.function.Predicate;) p n
(8) # () N
(9) # () S
(import) K
( models.Message;) p n
(10) # () S
(import) K
( models.Message.MessageOrder;) p n
(11) # () N
(12) # () S
(/**) C n
(13) # ( * Test du flux tri\303\251 et filtr\303\251 des messages) N
(14) # ( * @author davidroussel) N
(15) # ( */) N
(16) # () S
(public) K
( ) p
(class) K
( ) p
(TestMessageStream) L n
(17) # () S
({) p n
(18) # () S 4 T () S
(private) K
( ) p
(static) K
( ) p
(void) k
( randomWait\() p
(int) k
( max\)) p n
(19) # () S 4 T ({) N
(20) # () S 4 T () S 8 T (Random rand = ) S
(new) K
( Random\(Calendar.getInstance\(\).getTimeInMillis\(\)\);) p n
(21) # () S 4 T () S 8 T () S
(try) K n
(22) # () S
() p 4 T () S 8 T ({) N
(23) # () S 4 T () S 8 T () S 12 T (Thread.sleep\(rand.nextInt\(max\)\);) N
(24) # () S 4 T () S 8 T (}) N
(25) # () S 4 T () S 8 T () S
(catch) K
( \(InterruptedException e\)) p n
(26) # () S 4 T () S 8 T ({) N
(27) # () S 4 T () S 8 T () S 12 T (e.printStackTrace\(\);) N
(28) # () S 4 T () S 8 T (}) N
(29) # () S 4 T (}) N
(30) # () N
(31) # () S 4 T () S
(/**) C n
(32) # () S 4 T ( * Programme principal) N
(33) # () S 4 T ( * @param args arguments [non utilis\303\251]) N
(34) # () S 4 T ( */) N
(35) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(36) # () S 4 T ({) N
(37) # () S 4 T () S 8 T (Vector<Message> messages = ) S
(new) K
( Vector<Message>\(\);) p n
(38) # () S 4 T () S 8 T () S
(int) k
( delay = 5000;) p n
(39) # () N
(40) # () S 4 T () S 8 T (Date date = Calendar.getInstance\(\).getTime\(\);) N
(41) # () S 4 T () S 8 T (messages.add\() S
(new) K
( Message\(") p
(Message de T) str
(", ") p
(T\303\251n\303\251phore) str
("\)\);) p n
(42) # () S 4 T () S 8 T (randomWait\(delay\);) N
(43) # () S 4 T () S 8 T (messages.add\() S
(new) K
( Message\(") p
(Hello) str
(", ") p
(Z\303\251bulon) str
("\)\);) p n
(44) # () S 4 T () S 8 T (randomWait\(delay\);) N
(45) # () S 4 T () S 8 T (messages.add\() S
(new) K
( Message\(") p
(ZBulon's in the place) str
(", ") p
(Z\303\251bulon) str
("\)\);) p n
(46) # () S 4 T () S 8 T (randomWait\(delay\);) N
(47) # () S 4 T () S 8 T (messages.add\() S
(new) K
( Message\(date, ") p
(ZBulon antidat\303\251) str
(", ") p
(Z\303\251bulon) str
("\)\);) p n
(48) # () S 4 T () S 8 T (randomWait\(delay\);) N
(49) # () S 4 T () S 8 T (messages.add\() S
(new) K
( Message\(") p
(Message de contr\303\264le) str
("\)\); ) p
(// sans auteur) c n
(50) # () N
(51) # () S
() p 4 T () S 8 T (Consumer<Message> messagePrinter = \(Message m\) ) S
(\256) sy
( System.out.println\(m\);) p n
(52) # () N
(53) # () S 4 T () S 8 T () S
(// Flux ordinaire des messages) c n
(54) # () S
() p 4 T () S 8 T (System.out.println\(") S
(Flux entier des messages non tri\303\251s : ) str
("\);) p n
(55) # () S 4 T () S 8 T (messages.stream\(\).forEach\(messagePrinter\);) N
(56) # () N
(57) # () S 4 T () S 8 T () S
(// Flux entier des messsages tri\303\251s par date) c n
(58) # () S
() p 4 T () S 8 T (System.out.println\(") S
(Flux entier des messages tri\303\251s par date : ) str
("\);) p n
(59) # () S 4 T () S 8 T (messages.stream\(\).sorted\(\).forEach\(messagePrinter\);) N
(60) # () N
(61) # () S 4 T () S 8 T (Message.removeOrder\(MessageOrder.DATE\);) N
(62) # () S 4 T () S 8 T (Message.addOrder\(MessageOrder.AUTHOR\);) N
(63) # () N
(64) # () S 4 T () S 8 T (System.out.println\(") S
(Flux entier des messages tri\303\251s par auteur : ) str
("\);) p n
(65) # () S 4 T () S 8 T (messages.stream\(\).sorted\(\).forEach\(messagePrinter\);) N
(66) # () N
(67) # () S 4 T () S 8 T (Message.addOrder\(MessageOrder.CONTENT\);) N
(68) # () S 4 T () S 8 T (System.out.println\(") S
(Flux entier des messages tri\303\251s par auteur et par contenu: ) str
("\);) p n
(69) # () S 4 T () S 8 T (messages.stream\(\).sorted\(\).forEach\(messagePrinter\);) N
(70) # () N
(71) # () S 4 T () S 8 T (Message.addOrder\(MessageOrder.DATE\);) N
(72) # () S 4 T () S 8 T (System.out.println\(") S
(Flux entier des messages tri\303\251s par auteur et par contenu et par date: ) str
("\);) p n
(73) # () S 4 T () S 8 T (messages.stream\(\).sorted\(\).forEach\(messagePrinter\);) N
(74) # () N
(75) # () S 4 T () S 8 T (Predicate<Message> zebulonFilter = \(Message m\) ) S
(\256) sy n
(76) # () S
() p 4 T () S 8 T ({) N
(77) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(m ) p
(\271) sy
( ) p
(null) k
(\)) p n
(78) # () S 4 T () S 8 T () S 12 T ({) N
(79) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(m.hasAuthor\(\)\)) p n
(80) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(81) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(m.getAuthor\(\).equals\(") p
(Z\303\251bulon) str
("\)\)) p n
(82) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(TestMessageStream.java) (Page 1/2) (mai 03, 16 18:07) title
border
grestore
(Printed by Pierre) rhead
(src/examples/RunRunnableExample.java, src/examples/TestMessageStream.java) (28/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2,1) 29
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( ) p
(true) k
(;) p n
(84) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(85) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(86) # () S 4 T () S 8 T () S 12 T (}) N
(87) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(false) k
(;) p n
(88) # () S 4 T () S 8 T (};) N
(89) # () N
(90) # () S 4 T () S 8 T () S
(// Flux filtr\303\251 \(pour Z\303\251bulon\) des messages tri\303\251s) c n
(91) # () S
() p 4 T () S 8 T (System.out.println\(") S
(Flux filtr\303\251 \(Z\303\251bulon\) des messages tri\303\251s par auteur et par contenu : ) str
("\);) p n
(92) # () S 4 T () S 8 T (messages.stream\(\).sorted\(\).filter\(zebulonFilter\).forEach\(messagePrinter\);) N
(93) # () S 4 T () S 8 T (Message.removeOrder\(MessageOrder.CONTENT\);) N
(94) # () S 4 T () S 8 T (Message.removeOrder\(MessageOrder.AUTHOR\);) N
(95) # () S 4 T () S 8 T (Message.clearOrders\(\);) N
(96) # () S 4 T () S 8 T (Message.addOrder\(MessageOrder.DATE\);) N
(97) # () N
(98) # () S 4 T () S 8 T (System.out.println\(") S
(Flux filtr\303\251 \(Z\303\251bulon\) des messages re-tri\303\251s par date: ) str
("\);) p n
(99) # () S 4 T () S 8 T (messages.stream\(\).filter\(zebulonFilter\).sorted\(\).forEach\(messagePrinter\);) N
(100) # () S 4 T (}) N
(101) # () N
(102) # (}) N
(TestMessageStream.java) (Page 2/2) (mai 03, 16 18:07) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( examples.widgets;) p n
(2) # () N
(3) # () S
(import) K
( java.awt.BorderLayout;) p n
(4) # () S
(import) K
( java.awt.Color;) p n
(5) # () S
(import) K
( java.awt.Component;) p n
(6) # () S
(import) K
( java.awt.Dimension;) p n
(7) # () S
(import) K
( java.awt.HeadlessException;) p n
(8) # () S
(import) K
( java.awt.event.ActionEvent;) p n
(9) # () S
(import) K
( java.awt.event.InputEvent;) p n
(10) # () S
(import) K
( java.awt.event.KeyEvent;) p n
(11) # () N
(12) # () S
(import) K
( javax.swing.AbstractAction;) p n
(13) # () S
(import) K
( javax.swing.Action;) p n
(14) # () S
(import) K
( javax.swing.Box;) p n
(15) # () S
(import) K
( javax.swing.ImageIcon;) p n
(16) # () S
(import) K
( javax.swing.JButton;) p n
(17) # () S
(import) K
( javax.swing.JFrame;) p n
(18) # () S
(import) K
( javax.swing.JMenu;) p n
(19) # () S
(import) K
( javax.swing.JMenuBar;) p n
(20) # () S
(import) K
( javax.swing.JMenuItem;) p n
(21) # () S
(import) K
( javax.swing.JScrollPane;) p n
(22) # () S
(import) K
( javax.swing.JSeparator;) p n
(23) # () S
(import) K
( javax.swing.JTextPane;) p n
(24) # () S
(import) K
( javax.swing.JToolBar;) p n
(25) # () S
(import) K
( javax.swing.KeyStroke;) p n
(26) # () S
(import) K
( javax.swing.text.BadLocationException;) p n
(27) # () S
(import) K
( javax.swing.text.Style;) p n
(28) # () S
(import) K
( javax.swing.text.StyleConstants;) p n
(29) # () S
(import) K
( javax.swing.text.StyledDocument;) p n
(30) # () N
(31) # () S
(/**) C n
(32) # ( * Exemple simple de fen\303\252tre graphique) N
(33) # ( * @author davidroussel) N
(34) # ( */) N
(35) # () S
(public) K
( ) p
(class) K
( ) p
(ExampleFrame) L
( ) p
(extends) K
( JFrame) p n
(36) # ({) N
(37) # () S 4 T () S
(/**) C n
(38) # () S 4 T ( * Cha\303\256ne de caract\303\250re pour passer \303\240 la ligne) N
(39) # () S 4 T ( */) N
(40) # () S
() p 4 T () S
(protected) K
( ) p
(static) K
( String newline = System.getProperty\(") p
(line.separator) str
("\);) p n
(41) # () N
(42) # () S 4 T () S
(/**) C n
(43) # () S 4 T ( * Bouton "Red") N
(44) # () S 4 T ( */) N
(45) # () S
() p 4 T () S
(private) K
( JButton redButton;) p n
(46) # () N
(47) # () S 4 T () S
(/**) C n
(48) # () S 4 T ( * Bouton "Blue") N
(49) # () S 4 T ( */) N
(50) # () S
() p 4 T () S
(private) K
( JButton blueButton;) p n
(51) # () N
(52) # () S 4 T () S
(/**) C n
(53) # () S 4 T ( * Bouton "Clear") N
(54) # () S 4 T ( */) N
(55) # () S
() p 4 T () S
(private) K
( JButton clearButton;) p n
(56) # () N
(57) # () S 4 T () S
(/**) C n
(58) # () S 4 T ( * Document dans lequel \303\251crire \(\303\240 extraire du JTextPane avec) N
(59) # () S 4 T ( * {@link JTextPane.getStyledDocument\(\)}\)) N
(60) # () S 4 T ( */) N
(61) # () S
() p 4 T () S
(protected) K
( StyledDocument document;) p n
(62) # () N
(63) # () S 4 T () S
(/**) C n
(64) # () S 4 T ( * Style \303\240 appliquer lors de l'\303\251criture dans le document) N
(65) # () S 4 T ( */) N
(66) # () S
() p 4 T () S
(protected) K
( Style style;) p n
(67) # () N
(68) # () S 4 T () S
(/**) C n
(69) # () S 4 T ( * Couleur par d\303\251faut lors de l'\303\251criture dans le document) N
(70) # () S 4 T ( */) N
(71) # () S
() p 4 T () S
(protected) K
( Color defaultColor;) p n
(72) # () N
(73) # () S 4 T () S
(/**) C n
(74) # () S 4 T ( * Action \303\240 r\303\251aliser lorsque l'on cliquera sur le bouton "Red" ou lorsque) N
(75) # () S 4 T ( * l'on tapera "Crtl-R" dans le JTextPane) N
(76) # () S 4 T ( */) N
(77) # () S
() p 4 T () S
(private) K
( ) p
(final) K
( Action redAction;) p n
(78) # () N
(79) # () S 4 T () S
(/**) C n
(80) # () S 4 T ( * Action \303\240 r\303\251aliser lorsque l'on cliquera sur le bouton "Blue" ou lorsque) N
(81) # () S 4 T ( * l'on tapera "Crtl-B" dans le JTextPane) N
(82) # () S 4 T ( */) N
(ExampleFrame.java) (Page 1/4) (janv. 22, 15 15:01) title
border
grestore
(Printed by Pierre) rhead
(src/examples/TestMessageStream.java, src/examples/widgets/ExampleFrame.java) (29/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 30
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S
(private) K
( ) p
(final) K
( Action blueAction;) p n
(84) # () N
(85) # () S 4 T () S
(/**) C n
(86) # () S 4 T ( * Action \303\240 r\303\251aliser lorsque l'on cliquera sur le bouton "Clear" ou lorsque) N
(87) # () S 4 T ( * l'on tapera "Crtl-L" dans le JTextPane) N
(88) # () S 4 T ( */) N
(89) # () S
() p 4 T () S
(private) K
( ) p
(final) K
( Action clearAction;) p n
(90) # () N
(91) # () S 4 T () S
(/**) C n
(92) # () S 4 T ( * Cr\303\251ation d'une fen\303\252tre graphique simple) N
(93) # () S 4 T ( * @throws HeadlessException) N
(94) # () S 4 T ( */) N
(95) # () S
() p 4 T () S
(public) K
( ExampleFrame\(\) ) p
(throws) K
( HeadlessException) p n
(96) # () S 4 T ({) N
(97) # () S 4 T () S 8 T (setDefaultCloseOperation\(JFrame.EXIT_ON_CLOSE\);) N
(98) # () S 4 T () S 8 T (setTitle\(") S
(Red Blue Example) str
("\);) p n
(99) # () S 4 T () S 8 T (redAction = ) S
(new) K
( RedAction\(\);) p n
(100) # () S 4 T () S 8 T (blueAction = ) S
(new) K
( BlueAction\(\);) p n
(101) # () S 4 T () S 8 T (clearAction = ) S
(new) K
( ClearAction\(\);) p n
(102) # () N
(103) # () S 4 T () S 8 T (setPreferredSize\() S
(new) K
( Dimension\(400, 200\)\);) p n
(104) # () N
(105) # () S 4 T () S 8 T (JMenuBar menuBar = ) S
(new) K
( JMenuBar\(\);) p n
(106) # () S 4 T () S 8 T (setJMenuBar\(menuBar\);) N
(107) # () N
(108) # () S 4 T () S 8 T (JMenu menuActions = ) S
(new) K
( JMenu\(") p
(Actions) str
("\);) p n
(109) # () S 4 T () S 8 T (menuBar.add\(menuActions\);) N
(110) # () N
(111) # () S 4 T () S 8 T (JMenuItem menuItemRed = ) S
(new) K
( JMenuItem\(redAction\);) p n
(112) # () S 4 T () S 8 T (menuActions.add\(menuItemRed\);) N
(113) # () N
(114) # () S 4 T () S 8 T (JMenuItem menuItemBlue = ) S
(new) K
( JMenuItem\(blueAction\);) p n
(115) # () S 4 T () S 8 T (menuActions.add\(menuItemBlue\);) N
(116) # () N
(117) # () S 4 T () S 8 T (JSeparator separator = ) S
(new) K
( JSeparator\(\);) p n
(118) # () S 4 T () S 8 T (menuActions.add\(separator\);) N
(119) # () N
(120) # () S 4 T () S 8 T (JMenuItem menuItemClear = ) S
(new) K
( JMenuItem\(clearAction\);) p n
(121) # () S 4 T () S 8 T (menuActions.add\(menuItemClear\);) N
(122) # () N
(123) # () S 4 T () S 8 T (JToolBar toolBar = ) S
(new) K
( JToolBar\(\);) p n
(124) # () S 4 T () S 8 T (toolBar.setFloatable\() S
(false) k
(\);) p n
(125) # () S 4 T () S 8 T (getContentPane\(\).add\(toolBar, BorderLayout.NORTH\);) N
(126) # () N
(127) # () S 4 T () S 8 T (redButton = ) S
(new) K
( JButton\(redAction\);) p n
(128) # () S 4 T () S 8 T (toolBar.add\(redButton\);) N
(129) # () N
(130) # () S 4 T () S 8 T (blueButton = ) S
(new) K
( JButton\(blueAction\);) p n
(131) # () S 4 T () S 8 T (toolBar.add\(blueButton\);) N
(132) # () N
(133) # () S 4 T () S 8 T (Component horizontalGlue = Box.createHorizontalGlue\(\);) N
(134) # () S 4 T () S 8 T (toolBar.add\(horizontalGlue\);) N
(135) # () N
(136) # () S 4 T () S 8 T (clearButton = ) S
(new) K
( JButton\(clearAction\);) p n
(137) # () S 4 T () S 8 T (toolBar.add\(clearButton\);) N
(138) # () N
(139) # () S 4 T () S 8 T (JScrollPane scrollPane = ) S
(new) K
( JScrollPane\(\);) p n
(140) # () S 4 T () S 8 T (getContentPane\(\).add\(scrollPane, BorderLayout.CENTER\);) N
(141) # () N
(142) # () S 4 T () S 8 T (JTextPane textPane = ) S
(new) K
( JTextPane\(\);) p n
(143) # () N
(144) # () S 4 T () S 8 T (document = textPane.getStyledDocument\(\);) N
(145) # () S 4 T () S 8 T (style = textPane.addStyle\(") S
(New Style) str
(", ) p
(null) k
(\);) p n
(146) # () S 4 T () S 8 T (defaultColor = StyleConstants.getForeground\(style\);) N
(147) # () N
(148) # () S 4 T () S 8 T (scrollPane.setViewportView\(textPane\);) N
(149) # () S 4 T (}) N
(150) # () N
(151) # () S 4 T () S
(/**) C n
(152) # () S 4 T ( * Ajoute du texte avec une couleur sp\303\251cifique \303\240 la fin du document) N
(153) # () S 4 T ( * @param text le texte \303\240 ajouter) N
(154) # () S 4 T ( * @param color la couleur dans laquelle ajouter le texte) N
(155) # () S 4 T ( */) N
(156) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( appendToDocument\(String text, Color color\)) p n
(157) # () S 4 T ({) N
(158) # () S 4 T () S 8 T (StyleConstants.setForeground\(style, color\);) N
(159) # () N
(160) # () S 4 T () S 8 T () S
(try) K n
(161) # () S
() p 4 T () S 8 T ({) N
(162) # () S 4 T () S 8 T () S 12 T (document.insertString\(document.getLength\(\), text) N
(163) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (+ newline, style\);) N
(164) # () S 4 T () S 8 T (}) N
(ExampleFrame.java) (Page 2/4) (janv. 22, 15 15:01) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T () S
(catch) K
( \(BadLocationException ex\)) p n
(166) # () S 4 T () S 8 T ({) N
(167) # () S 4 T () S 8 T () S 12 T (System.err.println\(") S
(write at bad location) str
("\);) p n
(168) # () S 4 T () S 8 T () S 12 T (ex.printStackTrace\(\);) N
(169) # () S 4 T () S 8 T (}) N
(170) # () N
(171) # () S 4 T () S 8 T (StyleConstants.setForeground\(style, defaultColor\);) N
(172) # () S 4 T (}) N
(173) # () N
(174) # () S 4 T () S
(// ------------------------------------------------------------------------) c n
(175) # () S
() p 4 T () S
(// Actions de l'application) c n
(176) # () S
() p 4 T () S
(//) c 8 T (On utilise des actions lorsque celles ci doivent pouvoir \303\252tre invoqu\303\251es) N
(177) # () S
() p 4 T () S
(//) c 8 T (depuis divers \303\251lements de l'interface graphique: p.ex. menu ET bouton.) N
(178) # () S
() p 4 T () S
(//) c 8 T (Sinon un simple ActionListener sur un bouton par exemple suffirait.) N
(179) # () S
() p 4 T () S
(// ------------------------------------------------------------------------) c n
(180) # () N
(181) # () S
() p 4 T () S
(/**) C n
(182) # () S 4 T ( * Action listener interne \303\240 la classe ExampleFrame pour executer les) N
(183) # () S 4 T ( * instructions requises lorsque l'on clique sur le bouton "blue") N
(184) # () S 4 T ( */) N
(185) # () S
() p 4 T () S
(private) K
( ) p
(class) K
( ) p
(BlueAction) L
( ) p
(extends) K
( AbstractAction) p n
(186) # () S 4 T ({) N
(187) # () S 4 T () S 8 T () S
(/**) C n
(188) # () S 4 T () S 8 T ( * Constructeur de BlueAction: met en place le nom et la description de) N
(189) # () S 4 T () S 8 T ( * l'action ainsi que son raccourci clavier) N
(190) # () S 4 T () S 8 T ( */) N
(191) # () S
() p 4 T () S 8 T () S
(public) K
( BlueAction\(\)) p n
(192) # () S 4 T () S 8 T ({) N
(193) # () S 4 T () S 8 T () S 12 T (putValue\(MNEMONIC_KEY, KeyEvent.VK_B\);) N
(194) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON, ) S
(new) K
( ImageIcon\(ExampleFrame.class.getResource\(") p
(/examples/icons/bg_blue-16.p) str n
0 T (ng) S
("\)\)\);) p n
(195) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY, ) S
(new) K
( ImageIcon\(ExampleFrame.class.getResource\(") p
(/examples/icons/bg_blue) str n
0 T (-32.png) S
("\)\)\);) p n
(196) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_B, InputEvent.META_MASK\)\);) N
(197) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Blue) str
("\);) p n
(198) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Prints \\"Blue\\" in blue in the document) str
("\);) p n
(199) # () S 4 T () S 8 T (}) N
(200) # () N
(201) # () S 4 T () S 8 T () S
(/**) C n
(202) # () S 4 T () S 8 T ( * Action \303\240 r\303\251aliser lorsque le BlueAction est sollicit\303\251) N
(203) # () S 4 T () S 8 T ( * @param e l'action event associ\303\251) N
(204) # () S 4 T () S 8 T ( */) N
(205) # () S
() p 4 T () S 8 T (@Override) N
(206) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent e\)) p n
(207) # () S 4 T () S 8 T ({) N
(208) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(209) # () S 4 T () S 8 T () S 12 T ( * BlueAction \303\251tant une classe interne \(non static\) elle a) N
(210) # () S 4 T () S 8 T () S 12 T ( * donc acc\303\250s aux membres de la classe ExampleFrame) N
(211) # () S 4 T () S 8 T () S 12 T ( * Change la couleur du texte en bleu et affiche un message) N
(212) # () S 4 T () S 8 T () S 12 T ( */) N
(213) # () S
() p 4 T () S 8 T () S 12 T (appendToDocument\(") S
(Blue) str
(", Color.BLUE\);) p n
(214) # () S 4 T () S 8 T (}) N
(215) # () S 4 T (}) N
(216) # () N
(217) # () S 4 T () S
(/**) C n
(218) # () S 4 T ( * Listener lorsque le bouton #btnClear est activ\303\251.) N
(219) # () S 4 T ( * Efface le contenu du {@link #document}) N
(220) # () S 4 T ( */) N
(221) # () S
() p 4 T () S
(private) K
( ) p
(class) K
( ) p
(ClearAction) L
( ) p
(extends) K
( AbstractAction) p n
(222) # () S 4 T ({) N
(223) # () S 4 T () S 8 T () S
(/**) C n
(224) # () S 4 T () S 8 T ( * Constructeur de ClearAction: met en place le nom et la description de) N
(225) # () S 4 T () S 8 T ( * l'action ainsi que son raccourci clavier) N
(226) # () S 4 T () S 8 T ( */) N
(227) # () S
() p 4 T () S 8 T () S
(public) K
( ClearAction\(\)) p n
(228) # () S 4 T () S 8 T ({) N
(229) # () S 4 T () S 8 T () S 12 T (putValue\(MNEMONIC_KEY, KeyEvent.VK_L\);) N
(230) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON, ) S
(new) K
( ImageIcon\(ExampleFrame.class.getResource\(") p
(/examples/icons/erase-16.png) str
() p n
0 T ("\)\)\);) N
(231) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY, ) S
(new) K
( ImageIcon\(ExampleFrame.class.getResource\(") p
(/examples/icons/erase-3) str n
0 T (2.png) S
("\)\)\);) p n
(232) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_L, InputEvent.META_MASK\)\);) N
(233) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Clear) str
("\);) p n
(234) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Clears the document) str
("\);) p n
(235) # () S 4 T () S 8 T (}) N
(236) # () N
(237) # () S 4 T () S 8 T () S
(/**) C n
(238) # () S 4 T () S 8 T ( * Op\303\251rations \303\240 r\303\251aliser lorsque #clearAction est sollicit\303\251e) N
(239) # () S 4 T () S 8 T ( * @param e l'\303\251v\303\250nement \303\240 l'origine du d\303\251clenchement de l'action) N
(240) # () S 4 T () S 8 T ( */) N
(241) # () S
() p 4 T () S 8 T (@Override) N
(242) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent e\)) p n
(ExampleFrame.java) (Page 3/4) (janv. 22, 15 15:01) title
border
grestore
(Printed by Pierre) rhead
(src/examples/widgets/ExampleFrame.java) (30/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4,1) 31
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(243) # () p 4 T () S 8 T ({) N
(244) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(245) # () S
() p 4 T () S 8 T () S 12 T ({) N
(246) # () S 4 T () S 8 T () S 12 T () S 16 T (document.remove\(0, document.getLength\(\)\);) N
(247) # () S 4 T () S 8 T () S 12 T (}) N
(248) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(BadLocationException ex\)) p n
(249) # () S 4 T () S 8 T () S 12 T ({) N
(250) # () S 4 T () S 8 T () S 12 T () S 16 T (System.err.println\(") S
(ClientFrame: clear doc: bad location) str
("\);) p n
(251) # () S 4 T () S 8 T () S 12 T () S 16 T (ex.printStackTrace\(\);) N
(252) # () S 4 T () S 8 T () S 12 T (}) N
(253) # () S 4 T () S 8 T (}) N
(254) # () S 4 T (}) N
(255) # () N
(256) # () S 4 T () S
(/**) C n
(257) # () S 4 T ( * Action interne \303\240 la classe ExampleFrame pour executer les) N
(258) # () S 4 T ( * instructions requises lorsque l'on clique sur le bouton "red") N
(259) # () S 4 T ( */) N
(260) # () S
() p 4 T () S
(private) K
( ) p
(class) K
( ) p
(RedAction) L
( ) p
(extends) K
( AbstractAction) p n
(261) # () S 4 T ({) N
(262) # () S 4 T () S 8 T () S
(/**) C n
(263) # () S 4 T () S 8 T ( * Constructeur de RedAction: met en place le nom et la description de) N
(264) # () S 4 T () S 8 T ( * l'action ainsi que son raccourci clavier) N
(265) # () S 4 T () S 8 T ( */) N
(266) # () S
() p 4 T () S 8 T () S
(public) K
( RedAction\(\)) p n
(267) # () S 4 T () S 8 T ({) N
(268) # () S 4 T () S 8 T () S 12 T (putValue\(MNEMONIC_KEY, KeyEvent.VK_R\);) N
(269) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON, ) S
(new) K
( ImageIcon\(ExampleFrame.class.getResource\(") p
(/examples/icons/bg_red-16.pn) str n
0 T (g) S
("\)\)\);) p n
(270) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY, ) S
(new) K
( ImageIcon\(ExampleFrame.class.getResource\(") p
(/examples/icons/bg_red-) str n
0 T (32.png) S
("\)\)\);) p n
(271) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_R, InputEvent.META_MASK\)\);) N
(272) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Red) str
("\);) p n
(273) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Prints \\"Red\\" in red in the document) str
("\);) p n
(274) # () S 4 T () S 8 T (}) N
(275) # () N
(276) # () S 4 T () S 8 T () S
(/**) C n
(277) # () S 4 T () S 8 T ( * Op\303\251rations \303\240 r\303\251aliser lorsque #redAction est sollicit\303\251e) N
(278) # () S 4 T () S 8 T ( * @param e l'\303\251v\303\250nement \303\240 l'origine du d\303\251clenchement de l'action) N
(279) # () S 4 T () S 8 T ( */) N
(280) # () S
() p 4 T () S 8 T (@Override) N
(281) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent e\)) p n
(282) # () S 4 T () S 8 T ({) N
(283) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(284) # () S 4 T () S 8 T () S 12 T ( * Change la couleur du texte en rouge et affiche "Red" dans le) N
(285) # () S 4 T () S 8 T () S 12 T ( * document) N
(286) # () S 4 T () S 8 T () S 12 T ( */) N
(287) # () S
() p 4 T () S 8 T () S 12 T (appendToDocument\(") S
(Red) str
(", Color.RED\);) p n
(288) # () S 4 T () S 8 T (}) N
(289) # () S 4 T (}) N
(290) # (}) N
(ExampleFrame.java) (Page 4/4) (janv. 22, 15 15:01) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( examples.widgets;) p n
(2) # () N
(3) # () S
(import) K
( java.awt.BorderLayout;) p n
(4) # () S
(import) K
( java.awt.Color;) p n
(5) # () S
(import) K
( java.awt.Component;) p n
(6) # () S
(import) K
( java.awt.Dimension;) p n
(7) # () S
(import) K
( java.awt.HeadlessException;) p n
(8) # () S
(import) K
( java.awt.event.ActionEvent;) p n
(9) # () S
(import) K
( java.awt.event.InputEvent;) p n
(10) # () S
(import) K
( java.awt.event.KeyEvent;) p n
(11) # () S
(import) K
( java.awt.event.MouseAdapter;) p n
(12) # () S
(import) K
( java.awt.event.MouseEvent;) p n
(13) # () S
(import) K
( java.util.Stack;) p n
(14) # () N
(15) # () S
(import) K
( javax.swing.AbstractAction;) p n
(16) # () S
(import) K
( javax.swing.Action;) p n
(17) # () S
(import) K
( javax.swing.DefaultListModel;) p n
(18) # () S
(import) K
( javax.swing.ImageIcon;) p n
(19) # () S
(import) K
( javax.swing.JButton;) p n
(20) # () S
(import) K
( javax.swing.JFrame;) p n
(21) # () S
(import) K
( javax.swing.JLabel;) p n
(22) # () S
(import) K
( javax.swing.JList;) p n
(23) # () S
(import) K
( javax.swing.JMenuItem;) p n
(24) # () S
(import) K
( javax.swing.JOptionPane;) p n
(25) # () S
(import) K
( javax.swing.JPanel;) p n
(26) # () S
(import) K
( javax.swing.JPopupMenu;) p n
(27) # () S
(import) K
( javax.swing.JScrollPane;) p n
(28) # () S
(import) K
( javax.swing.JSeparator;) p n
(29) # () S
(import) K
( javax.swing.JTextArea;) p n
(30) # () S
(import) K
( javax.swing.KeyStroke;) p n
(31) # () S
(import) K
( javax.swing.ListCellRenderer;) p n
(32) # () S
(import) K
( javax.swing.ListSelectionModel;) p n
(33) # () S
(import) K
( javax.swing.UIManager;) p n
(34) # () S
(import) K
( javax.swing.event.ListSelectionEvent;) p n
(35) # () S
(import) K
( javax.swing.event.ListSelectionListener;) p n
(36) # () N
(37) # () S
(/**) C n
(38) # ( * Exemple de fen\303\250tre contenant une liste d'\303\251l\303\251ments) N
(39) # ( *) N
(40) # ( * @author davidroussel) N
(41) # ( */) N
(42) # () S
(public) K
( ) p
(class) K
( ) p
(ListExampleFrame) L
( ) p
(extends) K
( JFrame) p n
(43) # ({) N
(44) # () S 4 T () S
(/**) C n
(45) # () S 4 T ( * Cha\303\256ne de caract\303\250re pour passer \303\240 la ligne) N
(46) # () S 4 T ( */) N
(47) # () S
() p 4 T () S
(private) K
( ) p
(static) K
( String newline = System.getProperty\(") p
(line.separator) str
("\);) p n
(48) # () N
(49) # () S 4 T () S
(/**) C n
(50) # () S 4 T ( * Liste des \303\251l\303\251ments \303\240 afficher dans la JList.) N
(51) # () S 4 T ( * Les ajouts et retraits effectu\303\251s dans cette ListModel seront alors) N
(52) # () S 4 T ( * automatiquement transmis au JList contenant ce ListModel) N
(53) # () S 4 T ( */) N
(54) # () S
() p 4 T () S
(private) K
( DefaultListModel<String> elements = ) p
(new) K
( DefaultListModel<String>\(\);) p n
(55) # () N
(56) # () S 4 T () S
(/**) C n
(57) # () S 4 T ( * Le mod\303\250le de s\303\251lection de la JList.) N
(58) # () S 4 T ( * Conserve les indices des \303\251l\303\251ments s\303\251lectionn\303\251s de {@link #elements} dans) N
(59) # () S 4 T ( * la JList qui affiche ces \303\251l\303\251ments.) N
(60) # () S 4 T ( */) N
(61) # () S
() p 4 T () S
(private) K
( ListSelectionModel selectionModel = ) p
(null) k
(;) p n
(62) # () N
(63) # () S 4 T () S
(/**) C n
(64) # () S 4 T ( * La text area o\303\271 afficher les messages) N
(65) # () S 4 T ( */) N
(66) # () S
() p 4 T () S
(private) K
( JTextArea output = ) p
(null) k
(;) p n
(67) # () N
(68) # () S 4 T () S
(/**) C n
(69) # () S 4 T ( * Action \303\240 r\303\251aliser lorsque l'on souhaite supprimer les \303\251l\303\251ments) N
(70) # () S 4 T ( * s\303\251lectionnn\303\251s de la liste) N
(71) # () S 4 T ( */) N
(72) # () S
() p 4 T () S
(private) K
( ) p
(final) K
( Action removeAction = ) p
(new) K
( RemoveItemAction\(\);) p n
(73) # () N
(74) # () S 4 T () S
(/**) C n
(75) # () S 4 T ( * Action \303\240 r\303\251aliser lorsque l'on souhaite d\303\251selctionner tous les \303\251lements de la liste) N
(76) # () S 4 T ( */) N
(77) # () S
() p 4 T () S
(private) K
( ) p
(final) K
( Action clearSelectionAction = ) p
(new) K
( ClearSelectionAction\(\);) p n
(78) # () N
(79) # () S 4 T () S
(/**) C n
(80) # () S 4 T ( * Action \303\240 r\303\251aliser lorsque l'on souhaite ajouter un \303\251l\303\251ment \303\240 la liste) N
(81) # () S 4 T ( */) N
(82) # () S
() p 4 T () S
(private) K
( ) p
(final) K
( Action addAction = ) p
(new) K
( AddAction\(\);) p n
(ListExampleFrame.java) (Page 1/5) (avril 14, 16 12:58) title
border
grestore
(Printed by Pierre) rhead
(src/examples/widgets/ExampleFrame.java, src/examples/widgets/ListExampleFrame.java) (31/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 32
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p n
(84) # () S 4 T () S
(/**) C n
(85) # () S 4 T ( * @throws HeadlessException) N
(86) # () S 4 T ( */) N
(87) # () S
() p 4 T () S
(public) K
( ListExampleFrame\(\) ) p
(throws) K
( HeadlessException) p n
(88) # () S 4 T ({) N
(89) # () S 4 T () S 8 T () S
(super) K
(\(\); ) p
(// d\303\251j\303\240 implicite) c n
(90) # () S
() p 4 T () S 8 T (elements.addElement\(") S
(T\303\251n\303\251phore) str
("\);) p n
(91) # () S 4 T () S 8 T (elements.addElement\(") S
(Z\303\251bulon) str
("\);) p n
(92) # () S 4 T () S 8 T (elements.addElement\(") S
(Z\303\251phirine) str
("\);) p n
(93) # () S 4 T () S 8 T (elements.addElement\(") S
(Uriel) str
("\);) p n
(94) # () S 4 T () S 8 T (elements.addElement\(") S
(Philom\303\250ne) str
("\);) p n
(95) # () N
(96) # () S 4 T () S 8 T (setPreferredSize\() S
(new) K
( Dimension\(200, 100\)\);) p n
(97) # () S 4 T () S 8 T (getContentPane\(\).setLayout\() S
(new) K
( BorderLayout\(0, 0\)\);) p n
(98) # () N
(99) # () S 4 T () S 8 T (JScrollPane textScrollPane = ) S
(new) K
( JScrollPane\(\);) p n
(100) # () S 4 T () S 8 T (getContentPane\(\).add\(textScrollPane, BorderLayout.CENTER\);) N
(101) # () N
(102) # () S 4 T () S 8 T (output = ) S
(new) K
( JTextArea\(\);) p n
(103) # () S 4 T () S 8 T (textScrollPane.setViewportView\(output\);) N
(104) # () N
(105) # () S 4 T () S 8 T (JPanel leftPanel = ) S
(new) K
( JPanel\(\);) p n
(106) # () S 4 T () S 8 T (leftPanel.setPreferredSize\() S
(new) K
( Dimension\(200, 10\)\);) p n
(107) # () S 4 T () S 8 T (getContentPane\(\).add\(leftPanel, BorderLayout.WEST\);) N
(108) # () S 4 T () S 8 T (leftPanel.setLayout\() S
(new) K
( BorderLayout\(0, 0\)\);) p n
(109) # () N
(110) # () S 4 T () S 8 T (JButton btnClearSelection = ) S
(new) K
( JButton\(") p
(Clear Selection) str
("\);) p n
(111) # () S 4 T () S 8 T (btnClearSelection.setAction\(clearSelectionAction\);) N
(112) # () S 4 T () S 8 T (leftPanel.add\(btnClearSelection, BorderLayout.NORTH\);) N
(113) # () N
(114) # () S 4 T () S 8 T (JScrollPane listScrollPane = ) S
(new) K
( JScrollPane\(\);) p n
(115) # () S 4 T () S 8 T (leftPanel.add\(listScrollPane, BorderLayout.CENTER\);) N
(116) # () N
(117) # () S 4 T () S 8 T (JList<String> list = ) S
(new) K
( JList<String>\(elements\);) p n
(118) # () S 4 T () S 8 T (listScrollPane.setViewportView\(list\);) N
(119) # () S 4 T () S 8 T (list.setName\(") S
(Elements) str
("\);) p n
(120) # () S 4 T () S 8 T (list.setBorder\(UIManager.getBorder\(") S
(EditorPane.border) str
("\)\);) p n
(121) # () S 4 T () S 8 T (list.setSelectedIndex\(0\);) N
(122) # () S 4 T () S 8 T (list.setCellRenderer\() S
(new) K
( ColorTextRenderer\(\)\);) p n
(123) # () N
(124) # () S 4 T () S 8 T (JPopupMenu popupMenu = ) S
(new) K
( JPopupMenu\(\);) p n
(125) # () S 4 T () S 8 T (addPopup\(list, popupMenu\);) N
(126) # () N
(127) # () S 4 T () S 8 T (JMenuItem mntmAdd = ) S
(new) K
( JMenuItem\(addAction\);) p n
(128) # () S 4 T () S 8 T (mntmAdd.setAccelerator\(KeyStroke.getKeyStroke\(KeyEvent.VK_D, InputEvent.META_MASK\)\);) N
(129) # () S 4 T () S 8 T (popupMenu.add\(mntmAdd\);) N
(130) # () N
(131) # () S 4 T () S 8 T (JMenuItem mntmRemove = ) S
(new) K
( JMenuItem\(removeAction\);) p n
(132) # () S 4 T () S 8 T (popupMenu.add\(mntmRemove\);) N
(133) # () N
(134) # () S 4 T () S 8 T (JSeparator separator = ) S
(new) K
( JSeparator\(\);) p n
(135) # () S 4 T () S 8 T (popupMenu.add\(separator\);) N
(136) # () N
(137) # () S 4 T () S 8 T (JMenuItem mntmClearSelection = ) S
(new) K
( JMenuItem\(clearSelectionAction\);) p n
(138) # () S 4 T () S 8 T (popupMenu.add\(mntmClearSelection\);) N
(139) # () N
(140) # () S 4 T () S 8 T (selectionModel = list.getSelectionModel\(\);) N
(141) # () S 4 T () S 8 T (selectionModel.addListSelectionListener\() S
(new) K
( ListSelectionListener\(\)) p n
(142) # () S 4 T () S 8 T ({) N
(143) # () S 4 T () S 8 T () S 12 T (@Override) N
(144) # () S 4 T () S 8 T () S 12 T () S
(public) K
( ) p
(void) k
( valueChanged\(ListSelectionEvent e\)) p n
(145) # () S 4 T () S 8 T () S 12 T ({) N
(146) # () S 4 T () S 8 T () S 12 T () S 16 T (ListSelectionModel lsm = \(ListSelectionModel\) e.getSource\(\);) N
(147) # () N
(148) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(int) k
( firstIndex = e.getFirstIndex\(\);) p n
(149) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(int) k
( lastIndex = e.getLastIndex\(\);) p n
(150) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(boolean) k
( isAdjusting = e.getValueIsAdjusting\(\);) p n
(151) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(/*) c n
(152) # () S 4 T () S 8 T () S 12 T () S 16 T ( * isAdjusting remains true while events like drag n drop are) N
(153) # () S 4 T () S 8 T () S 12 T () S 16 T ( * still processed and becomes false afterwards.) N
(154) # () S 4 T () S 8 T () S 12 T () S 16 T ( */) N
(155) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \() p
(\330) sy
(isAdjusting\)) p n
(156) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(157) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (output.append\(") S
(Event for indexes ) str
(" + firstIndex + ") p
( - ) str
(") p n
(158) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (+ lastIndex + ") S
(; selected indexes:) str
("\);) p n
(159) # () N
(160) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(lsm.isSelectionEmpty\(\)\)) p n
(161) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(162) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (removeAction.setEnabled\() S
(false) k
(\);) p n
(163) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (clearSelectionAction.setEnabled\() S
(false) k
(\);) p n
(164) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (output.append\(") S
( <none>) str
("\);) p n
(ListExampleFrame.java) (Page 2/5) (avril 14, 16 12:58) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(166) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(else) K n
(167) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(168) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (removeAction.setEnabled\() S
(true) k
(\);) p n
(169) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (clearSelectionAction.setEnabled\() S
(true) k
(\);) p n
(170) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(// Find out which indexes are selected.) c n
(171) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(int) k
( minIndex = lsm.getMinSelectionIndex\(\);) p n
(172) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(int) k
( maxIndex = lsm.getMaxSelectionIndex\(\);) p n
(173) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(for) K
( \() p
(int) k
( i = minIndex; i ) p
(\243) sy
( maxIndex; i++\)) p n
(174) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(175) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(if) K
( \(lsm.isSelectedIndex\(i\)\)) p n
(176) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T ({) N
(177) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (output.append\(") S
( ) str
(" + i\);) p n
(178) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (}) N
(179) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(180) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(181) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (output.append\(newline\);) N
(182) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(183) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(184) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(185) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Still adjusting ...) c n
(186) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (output.append\(") S
(Processing ...) str
(" + newline\);) p n
(187) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(188) # () S 4 T () S 8 T () S 12 T (}) N
(189) # () S 4 T () S 8 T (}\);) N
(190) # () S 4 T (}) N
(191) # () N
(192) # () S 4 T () S
(/**) C n
(193) # () S 4 T ( * Color Text renderer for drawing list's elements in colored text) N
(194) # () S 4 T ( * @author davidroussel) N
(195) # () S 4 T ( */) N
(196) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(class) K
( ) p
(ColorTextRenderer) L
( ) p
(extends) K
( JLabel) p n
(197) # () S 4 T () S 8 T () S
(implements) K
( ListCellRenderer<String>) p n
(198) # () S 4 T ({) N
(199) # () S 4 T () S 8 T () S
(private) K
( Color color = ) p
(null) k
(;) p n
(200) # () N
(201) # () S 4 T () S 8 T () S
(/**) C n
(202) # () S 4 T () S 8 T ( * Customized rendering for a ListCell with a color obtained from) N
(203) # () S 4 T () S 8 T ( * the hashCode of the string to display) N
(204) # () S 4 T () S 8 T ( * @see) N
(205) # () S 4 T () S 8 T ( * javax.swing.ListCellRenderer#getListCellRendererComponent\(javax.swing) N
(206) # () S 4 T () S 8 T ( * .JList, java.lang.Object, int, boolean, boolean\)) N
(207) # () S 4 T () S 8 T ( */) N
(208) # () S
() p 4 T () S 8 T (@Override) N
(209) # () S 4 T () S 8 T () S
(public) K
( Component getListCellRendererComponent\() p n
(210) # () S 4 T () S 8 T () S 12 T (JList<? ) S
(extends) K
( String> list, String value, ) p
(int) k
( index,) p n
(211) # () S 4 T () S 8 T () S 12 T () S
(boolean) k
( isSelected, ) p
(boolean) k
( cellHasFocus\)) p n
(212) # () S 4 T () S 8 T ({) N
(213) # () S 4 T () S 8 T () S 12 T (color = list.getForeground\(\);) N
(214) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(value ) p
(\271) sy
( ) p
(null) k
(\)) p n
(215) # () S 4 T () S 8 T () S 12 T ({) N
(216) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(value.length\(\) > 0\)) p n
(217) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(218) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (color = ) S
(new) K
( Color\(value.hashCode\(\)\).darker\(\);) p n
(219) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(220) # () S 4 T () S 8 T () S 12 T (}) N
(221) # () S 4 T () S 8 T () S 12 T (setText\(value\);) N
(222) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(isSelected\)) p n
(223) # () S 4 T () S 8 T () S 12 T ({) N
(224) # () S 4 T () S 8 T () S 12 T () S 16 T (setBackground\(color\);) N
(225) # () S 4 T () S 8 T () S 12 T () S 16 T (setForeground\(list.getSelectionForeground\(\)\);) N
(226) # () S 4 T () S 8 T () S 12 T (}) N
(227) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(228) # () S
() p 4 T () S 8 T () S 12 T ({) N
(229) # () S 4 T () S 8 T () S 12 T () S 16 T (setBackground\(list.getBackground\(\)\);) N
(230) # () S 4 T () S 8 T () S 12 T () S 16 T (setForeground\(color\);) N
(231) # () S 4 T () S 8 T () S 12 T (}) N
(232) # () S 4 T () S 8 T () S 12 T (setEnabled\(list.isEnabled\(\)\);) N
(233) # () S 4 T () S 8 T () S 12 T (setFont\(list.getFont\(\)\);) N
(234) # () S 4 T () S 8 T () S 12 T (setOpaque\() S
(true) k
(\);) p n
(235) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(this) k
(;) p n
(236) # () S 4 T () S 8 T (}) N
(237) # () S 4 T (}) N
(238) # () N
(239) # () S 4 T () S
(/**) C n
(240) # () S 4 T ( * Adds a popup menu to a component) N
(241) # () S 4 T ( * @param component the parent component of the popup menu) N
(242) # () S 4 T ( * @param popup the popup menu to add) N
(243) # () S 4 T ( */) N
(244) # () S
() p 4 T () S
(private) K
( ) p
(static) K
( ) p
(void) k
( addPopup\(Component component, ) p
(final) K
( JPopupMenu popup\)) p n
(245) # () S 4 T ({) N
(246) # () S 4 T () S 8 T (component.addMouseListener\() S
(new) K
( MouseAdapter\(\)) p n
(ListExampleFrame.java) (Page 3/5) (avril 14, 16 12:58) title
border
grestore
(Printed by Pierre) rhead
(src/examples/widgets/ListExampleFrame.java) (32/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4-5) 33
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(247) # () p 4 T () S 8 T ({) N
(248) # () S 4 T () S 8 T () S 12 T (@Override) N
(249) # () S 4 T () S 8 T () S 12 T () S
(public) K
( ) p
(void) k
( mousePressed\(MouseEvent e\)) p n
(250) # () S 4 T () S 8 T () S 12 T ({) N
(251) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(e.isPopupTrigger\(\)\)) p n
(252) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(253) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (showMenu\(e\);) N
(254) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(255) # () S 4 T () S 8 T () S 12 T (}) N
(256) # () N
(257) # () S 4 T () S 8 T () S 12 T (@Override) N
(258) # () S 4 T () S 8 T () S 12 T () S
(public) K
( ) p
(void) k
( mouseReleased\(MouseEvent e\)) p n
(259) # () S 4 T () S 8 T () S 12 T ({) N
(260) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(e.isPopupTrigger\(\)\)) p n
(261) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(262) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (showMenu\(e\);) N
(263) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(264) # () S 4 T () S 8 T () S 12 T (}) N
(265) # () N
(266) # () S 4 T () S 8 T () S 12 T () S
(private) K
( ) p
(void) k
( showMenu\(MouseEvent e\)) p n
(267) # () S 4 T () S 8 T () S 12 T ({) N
(268) # () S 4 T () S 8 T () S 12 T () S 16 T (popup.show\(e.getComponent\(\), e.getX\(\), e.getY\(\)\);) N
(269) # () S 4 T () S 8 T () S 12 T (}) N
(270) # () S 4 T () S 8 T (}\);) N
(271) # () S 4 T (}) N
(272) # () N
(273) # () S 4 T () S
(private) K
( ) p
(class) K
( ) p
(RemoveItemAction) L
( ) p
(extends) K
( AbstractAction) p n
(274) # () S 4 T ({) N
(275) # () S 4 T () S 8 T () S
(public) K
( RemoveItemAction\(\)) p n
(276) # () S 4 T () S 8 T ({) N
(277) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_R, InputEvent.META_MASK\)\);) N
(278) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON, ) S
(new) K
( ImageIcon\(ListExampleFrame.class.getResource\(") p
(/examples/icons/remove) str n
0 T (_user-16.png) S
("\)\)\);) p n
(279) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY, ) S
(new) K
( ImageIcon\(ListExampleFrame.class.getResource\(") p
(/examples/icons/re) str n
0 T (move_user-32.png) S
("\)\)\);) p n
(280) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Remove) str
("\);) p n
(281) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Removes item from list) str
("\);) p n
(282) # () S 4 T () S 8 T (}) N
(283) # () N
(284) # () S 4 T () S 8 T (@Override) N
(285) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent e\)) p n
(286) # () S 4 T () S 8 T ({) N
(287) # () S 4 T () S 8 T () S 12 T (output.append\(") S
(Remove action triggered for indexes : ) str
("\);) p n
(288) # () S 4 T () S 8 T () S 12 T () S
(int) k
( minIndex = selectionModel.getMinSelectionIndex\(\);) p n
(289) # () S 4 T () S 8 T () S 12 T () S
(int) k
( maxIndex = selectionModel.getMaxSelectionIndex\(\);) p n
(290) # () S 4 T () S 8 T () S 12 T (Stack<Integer> toRemove = ) S
(new) K
( Stack<Integer>\(\);) p n
(291) # () S 4 T () S 8 T () S 12 T () S
(for) K
( \() p
(int) k
( i = minIndex; i ) p
(\243) sy
( maxIndex; i++\)) p n
(292) # () S 4 T () S 8 T () S 12 T ({) N
(293) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(selectionModel.isSelectedIndex\(i\)\)) p n
(294) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(295) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (output.append\(") S
( ) str
(" + i\);) p n
(296) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (toRemove.push\() S
(new) K
( Integer\(i\)\);) p n
(297) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(298) # () S 4 T () S 8 T () S 12 T (}) N
(299) # () S 4 T () S 8 T () S 12 T (output.append\(newline\);) N
(300) # () S 4 T () S 8 T () S 12 T () S
(while) K
( \() p
(\330) sy
(toRemove.isEmpty\(\)\)) p n
(301) # () S 4 T () S 8 T () S 12 T ({) N
(302) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(int) k
( index = toRemove.pop\(\).intValue\(\);) p n
(303) # () S 4 T () S 8 T () S 12 T () S 16 T (output.append\(") S
(removing element: ) str
(") p n
(304) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (+ elements.getElementAt\(index\) + newline\);) N
(305) # () S 4 T () S 8 T () S 12 T () S 16 T (elements.remove\(index\);) N
(306) # () S 4 T () S 8 T () S 12 T (}) N
(307) # () S 4 T () S 8 T (}) N
(308) # () S 4 T (}) N
(309) # () N
(310) # () S 4 T () S
(private) K
( ) p
(class) K
( ) p
(ClearSelectionAction) L
( ) p
(extends) K
( AbstractAction) p n
(311) # () S 4 T ({) N
(312) # () S 4 T () S 8 T () S
(public) K
( ClearSelectionAction\(\)) p n
(313) # () S 4 T () S 8 T ({) N
(314) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_X, InputEvent.META_MASK\)\);) N
(315) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY, ) S
(new) K
( ImageIcon\(ListExampleFrame.class.getResource\(") p
(/examples/icons/de) str n
0 T (lete_sign-32.png) S
("\)\)\);) p n
(316) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON, ) S
(new) K
( ImageIcon\(ListExampleFrame.class.getResource\(") p
(/examples/icons/delete_s) str n
0 T (ign-16.png) S
("\)\)\);) p n
(317) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Clear selection) str
("\);) p n
(318) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Unselect selected items) str
("\);) p n
(319) # () S 4 T () S 8 T (}) N
(320) # () N
(321) # () S 4 T () S 8 T (@Override) N
(322) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent e\)) p n
(323) # () S 4 T () S 8 T ({) N
(324) # () S 4 T () S 8 T () S 12 T (output.append\(") S
(Clear selection action triggered) str
(" + newline\);) p n
(ListExampleFrame.java) (Page 4/5) (avril 14, 16 12:58) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(325) # () p 4 T () S 8 T () S 12 T (selectionModel.clearSelection\(\);) N
(326) # () S 4 T () S 8 T (}) N
(327) # () S 4 T (}) N
(328) # () N
(329) # () S 4 T () S
(private) K
( ) p
(class) K
( ) p
(AddAction) L
( ) p
(extends) K
( AbstractAction) p n
(330) # () S 4 T ({) N
(331) # () S 4 T () S 8 T () S
(public) K
( AddAction\(\)) p n
(332) # () S 4 T () S 8 T ({) N
(333) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_A, InputEvent.META_MASK\)\);) N
(334) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON, ) S
(new) K
( ImageIcon\(ListExampleFrame.class.getResource\(") p
(/examples/icons/add_use) str n
0 T (r-16.png) S
("\)\)\);) p n
(335) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY, ) S
(new) K
( ImageIcon\(ListExampleFrame.class.getResource\(") p
(/examples/icons/ad) str n
0 T (d_user-32.png) S
("\)\)\);) p n
(336) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Add...) str
("\);) p n
(337) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Add item) str
("\);) p n
(338) # () S 4 T () S 8 T (}) N
(339) # () N
(340) # () S 4 T () S 8 T (@Override) N
(341) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent e\)) p n
(342) # () S 4 T () S 8 T ({) N
(343) # () S 4 T () S 8 T () S 12 T (output.append\(") S
(Add action triggered) str
(" + newline\);) p n
(344) # () S 4 T () S 8 T () S 12 T (String inputValue = JOptionPane.showInputDialog\(") S
(New item name) str
("\);) p n
(345) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(inputValue ) p
(\271) sy
( ) p
(null) k
(\)) p n
(346) # () S 4 T () S 8 T () S 12 T ({) N
(347) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(inputValue.length\(\) > 0\)) p n
(348) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(349) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (elements.addElement\(inputValue\);) N
(350) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(351) # () S 4 T () S 8 T () S 12 T (}) N
(352) # () S 4 T () S 8 T (}) N
(353) # () S 4 T (}) N
(354) # (}) N
(ListExampleFrame.java) (Page 5/5) (avril 14, 16 12:58) title
border
grestore
(Printed by Pierre) rhead
(src/examples/widgets/ListExampleFrame.java) (33/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 34
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( logger;) p n
(2) # () N
(3) # () S
(import) K
( java.io.IOException;) p n
(4) # () S
(import) K
( java.util.logging.FileHandler;) p n
(5) # () S
(import) K
( java.util.logging.Handler;) p n
(6) # () S
(import) K
( java.util.logging.Level;) p n
(7) # () S
(import) K
( java.util.logging.Logger;) p n
(8) # () S
(import) K
( java.util.logging.SimpleFormatter;) p n
(9) # () N
(10) # () S
(/**) C n
(11) # ( * Logger Factory) N
(12) # ( * @author davidroussel) N
(13) # ( */) N
(14) # () S
(public) K
( ) p
(class) K
( ) p
(LoggerFactory) L n
(15) # () S
({) p n
(16) # () S 4 T () S
(/**) C n
(17) # () S 4 T ( * Factory simple pour un logger de console) N
(18) # () S 4 T ( * @param client la classe cliente du logger. utilis\303\251e pour donner un nom au) N
(19) # () S 4 T ( * logger) N
(20) # () S 4 T ( * @param le niveau de log) N
(21) # () S 4 T ( * @return un logger simple utilisant la console) N
(22) # () S 4 T ( * @throws IOException) N
(23) # () S 4 T ( */) N
(24) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( <E> Logger getConsoleLogger\(Class<E> client, Level level\)) p n
(25) # () S 4 T ({) N
(26) # () S 4 T () S 8 T (Logger logger = ) S
(null) k
(;) p n
(27) # () S 4 T () S 8 T () S
(try) K n
(28) # () S
() p 4 T () S 8 T ({) N
(29) # () S 4 T () S 8 T () S 12 T (logger = getLogger\(client, ) S
(true) k
(, ) p
(null) k
(, ) p
(false) k
(, ) p
(null) k
(, level\);) p n
(30) # () N
(31) # () S 4 T () S 8 T (}) N
(32) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(33) # () S 4 T () S 8 T ({) N
(34) # () S 4 T () S 8 T () S 12 T (System.err.println\(") S
(getConsoleLogger: impossible file IO error) str
("\);) p n
(35) # () S 4 T () S 8 T () S 12 T (e.printStackTrace\(\);) N
(36) # () S 4 T () S 8 T () S 12 T (System.exit\(e.hashCode\(\)\);) N
(37) # () S 4 T () S 8 T (}) N
(38) # () N
(39) # () S 4 T () S 8 T () S
(return) K
( logger;) p n
(40) # () S 4 T (}) N
(41) # () N
(42) # () S 4 T () S
(/**) C n
(43) # () S 4 T ( * Factory pour obtenir un logger ayant un parent sp\303\251cifique) N
(44) # () S 4 T ( * @param client la classe cliente du logger. utilis\303\251e pour donner un nom au) N
(45) # () S 4 T ( * logger) N
(46) # () S 4 T ( * @param parentLogger le logger parent) N
(47) # () S 4 T ( * @param level le niveau de log) N
(48) # () S 4 T ( * @return un logger ayant pour parent le parentLogger) N
(49) # () S 4 T ( */) N
(50) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( <E> Logger getParentLogger\(Class<E> client,) p n
(51) # () S 4 T (                                         Logger parentLogger,) N
(52) # () S 4 T (                                         Level level\)) N
(53) # () S 4 T ({) N
(54) # () S 4 T () S 8 T (Logger logger = ) S
(null) k
(;) p n
(55) # () S 4 T () S 8 T () S
(try) K n
(56) # () S
() p 4 T () S 8 T ({) N
(57) # () S 4 T () S 8 T () S 12 T (logger = getLogger\(client, ) S
(true) k
(, ) p
(null) k
(, ) p
(false) k
(, parentLogger, level\);) p n
(58) # () S 4 T () S 8 T (}) N
(59) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(60) # () S 4 T () S 8 T ({) N
(61) # () S 4 T () S 8 T () S 12 T (System.err.println\(") S
(getParentLogger: impossible file IO error) str
("\);) p n
(62) # () S 4 T () S 8 T () S 12 T (e.printStackTrace\(\);) N
(63) # () S 4 T () S 8 T () S 12 T (System.exit\(e.hashCode\(\)\);) N
(64) # () S 4 T () S 8 T (}) N
(65) # () N
(66) # () S 4 T () S 8 T () S
(return) K
( logger;) p n
(67) # () S 4 T (}) N
(68) # () N
(69) # () S 4 T () S
(/**) C n
(70) # () S 4 T ( * Factory pour obtenir un logger dans un fichier de log) N
(71) # () S 4 T ( * @param client la classe cliente du logger. utilis\303\251e pour donner un nom au) N
(72) # () S 4 T ( * logger) N
(73) # () S 4 T ( * @param fileName nom du fichier de log) N
(74) # () S 4 T ( * @param xmlFormat formattage du fichier de log en XML) N
(75) # () S 4 T ( * @param level le niveau de log) N
(76) # () S 4 T ( * @return un nouveau logger vers un fichier de log) N
(77) # () S 4 T ( * @throws IOException si l'on arrive pas \303\240 ouvrir le fichier de log) N
(78) # () S 4 T ( */) N
(79) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( <E> Logger getFileLogger\(Class<E> client,) p n
(80) # () S 4 T (                                       String fileName,) N
(81) # () S 4 T (                                       ) S
(boolean) k
( xmlFormat,) p n
(82) # () S 4 T (                                       Level level\)) N
(LoggerFactory.java) (Page 1/3) (avril 12, 16 19:03) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T (    ) S
(throws) K
( IOException) p n
(84) # () S 4 T ({) N
(85) # () S 4 T () S 8 T () S
(return) K
( getLogger\(client, ) p
(false) k
(, fileName, xmlFormat, ) p
(null) k
(, level\);) p n
(86) # () S 4 T (}) N
(87) # () N
(88) # () S 4 T () S
(/**) C n
(89) # () S 4 T ( * Factory g\303\251n\303\251rale pour obtenir un logger) N
(90) # () S 4 T ( * @param client la classe cliente du logger. utilis\303\251e pour donner un nom au) N
(91) # () S 4 T ( * logger) N
(92) # () S 4 T ( * @param verbose affichage des logs dans la console) N
(93) # () S 4 T ( * @param logFileName fichier de log \(pas de fichier de log si null\)) N
(94) # () S 4 T ( * @param xmlFormat formattage du fichier de log en XML) N
(95) # () S 4 T ( * @param parentLogger parent logger. Si le parent logger est non null) N
(96) # () S 4 T ( * l'argument verbose n'est pas pris en compte) N
(97) # () S 4 T ( * @param level le niveau de log) N
(98) # () S 4 T ( * @return un nouveau logger si les param\303\250tres le permettent ou bien null si) N
(99) # () S 4 T ( * ce n'est pas le cas) N
(100) # () S 4 T ( * @throws IOException si l'on arrive pas \303\240 ouvrir le fichier de log) N
(101) # () S 4 T ( */) N
(102) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( <E> Logger getLogger\(Class<E> client,) p n
(103) # () S 4 T (                                   ) S
(boolean) k
( verbose,) p n
(104) # () S 4 T (                                   String logFileName,) N
(105) # () S 4 T (                                   ) S
(boolean) k
( xmlFormat,) p n
(106) # () S 4 T (                                   Logger parentLogger,) N
(107) # () S 4 T (                                   Level level\)) N
(108) # () S 4 T (    ) S
(throws) K
( IOException) p n
(109) # () S 4 T ({) N
(110) # () S 4 T () S 8 T (Logger logger = ) S
(null) k
(;) p n
(111) # () N
(112) # () S 4 T () S 8 T () S
(if) K
( \(verbose ) p
(\332) sy
( \(logFileName ) p
(\271) sy
( ) p
(null) k
(\) ) p
(\332) sy
( \(parentLogger ) p
(\271) sy
( ) p
(null) k
(\)\)) p n
(113) # () S 4 T () S 8 T ({) N
(114) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(client ) p
(\271) sy
( ) p
(null) k
(\)) p n
(115) # () S 4 T () S 8 T () S 12 T ({) N
(116) # () S 4 T () S 8 T () S 12 T () S 16 T (String canonicalName = client.getCanonicalName\(\);) N
(117) # () S 4 T () S 8 T () S 12 T () S 16 T (logger = Logger.getLogger\(canonicalName\);) N
(118) # () N
(119) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(parentLogger ) p
(\271) sy
( ) p
(null) k
(\)) p n
(120) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(121) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.setParent\(parentLogger\);) N
(122) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(123) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(124) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(125) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \() p
(\330) sy
(verbose\)) p n
(126) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(127) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(/*) c n
(128) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ( * On ne veut pas que les messages de log aillent dans) N
(129) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ( * la console.) N
(130) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ( */) N
(131) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.setUseParentHandlers\() S
(false) k
(\);) p n
(132) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(133) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(134) # () N
(135) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(logFileName ) p
(\271) sy
( ) p
(null) k
(\)) p n
(136) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(137) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (String filename = logFileName;) N
(138) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(xmlFormat\)) p n
(139) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(140) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(if) K
( \() p
(\330) sy
(logFileName.contains\() p
(new) K
( String\(") p
(xml) str
("\)\)\)) p n
(141) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(142) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (filename = logFileName + ") S
(.xml) str
(";) p n
(143) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(144) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(145) # () N
(146) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Ajout d'un fileHandler au logger) c n
(147) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(try) K n
(148) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(149) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (Handler handler = ) S
(new) K
( FileHandler\(filename\);) p n
(150) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(if) K
( \() p
(\330) sy
(xmlFormat\)) p n
(151) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(152) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(// par d\303\251faut le formattage fichier sera en XML) c n
(153) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(// il faut donc remettre en place un formatteur) c n
(154) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(// simple) c n
(155) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (handler.setFormatter\() S
(new) K
( SimpleFormatter\(\)\);) p n
(156) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(157) # () N
(158) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(// Ajout de ce filehandler au logger) c n
(159) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.addHandler\(handler\);) N
(160) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.info\(") S
(log file created) str
("\);) p n
(161) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(162) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(catch) K
( \(IllegalArgumentException e\)) p n
(163) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(164) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (String message = ") S
(Empty log file name) str
(";) p n
(LoggerFactory.java) (Page 2/3) (avril 12, 16 19:03) title
border
grestore
(Printed by Pierre) rhead
(src/logger/LoggerFactory.java) (34/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3,1) 35
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(message\);) N
(166) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(167) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(throw) K
( e;) p n
(168) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(169) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(catch) K
( \(SecurityException e\)) p n
(170) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(171) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (String message =) N
(172) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (    ") S
(Do not have privileges to open log file ) str
(") p n
(173) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (        + logFileName;) N
(174) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.warning\(message\);) N
(175) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.warning\(e.getLocalizedMessage\(\)\);) N
(176) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(177) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(catch) K
( \(IOException e\)) p n
(178) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(179) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (String message = ") S
(Error opening file ) str
(" + logFileName;) p n
(180) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(message\);) N
(181) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(182) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(throw) K
( e;) p n
(183) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(184) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(185) # () S 4 T () S 8 T () S 12 T (}) N
(186) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(187) # () S
() p 4 T () S 8 T () S 12 T ({) N
(188) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(parentLogger ) p
(\271) sy
( ) p
(null) k
(\)) p n
(189) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(190) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger = parentLogger;) N
(191) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(192) # () S 4 T () S 8 T () S 12 T (}) N
(193) # () S 4 T () S 8 T (}) N
(194) # () N
(195) # () S 4 T () S 8 T () S
(if) K
( \(logger ) p
(\271) sy
( ) p
(null) k
(\)) p n
(196) # () S 4 T () S 8 T ({) N
(197) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(Logger ready) str
("\);) p n
(198) # () S 4 T () S 8 T () S 12 T (logger.setLevel\(level\);) N
(199) # () S 4 T () S 8 T (}) N
(200) # () N
(201) # () S 4 T () S 8 T () S
(return) K
( logger;) p n
(202) # () S 4 T (}) N
(203) # (}) N
(LoggerFactory.java) (Page 3/3) (avril 12, 16 19:03) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/**) C n
(2) # ( * Classe contenant une factory permettant d'instancier plusieurs types de loggers) N
(3) # ( * Un logger permet d'envoyer des messagde de logs \(soit dans la console, soit) N
(4) # ( * dans une fichier\).) N
(5) # ( * @author davidroussel) N
(6) # ( */) N
(7) # () S
(package) K
( logger;) p
(package-info.java) (Page 1/1) (d\303\251c. 17, 14 9:27) title
border
grestore
(Printed by Pierre) rhead
(src/logger/LoggerFactory.java, src/logger/package-info.java) (35/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 36
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( models;) p n
(2) # () N
(3) # () S
(import) K
( java.io.Serializable;) p n
(4) # () S
(import) K
( java.text.SimpleDateFormat;) p n
(5) # () S
(import) K
( java.util.Calendar;) p n
(6) # () S
(import) K
( java.util.Date;) p n
(7) # () S
(import) K
( java.util.Iterator;) p n
(8) # () S
(import) K
( java.util.Vector;) p n
(9) # () N
(10) # () S
(/**) C n
(11) # ( * Classe contenant un message envoy\303\251 par le serveur.) N
(12) # ( * Un message d'un utilisateur est caract\303\251ris\303\251 par :) N
(13) # ( * <ul>) N
(14) # ( * ) S 4 T (<li>la date d'arriv\303\251e du message</li>) N
(15) # ( * ) S 4 T (<li>le contenu du message></li>) N
(16) # ( * ) S 4 T (<li>\(eventuellement\) un author</li>) N
(17) # ( * </ul>) N
(18) # ( * Les message peuvent \303\252tre compar\303\251s entre eux pour obtenir l'ordre des messages) N
(19) # ( * avec la m\303\251thode compareTo\(Message m\). Les crit\303\250re d'ordre des messages) N
(20) # ( * peuvent \303\252tre customiz\303\251s.) N
(21) # ( * @author davidroussel) N
(22) # ( */) N
(23) # () S
(public) K
( ) p
(class) K
( ) p
(Message) L
( ) p
(implements) K
( Serializable, Comparable<Message>) p n
(24) # ({) N
(25) # () S 4 T () S
(/**) C n
(26) # () S 4 T ( * Les diff\303\251rents ordres de comparaison possibles pour un message) N
(27) # () S 4 T ( */) N
(28) # () S
() p 4 T () S
(public) K
( enum MessageOrder) p n
(29) # () S 4 T ({) N
(30) # () S 4 T () S 8 T () S
(/**) C n
(31) # () S 4 T () S 8 T ( * Comparaison suivant l'ordre alphab\303\251tique de l'auteur) N
(32) # () S 4 T () S 8 T ( */) N
(33) # () S
() p 4 T () S 8 T (AUTHOR,) N
(34) # () S 4 T () S 8 T () S
(/**) C n
(35) # () S 4 T () S 8 T ( * Comparaison suivant la date du message) N
(36) # () S 4 T () S 8 T ( */) N
(37) # () S
() p 4 T () S 8 T (DATE,) N
(38) # () S 4 T () S 8 T () S
(/**) C n
(39) # () S 4 T () S 8 T ( * Comparaison suivant l'ordre alphab\303\251tique du contenu du message) N
(40) # () S 4 T () S 8 T ( */) N
(41) # () S
() p 4 T () S 8 T (CONTENT;) N
(42) # () N
(43) # () S 4 T () S 8 T () S
(/**) C n
(44) # () S 4 T () S 8 T ( * Affichage d'un crit\303\250re d'ordre) N
(45) # () S 4 T () S 8 T ( * @return une chaine de caract\303\250re repr\303\251sentant un crit\303\250re d'ordre) N
(46) # () S 4 T () S 8 T ( */) N
(47) # () S
() p 4 T () S 8 T (@Override) N
(48) # () S 4 T () S 8 T () S
(public) K
( String toString\(\)) p n
(49) # () S 4 T () S 8 T ({) N
(50) # () S 4 T () S 8 T () S 12 T () S
(switch) K
( \() p
(this) k
(\)) p n
(51) # () S 4 T () S 8 T () S 12 T ({) N
(52) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( AUTHOR:) p n
(53) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ) p
(new) K
( String\(") p
(Author) str
("\);) p n
(54) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( DATE:) p n
(55) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ) p
(new) K
( String\(") p
(Date) str
("\);) p n
(56) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( CONTENT:) p n
(57) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ) p
(new) K
( String\(") p
(Content) str
("\);) p n
(58) # () S 4 T () S 8 T () S 12 T (}) N
(59) # () S 4 T () S 8 T () S 12 T () S
(throw) K
( ) p
(new) K
( AssertionError\(") p
(MessageOrder: unknown order: ) str
(" + ) p
(this) k
(\);) p n
(60) # () S 4 T () S 8 T (}) N
(61) # () S 4 T (}) N
(62) # () N
(63) # () S 4 T () S
(/**) C n
(64) # () S 4 T ( * Ensemble des crit\303\250res de tri [Initialis\303\251 \303\240 vide]) N
(65) # () S 4 T ( * Les crit\303\250res de tri peuvent contenir une et une seule instance) N
(66) # () S 4 T ( * des diff\303\251rents \303\251l\303\251ments de {@link MessageOrder} dans n'importe quel) N
(67) # () S 4 T ( * ordre.) N
(68) # () S 4 T ( */) N
(69) # () S
() p 4 T () S
(protected) K
( ) p
(static) K
( Vector<MessageOrder> orders = ) p
(new) K
( Vector<MessageOrder>\(\);) p n
(70) # () N
(71) # () S 4 T () S
(/**) C n
(72) # () S 4 T ( * La date d'arriv\303\251e du message) N
(73) # () S 4 T ( */) N
(74) # () S
() p 4 T () S
(private) K
( Date date;) p n
(75) # () N
(76) # () S 4 T () S
(/**) C n
(77) # () S 4 T ( * Le contenu du message) N
(78) # () S 4 T ( */) N
(79) # () S
() p 4 T () S
(private) K
( String content;) p n
(80) # () N
(81) # () S 4 T () S
(/**) C n
(82) # () S 4 T ( * L'auteur du message \(optionnel\).) N
(Message.java) (Page 1/6) (mai 03, 16 18:31) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () C 4 T ( * Un message du serveur peut \303\251ventuellement ne pas avoir d'auteur) N
(84) # () S 4 T ( */) N
(85) # () S
() p 4 T () S
(private) K
( String author;) p n
(86) # () N
(87) # () S 4 T () S
(/**) C n
(88) # () S 4 T ( * Formatteur pour l'affichage de la date des messages) N
(89) # () S 4 T ( */) N
(90) # () S
() p 4 T () S
(protected) K
( ) p
(static) K
( SimpleDateFormat dateFormat =) p n
(91) # () S 4 T (    ) S
(new) K
( SimpleDateFormat\(") p
(yyyy/MM/dd HH:mm:ss) str
("\);) p n
(92) # () N
(93) # () S 4 T () S
(/**) C n
(94) # () S 4 T ( * Constructeur valu\303\251 d'un message) N
(95) # () S 4 T ( * @param date la date d'arriv\303\251e du message) N
(96) # () S 4 T ( * @param content le contenu du message) N
(97) # () S 4 T ( * @param author l'auteur du message) N
(98) # () S 4 T ( */) N
(99) # () S
() p 4 T () S
(public) K
( Message\(Date date, String content, String author\)) p n
(100) # () S 4 T ({) N
(101) # () S 4 T () S 8 T () S
(// date ne doit pas \303\252tre null) c n
(102) # () S
() p 4 T () S 8 T (this.date = \(date ) S
(\271) sy
( ) p
(null) k
( ? date : Calendar.getInstance\(\).getTime\(\)\);) p n
(103) # () S 4 T () S 8 T () S
(// content ne doit pas \303\252tre null) c n
(104) # () S
() p 4 T () S 8 T (this.content = \(content ) S
(\271) sy
( ) p
(null) k
( ? content : ) p
(new) K
( String\(\)\);) p n
(105) # () S 4 T () S 8 T (this.author = author;) N
(106) # () S 4 T (}) N
(107) # () N
(108) # () S 4 T () S
(/**) C n
(109) # () S 4 T ( * Constructeur valu\303\251 d'un message) N
(110) # () S 4 T ( * @param date la date d'arriv\303\251e du message) N
(111) # () S 4 T ( * @param content le contenu du message) N
(112) # () S 4 T ( */) N
(113) # () S
() p 4 T () S
(public) K
( Message\(Date date, String content\)) p n
(114) # () S 4 T ({) N
(115) # () S 4 T () S 8 T () S
(this) k
(\(date, content, ) p
(null) k
(\);) p n
(116) # () S 4 T (}) N
(117) # () N
(118) # () S 4 T () S
(/**) C n
(119) # () S 4 T ( * Constructeur valu\303\251 d'un message.) N
(120) # () S 4 T ( * La date d'arriv\303\251e est implicitement initialis\303\251e \303\240 "maintenant" en) N
(121) # () S 4 T ( * utilisant le calendrier) N
(122) # () S 4 T ( * @param content le contenu du message) N
(123) # () S 4 T ( * @param author l'auteur du message) N
(124) # () S 4 T ( * @see Calendar#getInstance\(\)) N
(125) # () S 4 T ( * @see Calendar#getTime\(\)) N
(126) # () S 4 T ( */) N
(127) # () S
() p 4 T () S
(public) K
( Message\(String content, String author\)) p n
(128) # () S 4 T ({) N
(129) # () S 4 T () S 8 T () S
(this) k
(\() p
(null) k
(, content, author\);) p n
(130) # () S 4 T (}) N
(131) # () N
(132) # () S 4 T () S
(/**) C n
(133) # () S 4 T ( * Constructeur valu\303\251 d'un message.) N
(134) # () S 4 T ( * La date d'arriv\303\251e est implicitement initialis\303\251e \303\240 "maintenant" en) N
(135) # () S 4 T ( * utilisant le calendrier) N
(136) # () S 4 T ( * @param content le contenu du message) N
(137) # () S 4 T ( * @see Calendar#getInstance\(\)) N
(138) # () S 4 T ( * @see Calendar#getTime\(\)) N
(139) # () S 4 T ( */) N
(140) # () S
() p 4 T () S
(public) K
( Message\(String content\)) p n
(141) # () S 4 T ({) N
(142) # () S 4 T () S 8 T () S
(this) k
(\(content, ) p
(null) k
(\);) p n
(143) # () S 4 T (}) N
(144) # () N
(145) # () S 4 T () S
(/**) C n
(146) # () S 4 T ( * Accesseur en lecture de la date du message) N
(147) # () S 4 T ( * @return la date du message) N
(148) # () S 4 T ( */) N
(149) # () S
() p 4 T () S
(public) K
( Date getDate\(\)) p n
(150) # () S 4 T ({) N
(151) # () S 4 T () S 8 T () S
(return) K
( date;) p n
(152) # () S 4 T (}) N
(153) # () N
(154) # () S 4 T () S
(/**) C n
(155) # () S 4 T ( * Accesseur en lecture de la cha\303\256ne formatt\303\251e de la date du message) N
(156) # () S 4 T ( * @return la cha\303\256ne formatt\303\251e de la date du message) N
(157) # () S 4 T ( */) N
(158) # () S
() p 4 T () S
(public) K
( String getFormattedDate\(\)) p n
(159) # () S 4 T ({) N
(160) # () S 4 T () S 8 T () S
(return) K
( dateFormat.format\(date\);) p n
(161) # () S 4 T (}) N
(162) # () N
(163) # () S 4 T () S
(/**) C n
(164) # () S 4 T ( * Accesseur en lecture du contenu du message) N
(Message.java) (Page 2/6) (mai 03, 16 18:31) title
border
grestore
(Printed by Pierre) rhead
(src/models/Message.java) (36/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 37
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () C 4 T ( * @return le contenu du message) N
(166) # () S 4 T ( */) N
(167) # () S
() p 4 T () S
(public) K
( String getContent\(\)) p n
(168) # () S 4 T ({) N
(169) # () S 4 T () S 8 T () S
(return) K
( content;) p n
(170) # () S 4 T (}) N
(171) # () N
(172) # () S 4 T () S
(/**) C n
(173) # () S 4 T ( * Accesseur en lecture de l'auteur du message) N
(174) # () S 4 T ( * @return l'auteur du message ou bien null s'il s'agit d'un) N
(175) # () S 4 T ( * message direct du serveur) N
(176) # () S 4 T ( */) N
(177) # () S
() p 4 T () S
(public) K
( String getAuthor\(\)) p n
(178) # () S 4 T ({) N
(179) # () S 4 T () S 8 T () S
(return) K
( author;) p n
(180) # () S 4 T (}) N
(181) # () N
(182) # () S 4 T () S
(/**) C n
(183) # () S 4 T ( * Indique si un message \303\240 un auteur \(ce qui n'est le cas que pour les) N
(184) # () S 4 T ( * messages envoy\303\251s par les utilisateurs au serveur, les messages de) N
(185) # () S 4 T ( * contr\303\264le diffus\303\251s par le serveur n'ont pas d'auteurs.\)) N
(186) # () S 4 T ( * @return true si le message a un auteur, false autrement) N
(187) # () S 4 T ( */) N
(188) # () S
() p 4 T () S
(public) K
( ) p
(boolean) k
( hasAuthor\(\)) p n
(189) # () S 4 T ({) N
(190) # () S 4 T () S 8 T () S
(return) K
( author ) p
(\271) sy
( ) p
(null) k
(;) p n
(191) # () S 4 T (}) N
(192) # () N
(193) # () S 4 T () S
(/**) C n
(194) # () S 4 T ( * Accesseur en lecture du formatteur de date des messages) N
(195) # () S 4 T ( * @return le formateur de date des messages) N
(196) # () S 4 T ( */) N
(197) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( SimpleDateFormat getDateFormat\(\)) p n
(198) # () S 4 T ({) N
(199) # () S 4 T () S 8 T () S
(return) K
( dateFormat;) p n
(200) # () S 4 T (}) N
(201) # () N
(202) # () S 4 T () S
(/**) C n
(203) # () S 4 T ( * @return le hashcode du message bas\303\251 sur le hashcode de sa date, de son) N
(204) # () S 4 T ( * auteur et de son contenu \(evt utilis\303\251 dans un hashset de messages\)) N
(205) # () S 4 T ( */) N
(206) # () S
() p 4 T (@Override) N
(207) # () S 4 T () S
(public) K
( ) p
(int) k
( hashCode\(\)) p n
(208) # () S 4 T ({) N
(209) # () S 4 T () S 8 T () S
(final) K
( ) p
(int) k
( prime = 31;) p n
(210) # () S 4 T () S 8 T () S
(int) k
( hash = date.hashCode\(\);) p n
(211) # () S 4 T () S 8 T (hash = \(prime * hash\) + content.hashCode\(\);) N
(212) # () S 4 T () S 8 T () S
(if) K
( \(author ) p
(\271) sy
( ) p
(null) k
(\)) p n
(213) # () S 4 T () S 8 T ({) N
(214) # () S 4 T () S 8 T () S 12 T (hash = \(prime * hash\) + author.hashCode\(\);) N
(215) # () S 4 T () S 8 T (}) N
(216) # () S 4 T () S 8 T () S
(return) K
( hash;) p n
(217) # () S 4 T (}) N
(218) # () N
(219) # () S 4 T () S
(/**) C n
(220) # () S 4 T ( * Comparaison binaire avec un autre objet) N
(221) # () S 4 T ( * @param obj l'autre objet \303\240 comparer) N
(222) # () S 4 T ( * @return true si l'autre objet est un message avec les m\303\252mes attributs) N
(223) # () S 4 T ( * @note on peut utiliser la comparaison 3-way pour effectivement comparer) N
(224) # () S 4 T ( * deux messages;) N
(225) # () S 4 T ( */) N
(226) # () S
() p 4 T (@Override) N
(227) # () S 4 T () S
(public) K
( ) p
(boolean) k
( equals\(Object obj\)) p n
(228) # () S 4 T ({) N
(229) # () S 4 T () S 8 T () S
(if) K
( \(obj ) p
(\272) sy
( ) p
(null) k
(\)) p n
(230) # () S 4 T () S 8 T ({) N
(231) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(false) k
(;) p n
(232) # () S 4 T () S 8 T (}) N
(233) # () N
(234) # () S 4 T () S 8 T () S
(if) K
( \(obj ) p
(\272) sy
( ) p
(this) k
(\)) p n
(235) # () S 4 T () S 8 T ({) N
(236) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(true) k
(;) p n
(237) # () S 4 T () S 8 T (}) N
(238) # () N
(239) # () S 4 T () S 8 T () S
(if) K
( \(obj ) p
(instanceof) K
( Message\)) p n
(240) # () S 4 T () S 8 T ({) N
(241) # () S 4 T () S 8 T () S 12 T (Message m = \(Message\) obj;) N
(242) # () N
(243) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(date.equals\(m.date\)\)) p n
(244) # () S 4 T () S 8 T () S 12 T ({) N
(245) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(content.equals\(m.content\)\)) p n
(246) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(Message.java) (Page 3/6) (mai 03, 16 18:31) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(247) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(author ) p
(\271) sy
( ) p
(null) k
(\)) p n
(248) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(249) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( author.equals\(m.author\);) p n
(250) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(251) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(else) K n
(252) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(253) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( m.author ) p
(\272) sy
( ) p
(null) k
(;) p n
(254) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(255) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(256) # () S 4 T () S 8 T () S 12 T (}) N
(257) # () S 4 T () S 8 T (}) N
(258) # () N
(259) # () S 4 T () S 8 T () S
(return) K
( ) p
(false) k
(;) p n
(260) # () S 4 T (}) N
(261) # () N
(262) # () S 4 T () S
(/**) C n
(263) # () S 4 T ( * Affichage du message sous forme de cha\303\256ne de caract\303\250res) N
(264) # () S 4 T ( * @return une cha\303\256ne de caract\303\250re repr\303\251sentant le message sous la forme) N
(265) # () S 4 T ( * [yyyy/mm/dd HH:MM:SS] author > message content) N
(266) # () S 4 T ( */) N
(267) # () S
() p 4 T (@Override) N
(268) # () S 4 T () S
(public) K
( String toString\(\)) p n
(269) # () S 4 T ({) N
(270) # () S 4 T () S 8 T (StringBuffer sb = ) S
(new) K
( StringBuffer\(") p
([) str
("\);) p n
(271) # () N
(272) # () S 4 T () S 8 T (sb.append\(dateFormat.format\(date\)\);) N
(273) # () S 4 T () S 8 T (sb.append\(") S
(] ) str
("\);) p n
(274) # () S 4 T () S 8 T () S
(if) K
( \(author ) p
(\271) sy
( ) p
(null) k
(\)) p n
(275) # () S 4 T () S 8 T ({) N
(276) # () S 4 T () S 8 T () S 12 T (sb.append\(author\);) N
(277) # () S 4 T () S 8 T () S 12 T (sb.append\(") S
( > ) str
("\);) p n
(278) # () S 4 T () S 8 T (}) N
(279) # () S 4 T () S 8 T (sb.append\(content\);) N
(280) # () N
(281) # () S 4 T () S 8 T () S
(return) K
( sb.toString\(\);) p n
(282) # () S 4 T (}) N
(283) # () N
(284) # () S 4 T () S
(/**) C n
(285) # () S 4 T ( * Affichage des crit\303\250res d'ordre utilis\303\251s lors de la comparaison de) N
(286) # () S 4 T ( * messages) N
(287) # () S 4 T ( * @return une cha\303\256ne de caract\303\250res contenant les diff\303\251rents crit\303\250res) N
(288) # () S 4 T ( * d'ordre des messages) N
(289) # () S 4 T ( */) N
(290) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( String toStringOrder\(\)) p n
(291) # () S 4 T ({) N
(292) # () S 4 T () S 8 T (StringBuilder sb = ) S
(new) K
( StringBuilder\(\);) p n
(293) # () S 4 T () S 8 T (sb.append\(") S
({) str
("\);) p n
(294) # () S 4 T () S 8 T () S
(for) K
( \(Iterator<MessageOrder> it = orders.iterator\(\); it.hasNext\(\); \)) p n
(295) # () S 4 T () S 8 T ({) N
(296) # () S 4 T () S 8 T () S 12 T (sb.append\(it.next\(\).toString\(\)\);) N
(297) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(it.hasNext\(\)\)) p n
(298) # () S 4 T () S 8 T () S 12 T ({) N
(299) # () S 4 T () S 8 T () S 12 T () S 16 T (sb.append\(") S
(, ) str
("\);) p n
(300) # () S 4 T () S 8 T () S 12 T (}) N
(301) # () S 4 T () S 8 T (}) N
(302) # () S 4 T () S 8 T (sb.append\(") S
(}) str
("\);) p n
(303) # () N
(304) # () S 4 T () S 8 T () S
(return) K
( sb.toString\(\);) p n
(305) # () S 4 T (}) N
(306) # () N
(307) # () S 4 T () S
(/**) C n
(308) # () S 4 T ( * Comparaison \(3 way : -1, 0, 1\) de deux messages en utilisant les) N
(309) # () S 4 T ( * crit\303\250res de comparaison mis en place dans {@link #orders}) N
(310) # () S 4 T ( * @param m l'autre message \303\240 comparer) N
(311) # () S 4 T ( * @return -1 si le message courant est consid\303\251r\303\251 comme inf\303\251rieur au message) N
(312) # () S 4 T ( * m suivant les crit\303\250res pr\303\251sents dans {@link #orders}, 0 s'ils sont) N
(313) # () S 4 T ( * consid\303\251r\303\251s comme \303\251gaux et 1 si le message courant est consid\303\251r\303\251 comme) N
(314) # () S 4 T ( * sup\303\251rieur au message m, toujours suivant les crit\303\250res mis en place dans) N
(315) # () S 4 T ( * {@link #orders}.) N
(316) # () S 4 T ( */) N
(317) # () S
() p 4 T (@Override) N
(318) # () S 4 T () S
(public) K
( ) p
(int) k
( compareTo\(Message m\)) p n
(319) # () S 4 T ({) N
(320) # () S 4 T () S 8 T () S
(int) k
( compare = 0;) p n
(321) # () S 4 T () S 8 T () S
(if) K
( \(orders.isEmpty\(\)\)) p n
(322) # () S 4 T () S 8 T ({) N
(323) # () S 4 T () S 8 T () S 12 T () S
(// l'ordre par d\303\251faut est la date du message) c n
(324) # () S
() p 4 T () S 8 T () S 12 T (compare = date.compareTo\(m.date\);) N
(325) # () S 4 T () S 8 T (}) N
(326) # () S 4 T () S 8 T () S
(else) K n
(327) # () S
() p 4 T () S 8 T ({) N
(328) # () S 4 T () S 8 T () S 12 T () S
(for) K
( \(Iterator<MessageOrder> it = orders.iterator\(\); it.hasNext\(\);\)) p n
(Message.java) (Page 4/6) (mai 03, 16 18:31) title
border
grestore
(Printed by Pierre) rhead
(src/models/Message.java) (37/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 38
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(329) # () p 4 T () S 8 T () S 12 T ({) N
(330) # () S 4 T () S 8 T () S 12 T () S 16 T (MessageOrder criterium = it.next\(\);) N
(331) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(switch) K
( \(criterium\)) p n
(332) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(333) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(case) K
( AUTHOR:) p n
(334) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(if) K
( \(author ) p
(\271) sy
( ) p
(null) k
(\)) p n
(335) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(336) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(if) K
(\(m.author ) p
(\271) sy
( ) p
(null) k
(\)) p n
(337) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T ({) N
(338) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (compare = author.compareTo\(m.author\);) N
(339) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (}) N
(340) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(else) K n
(341) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T ({) N
(342) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S
(/*) c n
(343) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T ( * Un message avec auteur sera consid\303\251r\303\251 comme) N
(344) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T ( * sup\303\251rieur \303\240 un message sans auteur) N
(345) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T ( */) N
(346) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (compare = 1;) N
(347) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (}) N
(348) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(349) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(else) K
( ) p
(// author == null) c n
(350) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(351) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(if) K
( \(m.author ) p
(\271) sy
( ) p
(null) k
(\)) p n
(352) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T ({) N
(353) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S
(/*) c n
(354) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T ( * un message sans auteur sera consid\303\251r\303\251 comme) N
(355) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T ( * inf\303\251rieur \303\240 un message avec auteur) N
(356) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T ( */) N
(357) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (compare = -1;) N
(358) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (}) N
(359) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(else) K n
(360) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T ({) N
(361) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (compare = 0;) N
(362) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (}) N
(363) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(364) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(365) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(case) K
( DATE:) p n
(366) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (compare = date.compareTo\(m.date\);) N
(367) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(368) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(case) K
( CONTENT:) p n
(369) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (compare = content.compareTo\(m.content\);) N
(370) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(default) K
(:) p n
(371) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(372) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(373) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Si le crit\303\250re courant permet de diff\303\251rentier les messages) c n
(374) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// on renvoie sa valeur tout de suite.) c n
(375) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(compare ) p
(\271) sy
( 0\)) p n
(376) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(377) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(378) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(379) # () S 4 T () S 8 T () S 12 T (}) N
(380) # () S 4 T () S 8 T () S 12 T () S
(// On a termin\303\251 la boucle sans avoir renvoy\303\251 une valeur != 0,) c n
(381) # () S
() p 4 T () S 8 T () S 12 T () S
(// tous les crit\303\250res de comparaison ont \303\251t\303\251 0 \(valeurs \303\251gales\)) c n
(382) # () S
() p 4 T () S 8 T (}) N
(383) # () S 4 T () S 8 T () S
(return) K
( compare;) p n
(384) # () S 4 T (}) N
(385) # () N
(386) # () S 4 T () S
(/**) C n
(387) # () S 4 T ( * Ajout d'un crit\303\250re de tri aux crit\303\250res de tri) N
(388) # () S 4 T ( * @param o le crit\303\250re \303\240 ajouter) N
(389) # () S 4 T ( * @return true si le crit\303\250re de tri n'\303\251tait pas d\303\251j\303\240 pr\303\251sent dans) N
(390) # () S 4 T ( * l'ensemble et qu'il a pu \303\252tre ajout\303\251, false sinon.) N
(391) # () S 4 T ( */) N
(392) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(boolean) k
( addOrder\(MessageOrder o\)) p n
(393) # () S 4 T ({) N
(394) # () S 4 T () S 8 T () S
(if) K
( \(o ) p
(\271) sy
( ) p
(null) k
(\)) p n
(395) # () S 4 T () S 8 T ({) N
(396) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \() p
(\330) sy
(orders.contains\(o\)\)) p n
(397) # () S 4 T () S 8 T () S 12 T ({) N
(398) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( orders.add\(o\);) p n
(399) # () S 4 T () S 8 T () S 12 T (}) N
(400) # () S 4 T () S 8 T (}) N
(401) # () S 4 T () S 8 T () S
(return) K
( ) p
(false) k
(;) p n
(402) # () S 4 T (}) N
(403) # () N
(404) # () S 4 T () S
(/**) C n
(405) # () S 4 T ( * Retrait d'un crit\303\250re de tri aux crit\303\250res de tri) N
(406) # () S 4 T ( * @param o le crit\303\250re de tri \303\240 retirer) N
(407) # () S 4 T ( * @return true si le cri\303\250re de tri \303\251tait pr\303\251sent dans l'ensemble des) N
(408) # () S 4 T ( * crit\303\250res et qu'il a \303\251t\303\251 retir\303\251, false sinon.) N
(409) # () S 4 T ( */) N
(410) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(boolean) k
( removeOrder\(MessageOrder o\)) p n
(Message.java) (Page 5/6) (mai 03, 16 18:31) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(411) # () p 4 T ({) N
(412) # () S 4 T () S 8 T () S
(if) K
( \(o ) p
(\271) sy
( ) p
(null) k
(\)) p n
(413) # () S 4 T () S 8 T ({) N
(414) # () S 4 T () S 8 T () S 12 T () S
(return) K
( orders.remove\(o\);) p n
(415) # () S 4 T () S 8 T (}) N
(416) # () S 4 T () S 8 T () S
(return) K
( ) p
(false) k
(;) p n
(417) # () S 4 T (}) N
(418) # () N
(419) # () S 4 T () S
(/**) C n
(420) # () S 4 T ( * Effacement de l'ensemble des crit\303\250res de tri) N
(421) # () S 4 T ( */) N
(422) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( clearOrders\(\)) p n
(423) # () S 4 T ({) N
(424) # () S 4 T () S 8 T (orders.clear\(\);) N
(425) # () S 4 T (}) N
(426) # (}) N
(Message.java) (Page 6/6) (mai 03, 16 18:31) title
border
grestore
(Printed by Pierre) rhead
(src/models/Message.java) (38/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 39
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( models;) p n
(2) # () N
(3) # () S
(import) K
( java.util.Iterator;) p n
(4) # () S
(import) K
( java.util.SortedSet;) p n
(5) # () S
(import) K
( java.util.TreeSet;) p n
(6) # () N
(7) # () S
(import) K
( javax.swing.AbstractListModel;) p n
(8) # () N
(9) # () S
(/**) C n
(10) # ( * ListModel contenant des noms uniques \(toujours tri\303\251 gr\303\242ce \303\240 un TreeSet par) N
(11) # ( * exemple\).) N
(12) # ( * L'acc\303\250s \303\240 la liste de noms doit \303\252tre thread safe \(c'\303\240d : plusieurs threads) N
(13) # ( * peuvent acc\303\251der concurrentiellement \303\240 la liste de noms sans que celle ci se) N
(14) # ( * retrouve dans un \303\251tat incoh\303\251rent\) : Les modifications du Set interne se font) N
(15) # ( * toujours dans un bloc synchronized\(nameSet\) {...}.) N
(16) # ( * L'ajout ou le retrait d'un \303\251l\303\251ment dans l'ensemble de nom est accompagn\303\251) N
(17) # ( * d'un fireContentsChanged sur l'ensemble des \303\251l\303\251ments de la liste \(\303\240 cause) N
(18) # ( * du tri implicite des \303\251l\303\251ments\) ce qui permet au List Model de notifier) N
(19) # ( * tout widget dans lequel serait contenu ce ListModel.) N
(20) # ( * @see {@link javax.swing.AbstractListModel}) N
(21) # ( */) N
(22) # () S
(public) K
( ) p
(class) K
( ) p
(NameSetListModel) L
( ) p
(extends) K
( AbstractListModel<String>) p n
(23) # ({) N
(24) # () S 4 T () S
(/**) C n
(25) # () S 4 T ( * Ensemble de noms tri\303\251s) N
(26) # () S 4 T ( */) N
(27) # () S
() p 4 T () S
(private) K
( SortedSet<String> nameSet;) p n
(28) # () N
(29) # () S 4 T () S
(/**) C n
(30) # () S 4 T ( * Constructeur) N
(31) # () S 4 T ( */) N
(32) # () S
() p 4 T () S
(public) K
( NameSetListModel\(\)) p n
(33) # () S 4 T ({) N
(34) # () S 4 T () S 8 T (nameSet = ) S
(new) K
( TreeSet<String>\(\);) p n
(35) # () S 4 T (}) N
(36) # () N
(37) # () S 4 T () S
(/**) C n
(38) # () S 4 T ( * Ajout d'un \303\251l\303\251ment) N
(39) # () S 4 T ( * @param value la valeur \303\240 ajouter) N
(40) # () S 4 T ( * @return true si l'\303\251l\303\251ment \303\240 ajouter est non null et qu'il n'\303\251tait pas) N
(41) # () S 4 T ( * d\303\251j\303\240 pr\303\251sent dans l'ensemble et false sinon.) N
(42) # () S 4 T ( * @warning Ne pas oublier de faire un) N
(43) # () S 4 T ( * {@link #fireContentsChanged\(Object, int, int\)} lorsqu'un nom est) N
(44) # () S 4 T ( * effectivement ajout\303\251 \303\240 l'ensemble des noms) N
(45) # () S 4 T ( */) N
(46) # () S
() p 4 T () S
(public) K
( ) p
(boolean) k
( add\(String value\)) p n
(47) # () S 4 T ({) N
(48) # () S 4 T () S 8 T () S
(if) K
( \() p
(\330) sy
(nameSet.contains\(value\) ) p
(\331) sy
( value ) p
(\271) sy
( ) p
(null) k
(\) {) p n
(49) # () S 4 T () S 8 T () S 12 T () S
(synchronized) K
( \(nameSet\) {) p n
(50) # () S 4 T () S 8 T () S 12 T () S 16 T (nameSet.add\(value\);) N
(51) # () S 4 T () S 8 T () S 12 T () S 16 T (fireContentsChanged\() S
(this) k
(, 0, nameSet.size\(\) - 1\);) p n
(52) # () S 4 T () S 8 T () S 12 T (}) N
(53) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(true) k
(;) p n
(54) # () S 4 T () S 8 T (} ) S
(else) K
( {) p n
(55) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(false) k
(;) p n
(56) # () S 4 T () S 8 T (}) N
(57) # () S 4 T (}) N
(58) # () N
(59) # () S 4 T () S
(/**) C n
(60) # () S 4 T ( * Teste si l'ensemble de noms contient le nom pass\303\251 en argument) N
(61) # () S 4 T ( * @param value le nom \303\240 rechercher) N
(62) # () S 4 T ( * @return true si l'ensemble de noms contient "value", false sinon.) N
(63) # () S 4 T ( */) N
(64) # () S
() p 4 T () S
(public) K
( ) p
(boolean) k
( contains\(String value\)) p n
(65) # () S 4 T ({) N
(66) # () S 4 T () S 8 T () S
(return) K
( nameSet.contains\(value\);) p n
(67) # () S 4 T (}) N
(68) # () N
(69) # () S 4 T () S
(/**) C n
(70) # () S 4 T ( * Retrait de l'\303\251l\303\251ment situ\303\251 \303\240 l'index index) N
(71) # () S 4 T ( * @param index l'index de l'\303\251l\303\251ment \303\240 supprimer) N
(72) # () S 4 T ( * @return true si l'\303\251l\303\251ment a \303\251t\303\251 supprim\303\251, false sinon) N
(73) # () S 4 T ( * @warning Ne pas oublier de faire un) N
(74) # () S 4 T ( * {@link #fireContentsChanged\(Object, int, int\)} lorsqu'un nom est) N
(75) # () S 4 T ( * effectivement supprim\303\251 de l'ensemble des noms) N
(76) # () S 4 T ( */) N
(77) # () S
() p 4 T () S
(public) K
( ) p
(boolean) k
( remove\() p
(int) k
( index\)) p n
(78) # () S 4 T ({) N
(79) # () S 4 T () S 8 T (Iterator<String> it = this.nameSet.iterator\(\);) N
(80) # () S 4 T () S 8 T () S
(boolean) k
( ret = ) p
(false) k
(;) p n
(81) # () S 4 T () S 8 T () N
(82) # () S 4 T () S 8 T () S
(synchronized) K
( \(nameSet\) {) p n
(NameSetListModel.java) (Page 1/3) (mai 22, 17 17:58) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S 8 T () S 12 T () S
(for) K
( \() p
(int) k
( count = 0; it.hasNext\(\); count++\) {) p n
(84) # () S 4 T () S 8 T () S 12 T () S 16 T (it.next\(\);) N
(85) # () S 4 T () S 8 T () S 12 T () S 16 T () N
(86) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(count ) p
(\272) sy
( index\) {) p n
(87) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (it.remove\(\);) N
(88) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (fireContentsChanged\() S
(this) k
(, 0, nameSet.size\(\) - 1\);) p n
(89) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (ret = ) S
(true) k
(;) p n
(90) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () N
(91) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(92) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(93) # () S 4 T () S 8 T () S 12 T (}) N
(94) # () S 4 T () S 8 T (}) N
(95) # () S 4 T () S 8 T () N
(96) # () S 4 T () S 8 T () S
(return) K
( ret;) p n
(97) # () S 4 T (}) N
(98) # () N
(99) # () S 4 T () S
(/**) C n
(100) # () S 4 T ( * Efface l'ensemble du contenu de la liste) N
(101) # () S 4 T ( * @warning ne pas oublier de faire un) N
(102) # () S 4 T ( * {@link #fireContentsChanged\(Object, int, int\)} lorsque le contenu est) N
(103) # () S 4 T ( * effectivement effac\303\251 \(si non vide\)) N
(104) # () S 4 T ( */) N
(105) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( clear\(\)) p n
(106) # () S 4 T ({) N
(107) # () S 4 T () S 8 T () S
(synchronized) K
( \(nameSet\) {) p n
(108) # () S 4 T () S 8 T () S 12 T (nameSet.clear\(\);) N
(109) # () S 4 T () S 8 T () S 12 T (fireContentsChanged\() S
(this) k
(, 0, nameSet.size\(\)-1\);) p n
(110) # () S 4 T () S 8 T (}) N
(111) # () S 4 T (}) N
(112) # () N
(113) # () S 4 T () S
(/**) C n
(114) # () S 4 T ( * Nombre d'\303\251l\303\251ments dans le ListModel) N
(115) # () S 4 T ( * @return le nombre d'\303\251l\303\251ments dans le mod\303\250le de la liste) N
(116) # () S 4 T ( * @see javax.swing.ListModel#getSize\(\)) N
(117) # () S 4 T ( */) N
(118) # () S
() p 4 T (@Override) N
(119) # () S 4 T () S
(public) K
( ) p
(int) k
( getSize\(\)) p n
(120) # () S 4 T ({) N
(121) # () S 4 T () S 8 T () S
(return) K
( nameSet.size\(\);) p n
(122) # () S 4 T (}) N
(123) # () N
(124) # () S 4 T () S
(/**) C n
(125) # () S 4 T ( * Accesseur \303\240 l'\303\251l\303\251ment index\303\251) N
(126) # () S 4 T ( * @param l'index de l'\303\251l\303\251ment recherch\303\251) N
(127) # () S 4 T ( * @return la chaine de caract\303\250re correponsdant \303\240 l'\303\251l\303\251ment recherch\303\251 ou) N
(128) # () S 4 T ( * bien null si celui ci n'existe pas) N
(129) # () S 4 T ( * @see javax.swing.ListModel#getElementAt\(int\)) N
(130) # () S 4 T ( */) N
(131) # () S
() p 4 T (@Override) N
(132) # () S 4 T () S
(public) K
( String getElementAt\() p
(int) k
( index\)) p n
(133) # () S 4 T ({) N
(134) # () S 4 T () S 8 T () S
(int) k
( count = 0;) p n
(135) # () S 4 T () S 8 T () N
(136) # () S 4 T () S 8 T () S
(for) K
( \(String element : nameSet\)) p n
(137) # () S 4 T () S 8 T ({) N
(138) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(count ) p
(\272) sy
( index\)) p n
(139) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( element;) p n
(140) # () S 4 T () S 8 T () S 12 T (count++;) N
(141) # () S 4 T () S 8 T (}) N
(142) # () S 4 T () S 8 T () N
(143) # () S 4 T () S 8 T () S
(return) K
( ) p
(null) k
(;) p n
(144) # () S 4 T (}) N
(145) # () N
(146) # () S 4 T () S
(/**) C n
(147) # () S 4 T ( * Repr\303\251sentation sous forme de chaine de caract\303\250res de la liste de) N
(148) # () S 4 T ( * noms unique et tri\303\251s.) N
(149) # () S 4 T ( * @return une chaine de caract\303\250res repr\303\251setant la liste des noms uniques) N
(150) # () S 4 T ( * et tri\303\251s) N
(151) # () S 4 T ( */) N
(152) # () S
() p 4 T (@Override) N
(153) # () S 4 T () S
(public) K
( String toString\(\)) p n
(154) # () S 4 T ({) N
(155) # () S 4 T () S 8 T (StringBuilder sb = ) S
(new) K
( StringBuilder\(\);) p n
(156) # () S 4 T () S 8 T () S
(for) K
( \(Iterator<String> it = nameSet.iterator\(\); it.hasNext\(\);\)) p n
(157) # () S 4 T () S 8 T ({) N
(158) # () S 4 T () S 8 T () S 12 T (sb.append\(it.next\(\)\);) N
(159) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(it.hasNext\(\)\)) p n
(160) # () S 4 T () S 8 T () S 12 T ({) N
(161) # () S 4 T () S 8 T () S 12 T () S 16 T (sb.append\(") S
(, ) str
("\);) p n
(162) # () S 4 T () S 8 T () S 12 T (}) N
(163) # () S 4 T () S 8 T (}) N
(164) # () S 4 T () S 8 T () S
(return) K
( sb.toString\(\);) p n
(NameSetListModel.java) (Page 2/3) (mai 22, 17 17:58) title
border
grestore
(Printed by Pierre) rhead
(src/models/NameSetListModel.java) (39/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3,1,1) 40
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T (}) N
(166) # () S 4 T () N
(167) # () S 4 T () S
(// indexOf element s'il existe ou -1 sinon) c n
(168) # () S
() p 4 T () S
(public) K
( ) p
(int) k
( indexOf\(String str\)) p n
(169) # () S 4 T ({) N
(170) # () S 4 T () S 8 T () S
(int) k
( index = 0;) p n
(171) # () S 4 T () S 8 T () N
(172) # () S 4 T () S 8 T () S
(for) K
(\(String elt : nameSet\) {) p n
(173) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(elt.equals\(str\)\)) p n
(174) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( index;) p n
(175) # () S 4 T () S 8 T () S 12 T (index++;) N
(176) # () S 4 T () S 8 T (}) N
(177) # () S 4 T () S 8 T () N
(178) # () S 4 T () S 8 T () S
(return) K
( -1;) p n
(179) # () S 4 T (}) N
(180) # (}) N
(NameSetListModel.java) (Page 3/3) (mai 22, 17 17:58) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( models;) p n
(2) # () N
(3) # () S
(/**) C n
(4) # ( * Sous-package contenant les classes des mod\303\250les de donn\303\251es manipul\303\251s.) N
(5) # ( * En l'occurrence) N
(6) # ( * <ul>) N
(7) # ( * <li>{@link models.Message} une classe repr\303\251sentant les messages envoy\303\251s) N
(8) # ( * par les utilisateurs</li>) N
(9) # ( * <li>{@link models.NameSetListModel} une classe repr\303\251sentant des noms) N
(10) # ( * d'utilisateurs uniques et toujours tri\303\251s dans une liste d'utilisateurs \(par) N
(11) # ( * exemple une {@link javax.swing.JList}\)</li>) N
(12) # ( * <li> {@link models.AuthorListFilter} une classe permettant de filtrer) N
(13) # ( * un flux de messages en v\303\251rifiant si un message particulier contient un) N
(14) # ( * auteur qui fait partie de la liste des auteurs r\303\251f\303\251renc\303\251s dans ce filtre</li>) N
(15) # ( * </ul>) N
(16) # ( */) N
(package-info.java) (Page 1/1) (avril 17, 16 17:40) title
border
grestore
(Printed by Pierre) rhead
(src/models/NameSetListModel.java, src/models/AuthorListFilter.java, src/models/package-info.java) (40/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 41
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( widgets;) p n
(2) # () N
(3) # () S
(import) K
( java.awt.Color;) p n
(4) # () S
(import) K
( java.awt.Dimension;) p n
(5) # () S
(import) K
( java.awt.HeadlessException;) p n
(6) # () S
(import) K
( java.io.IOException;) p n
(7) # () S
(import) K
( java.io.PipedInputStream;) p n
(8) # () S
(import) K
( java.io.PipedOutputStream;) p n
(9) # () S
(import) K
( java.io.PrintWriter;) p n
(10) # () S
(import) K
( java.util.Map;) p n
(11) # () S
(import) K
( java.util.Random;) p n
(12) # () S
(import) K
( java.util.TreeMap;) p n
(13) # () S
(import) K
( java.util.logging.Level;) p n
(14) # () S
(import) K
( java.util.logging.Logger;) p n
(15) # () N
(16) # () S
(import) K
( javax.swing.JFrame;) p n
(17) # () S
(import) K
( javax.swing.JTextPane;) p n
(18) # () S
(import) K
( javax.swing.text.Style;) p n
(19) # () S
(import) K
( javax.swing.text.StyledDocument;) p n
(20) # () N
(21) # () S
(import) K
( logger.LoggerFactory;) p n
(22) # () N
(23) # () S
(public) K
( ) p
(abstract) K
( ) p
(class) K
( ) p
(AbstractClientFrame) L
( ) p
(extends) K
( JFrame ) p
(implements) K
( Runnable) p n
(24) # ({) N
(25) # () S 4 T () S
(/**) C n
(26) # () S 4 T ( * Etat d'ex\303\251cution du run pour \303\251couter les messages en provenance du) N
(27) # () S 4 T ( * serveur) N
(28) # () S 4 T ( */) N
(29) # () S
() p 4 T () S
(protected) K
( Boolean commonRun;) p n
(30) # () N
(31) # () S 4 T () S
(/**) C n
(32) # () S 4 T ( * Flux d'entr\303\251e pour lire les messages du serveur) N
(33) # () S 4 T ( */) N
(34) # () S
() p 4 T () S
(protected) K
( ) p
(final) K
( PipedInputStream inPipe;) p n
(35) # () N
(36) # () S 4 T () S
(/**) C n
(37) # () S 4 T ( * Ecrivain vers le flux de sortie Ecrit le contenu du {@link #txtFieldSend}) N
(38) # () S 4 T ( * dans le {@link #outPipe}) N
(39) # () S 4 T ( */) N
(40) # () S
() p 4 T () S
(protected) K
( ) p
(final) K
( PrintWriter outPW;) p n
(41) # () N
(42) # () S 4 T () S
(/**) C n
(43) # () S 4 T ( * Flux de sortie pour envoyer le contenu du message) N
(44) # () S 4 T ( */) N
(45) # () S
() p 4 T () S
(protected) K
( ) p
(final) K
( PipedOutputStream outPipe;) p n
(46) # () N
(47) # () S 4 T () S
(/**) C n
(48) # () S 4 T ( * Logger pour afficher les messages ou les rediriger dans un fichier de log) N
(49) # () S 4 T ( */) N
(50) # () S
() p 4 T () S
(protected) K
( Logger logger;) p n
(51) # () N
(52) # () S 4 T () S
(/**) C n
(53) # () S 4 T ( * Le document sous-jacent d'un {@link JTextPane} dans lequel on \303\251crira) N
(54) # () S 4 T ( * les messages) N
(55) # () S 4 T ( */) N
(56) # () S
() p 4 T () S
(protected) K
( StyledDocument document;) p n
(57) # () N
(58) # () S 4 T () S
(/**) C n
(59) # () S 4 T ( * Le style du document {@link #document}) N
(60) # () S 4 T ( */) N
(61) # () S
() p 4 T () S
(protected) K
( Style documentStyle;) p n
(62) # () N
(63) # () S 4 T () S
(/**) C n
(64) # () S 4 T ( * La couleur par d\303\251faut du texte {@link #documentStyle}) N
(65) # () S 4 T ( */) N
(66) # () S
() p 4 T () S
(protected) K
( Color defaultColor;) p n
(67) # () N
(68) # () S 4 T () S
(/**) C n
(69) # () S 4 T ( * Map associant une couleur \303\240 un nom afin que l'on n'ai pas \303\240 g\303\251n\303\251rer) N
(70) # () S 4 T ( * une couleur \303\240 chaque fois que l'on a besoin d'une couleur pour un nom.) N
(71) # () S 4 T ( * Cette map est mise \303\240 jour dans {@link #getColorFromName\(String\)}) N
(72) # () S 4 T ( */) N
(73) # () S
() p 4 T () S
(protected) K
( Map<String, Color> colorMap;) p n
(74) # () N
(75) # () S 4 T () S
(/**) C n
(76) # () S 4 T ( * Constructeur [prot\303\251g\303\251] de la fen\303\252tre de chat abstraite) N
(77) # () S 4 T ( * @param name le nom de l'utilisateur) N
(78) # () S 4 T ( * @param host l'h\303\264te sur lequel on est connect\303\251) N
(79) # () S 4 T ( * @param commonRun \303\251tat d'ex\303\251cution des autres threads du client) N
(80) # () S 4 T ( * @param parentLogger le logger parent pour les messages) N
(81) # () S 4 T ( * @throws HeadlessException) N
(82) # () S 4 T ( */) N
(AbstractClientFrame.java) (Page 1/4) (mai 15, 17 16:56) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S
(protected) K
( AbstractClientFrame\(String name,) p n
(84) # () S 4 T (                              String host,) N
(85) # () S 4 T (                              Boolean commonRun,) N
(86) # () S 4 T (                              Logger parentLogger\)) N
(87) # () S 4 T () S 8 T () S
(throws) K
( HeadlessException) p n
(88) # () S 4 T ({) N
(89) # () S 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(90) # () S
() p 4 T () S 8 T () S
(// Logger) c n
(91) # () S
() p 4 T () S 8 T () S
(//---------------------------------------------------------------------) c n
(92) # () S
() p 4 T () S 8 T (logger = LoggerFactory.getParentLogger\(getClass\(\),) N
(93) # () S 4 T () S 8 T (                                       parentLogger,) N
(94) # () S 4 T () S 8 T (                                       \(parentLogger ) S
(\272) sy
( ) p
(null) k
( ?) p n
(95) # () S 4 T () S 8 T (                                    ) S 48 T (Level.WARNING :) N
(96) # () S 4 T () S 8 T (                                        parentLogger.getLevel\(\)\)\);) N
(97) # () N
(98) # () S 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(99) # () S
() p 4 T () S 8 T () S
(// Common run avec d'autres threads) c n
(100) # () S
() p 4 T () S 8 T () S
(//---------------------------------------------------------------------) c n
(101) # () S
() p 4 T () S 8 T () S
(if) K
( \(commonRun ) p
(\271) sy
( ) p
(null) k
(\)) p n
(102) # () S 4 T () S 8 T ({) N
(103) # () S 4 T () S 8 T () S 12 T (this.commonRun = commonRun;) N
(104) # () S 4 T () S 8 T (}) N
(105) # () S 4 T () S 8 T () S
(else) K n
(106) # () S
() p 4 T () S 8 T ({) N
(107) # () S 4 T () S 8 T () S 12 T (this.commonRun = Boolean.TRUE;) N
(108) # () S 4 T () S 8 T (}) N
(109) # () N
(110) # () S 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(111) # () S
() p 4 T () S 8 T () S
(// Flux d'IO) c n
(112) # () S
() p 4 T () S 8 T () S
(//---------------------------------------------------------------------) c n
(113) # () S
() p 4 T () S 8 T (inPipe = ) S
(new) K
( PipedInputStream\(\);) p n
(114) # () S 4 T () S 8 T (logger.info\(") S
(AbstractClientFrame : PipedInputStream Created) str
("\);) p n
(115) # () N
(116) # () S 4 T () S 8 T (outPipe = ) S
(new) K
( PipedOutputStream\(\);) p n
(117) # () S 4 T () S 8 T (logger.info\(") S
(AbstractClientFrame : PipedOutputStream Created) str
("\);) p n
(118) # () S 4 T () S 8 T (outPW = ) S
(new) K
( PrintWriter\(outPipe, ) p
(true) k
(\);) p n
(119) # () S 4 T () S 8 T () S
(if) K
( \(outPW.checkError\(\)\)) p n
(120) # () S 4 T () S 8 T ({) N
(121) # () S 4 T () S 8 T () S 12 T (logger.warning\(") S
(ClientFrame: Output PrintWriter has errors) str
("\);) p n
(122) # () S 4 T () S 8 T (}) N
(123) # () S 4 T () S 8 T () S
(else) K n
(124) # () S
() p 4 T () S 8 T ({) N
(125) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(AbstractClientFrame : Printwriter to PipedOutputStream Created) str
("\);) p n
(126) # () S 4 T () S 8 T (}) N
(127) # () N
(128) # () S 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(129) # () S
() p 4 T () S 8 T () S
(// Window setup) c n
(130) # () S
() p 4 T () S 8 T () S
(//---------------------------------------------------------------------) c n
(131) # () S
() p 4 T () S 8 T () S
(if) K
( \(name ) p
(\271) sy
( ) p
(null) k
(\)) p n
(132) # () S 4 T () S 8 T ({) N
(133) # () S 4 T () S 8 T () S 12 T (setTitle\(name\);) N
(134) # () S 4 T () S 8 T (}) N
(135) # () N
(136) # () S 4 T () S 8 T (setPreferredSize\() S
(new) K
( Dimension\(400, 200\)\);) p n
(137) # () S 4 T () S 8 T (setDefaultCloseOperation\(JFrame.EXIT_ON_CLOSE\);) N
(138) # () N
(139) # () S 4 T () S 8 T (document = ) S
(null) k
(;) p n
(140) # () S 4 T () S 8 T (documentStyle = ) S
(null) k
(;) p n
(141) # () S 4 T () S 8 T (defaultColor = Color.BLACK;) N
(142) # () S 4 T () S 8 T (colorMap = ) S
(new) K
( TreeMap<String, Color>\(\);) p n
(143) # () S 4 T (}) N
(144) # () N
(145) # () S 4 T () S
(/**) C n
(146) # () S 4 T ( * Envoi d'un message. Envoi d'un message dans le {@link #outPipe} \(si celui) N
(147) # () S 4 T ( * ci est non null\) en utilisant le {@link #outPW}) N
(148) # () S 4 T ( * @param le message \303\240 envoyer) N
(149) # () S 4 T ( */) N
(150) # () S
() p 4 T () S
(protected) K
( ) p
(void) k
( sendMessage\(String message\)) p n
(151) # () S 4 T ({) N
(152) # () S 4 T () S 8 T (logger.info\(") S
(ClientFrame::sendMessage writing out: ) str
(") p n
(153) # () S 4 T () S 8 T (    + \(message ) S
(\272) sy
( ) p
(null) k
( ? ") p
(NULL) str
(" : message\)\);) p n
(154) # () S 4 T () S 8 T () S
(/*) c n
(155) # () S 4 T () S 8 T ( * DONE envoi du message dans le outPW et v\303\251rification du statut) N
(156) # () S 4 T () S 8 T ( * d'erreur du #outPW \(si c'est le cas on ajoute un warning au logger\).) N
(157) # () S 4 T () S 8 T ( */) N
(158) # () S
() p 4 T () S 8 T () S
(if) K
( \(message ) p
(\271) sy
( ) p
(null) k
(\)) p n
(159) # () S 4 T () S 8 T ({) N
(160) # () S 4 T () S 8 T () S 12 T (outPW.println\(message\);) N
(161) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(outPW.checkError\(\)\)) p n
(162) # () S 4 T () S 8 T () S 12 T ({) N
(163) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ClientFrame::sendMessage: error writing) str
("\);) p n
(164) # () S 4 T () S 8 T () S 12 T (}) N
(AbstractClientFrame.java) (Page 2/4) (mai 15, 17 16:56) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/AbstractClientFrame.java) (41/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 42
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T (}) N
(166) # () S 4 T (}) N
(167) # () N
(168) # () S 4 T () S
(/**) C n
(169) # () S 4 T ( * Couleur d'un texte d'apr\303\250s le contenu du texte.) N
(170) # () S 4 T ( * @param name le texte) N
(171) # () S 4 T ( * @return un couleur al\303\251atoire initialis\303\251e avec le hashCode du texte ou) N
(172) # () S 4 T ( * bien null si name est vide ou null) N
(173) # () S 4 T ( */) N
(174) # () S
() p 4 T () S
(protected) K
( Color getColorFromName\(String name\)) p n
(175) # () S 4 T ({) N
(176) # () S 4 T () S 8 T () S
(/*) c n
(177) # () S 4 T () S 8 T ( * DONE renvoyer une couleur \(pas trop claire\) d'apr\303\250s le nom) N
(178) # () S 4 T () S 8 T ( * fourni en argument. Calcule une couleur en utilisant le hashCode du) N
(179) # () S 4 T () S 8 T ( * texte pour initialiser un Random, le nextInt de ce Random nous) N
(180) # () S 4 T () S 8 T ( * fournira alors un entier utilis\303\251 pour cr\303\251er une Color. On pourra) N
(181) # () S 4 T () S 8 T ( * \303\251ventuellement utiliser la m\303\251thode darker\(\) sur cette couleur pour) N
(182) # () S 4 T () S 8 T ( * \303\251viter les couleurs trop claires qui se voient mal sur fond blanc.) N
(183) # () S 4 T () S 8 T ( */) N
(184) # () S
() p 4 T () S 8 T () S
(if) K
( \(name ) p
(\271) sy
( ) p
(null) k
(\)) p n
(185) # () S 4 T () S 8 T ({) N
(186) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(name.length\(\) > 0\)) p n
(187) # () S 4 T () S 8 T () S 12 T ({) N
(188) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \() p
(\330) sy
(colorMap.containsKey\(name\)\)) p n
(189) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(190) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Random rand = ) S
(new) K
( Random\(name.hashCode\(\)\);) p n
(191) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (colorMap.put\(name, ) S
(new) K
( Color\(rand.nextInt\(\)\).darker\(\)\);) p n
(192) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// colorMap.put\(name, name.hashCode\(\)\).darker\(\);) c n
(193) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.info\(") S
(Adding \\") str
(" + name + ") p
(\\" to colorMap) str
("\);) p n
(194) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(195) # () N
(196) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( colorMap.get\(name\);) p n
(197) # () S 4 T () S 8 T () S 12 T (}) N
(198) # () S 4 T () S 8 T (}) N
(199) # () N
(200) # () S 4 T () S 8 T () S
(return) K
( ) p
(null) k
(;) p n
(201) # () S 4 T (}) N
(202) # () N
(203) # () S 4 T () S
(/**) C n
(204) # () S 4 T ( * Accesseur en lecture de l' {@link #inPipe} pour y connecter un) N
(205) # () S 4 T ( * {@link PipedOutputStream}) N
(206) # () S 4 T ( * @return l'inPipe sur lequel on lit) N
(207) # () S 4 T ( */) N
(208) # () S
() p 4 T () S
(public) K
( PipedInputStream getInPipe\(\)) p n
(209) # () S 4 T ({) N
(210) # () S 4 T () S 8 T () S
(return) K
( inPipe;) p n
(211) # () S 4 T (}) N
(212) # () N
(213) # () S 4 T () S
(/**) C n
(214) # () S 4 T ( * Accesseur en lecture de l' {@link #outPipe} pour y connecter un) N
(215) # () S 4 T ( * {@link PipedInputStream}) N
(216) # () S 4 T ( * @return l'outPipe sur lequel on \303\251crit) N
(217) # () S 4 T ( */) N
(218) # () S
() p 4 T () S
(public) K
( PipedOutputStream getOutPipe\(\)) p n
(219) # () S 4 T ({) N
(220) # () S 4 T () S 8 T () S
(return) K
( outPipe;) p n
(221) # () S 4 T (}) N
(222) # () N
(223) # () S 4 T () S
(/**) C n
(224) # () S 4 T ( * Fermeture de la fen\303\250tre et des flux \303\240 la fin de l'ex\303\251cution) N
(225) # () S 4 T ( */) N
(226) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( cleanup\(\)) p n
(227) # () S 4 T ({) N
(228) # () S 4 T () S 8 T (logger.info\(") S
(ClientFrame::cleanup: closing window ... ) str
("\);) p n
(229) # () S 4 T () S 8 T (dispose\(\);) N
(230) # () N
(231) # () S 4 T () S 8 T (logger.info\(") S
(ClientFrame::cleanup: closing output print writer ... ) str
("\);) p n
(232) # () S 4 T () S 8 T (outPW.close\(\);) N
(233) # () N
(234) # () S 4 T () S 8 T (logger.info\(") S
(ClientFrame::cleanup: closing output stream ... ) str
("\);) p n
(235) # () S 4 T () S 8 T () S
(try) K n
(236) # () S
() p 4 T () S 8 T ({) N
(237) # () S 4 T () S 8 T () S 12 T (outPipe.close\(\);) N
(238) # () S 4 T () S 8 T (}) N
(239) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(240) # () S 4 T () S 8 T ({) N
(241) # () S 4 T () S 8 T () S 12 T (logger.warning\(") S
(ClientFrame::cleanup: failed to close output stream) str
(") p n
(242) # () S 4 T () S 8 T () S 12 T () S 16 T (+ e.getLocalizedMessage\(\)\);) N
(243) # () S 4 T () S 8 T (}) N
(244) # () N
(245) # () S 4 T () S 8 T (logger.info\(") S
(ClientFrame::cleanup: closing input stream ... ) str
("\);) p n
(246) # () S 4 T () S 8 T () S
(try) K n
(AbstractClientFrame.java) (Page 3/4) (mai 15, 17 16:56) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(247) # () p 4 T () S 8 T ({) N
(248) # () S 4 T () S 8 T () S 12 T (inPipe.close\(\);) N
(249) # () S 4 T () S 8 T (}) N
(250) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(251) # () S 4 T () S 8 T ({) N
(252) # () S 4 T () S 8 T () S 12 T (logger.warning\(") S
(ClientFrame::cleanup: failed to close input stream) str
(") p n
(253) # () S 4 T () S 8 T () S 12 T () S 16 T (+ e.getLocalizedMessage\(\)\);) N
(254) # () S 4 T () S 8 T (}) N
(255) # () S 4 T (}) N
(256) # (}) N
(AbstractClientFrame.java) (Page 4/4) (mai 15, 17 16:56) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/AbstractClientFrame.java) (42/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 43
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( widgets;) p n
(2) # () N
(3) # () S
(import) K
( java.awt.BorderLayout;) p n
(4) # () S
(import) K
( java.awt.Color;) p n
(5) # () S
(import) K
( java.awt.Component;) p n
(6) # () S
(import) K
( java.awt.HeadlessException;) p n
(7) # () S
(import) K
( java.awt.event.ActionEvent;) p n
(8) # () S
(import) K
( java.awt.event.InputEvent;) p n
(9) # () S
(import) K
( java.awt.event.KeyEvent;) p n
(10) # () S
(import) K
( java.awt.event.WindowAdapter;) p n
(11) # () S
(import) K
( java.awt.event.WindowEvent;) p n
(12) # () S
(import) K
( java.io.BufferedReader;) p n
(13) # () S
(import) K
( java.io.IOException;) p n
(14) # () S
(import) K
( java.io.InputStreamReader;) p n
(15) # () S
(import) K
( java.util.logging.Logger;) p n
(16) # () N
(17) # () S
(import) K
( javax.swing.AbstractAction;) p n
(18) # () S
(import) K
( javax.swing.Box;) p n
(19) # () S
(import) K
( javax.swing.ImageIcon;) p n
(20) # () S
(import) K
( javax.swing.JButton;) p n
(21) # () S
(import) K
( javax.swing.JFrame;) p n
(22) # () S
(import) K
( javax.swing.JLabel;) p n
(23) # () S
(import) K
( javax.swing.JMenu;) p n
(24) # () S
(import) K
( javax.swing.JMenuBar;) p n
(25) # () S
(import) K
( javax.swing.JMenuItem;) p n
(26) # () S
(import) K
( javax.swing.JPanel;) p n
(27) # () S
(import) K
( javax.swing.JScrollPane;) p n
(28) # () S
(import) K
( javax.swing.JSeparator;) p n
(29) # () S
(import) K
( javax.swing.JTextField;) p n
(30) # () S
(import) K
( javax.swing.JTextPane;) p n
(31) # () S
(import) K
( javax.swing.JToolBar;) p n
(32) # () S
(import) K
( javax.swing.KeyStroke;) p n
(33) # () S
(import) K
( javax.swing.text.BadLocationException;) p n
(34) # () S
(import) K
( javax.swing.text.DefaultCaret;) p n
(35) # () S
(import) K
( javax.swing.text.StyleConstants;) p n
(36) # () N
(37) # () S
(import) K
( chat.Vocabulary;) p n
(38) # () N
(39) # () S
(/**) C n
(40) # ( * Fen\303\252tre d'affichage de la version GUI texte du client de chat.) N
(41) # ( * @author davidroussel) N
(42) # ( */) N
(43) # () S
(public) K
( ) p
(class) K
( ) p
(ClientFrame) L
( ) p
(extends) K
( AbstractClientFrame) p n
(44) # ({) N
(45) # () S 4 T () S
(/**) C n
(46) # () S 4 T ( * Lecteur de flux d'entr\303\251e. Lit les donn\303\251es texte du {@link #inPipe} pour) N
(47) # () S 4 T ( * les afficher dans le {@link #document}) N
(48) # () S 4 T ( */) N
(49) # () S
() p 4 T () S
(private) K
( BufferedReader inBR;) p n
(50) # () N
(51) # () S 4 T () S
(/**) C n
(52) # () S 4 T ( * Le label indiquant sur quel serveur on est connect\303\251) N
(53) # () S 4 T ( */) N
(54) # () S
() p 4 T () S
(protected) K
( ) p
(final) K
( JLabel serverLabel;) p n
(55) # () N
(56) # () S 4 T () S
(/**) C n
(57) # () S 4 T ( * La zone du texte \303\240 envoyer) N
(58) # () S 4 T ( */) N
(59) # () S
() p 4 T () S
(protected) K
( ) p
(final) K
( JTextField sendTextField;) p n
(60) # () N
(61) # () S 4 T () S
(/**) C n
(62) # () S 4 T ( * Actions \303\240 r\303\251aliser lorsque l'on veut effacer le contenu du document) N
(63) # () S 4 T ( */) N
(64) # () S
() p 4 T () S
(private) K
( ) p
(final) K
( ClearAction clearAction;) p n
(65) # () N
(66) # () S 4 T () S
(/**) C n
(67) # () S 4 T ( * Actions \303\240 r\303\251aliser lorsque l'on veut envoyer un message au serveur) N
(68) # () S 4 T ( */) N
(69) # () S
() p 4 T () S
(private) K
( ) p
(final) K
( SendAction sendAction;) p n
(70) # () N
(71) # () S 4 T () S
(/**) C n
(72) # () S 4 T ( * Actions \303\240 r\303\251aliser lorsque l'on veut envoyer un message au serveur) N
(73) # () S 4 T ( */) N
(74) # () S
() p 4 T () S
(protected) K
( ) p
(final) K
( QuitAction quitAction;) p n
(75) # () N
(76) # () S 4 T () S
(/**) C n
(77) # () S 4 T ( * R\303\251f\303\251rence \303\240 la fen\303\252tre courante \(\303\240 utiliser dans les classes internes\)) N
(78) # () S 4 T ( */) N
(79) # () S
() p 4 T () S
(protected) K
( ) p
(final) K
( JFrame thisRef;) p n
(80) # () N
(81) # () S 4 T () S
(/**) C n
(82) # () S 4 T ( * Constructeur de la fen\303\252tre) N
(ClientFrame.java) (Page 1/8) (mai 21, 17 20:11) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () C 4 T ( * @param name le nom de l'utilisateur) N
(84) # () S 4 T ( * @param host l'h\303\264te sur lequel on est connect\303\251) N
(85) # () S 4 T ( * @param commonRun \303\251tat d'ex\303\251cution des autres threads du client) N
(86) # () S 4 T ( * @param parentLogger le logger parent pour les messages) N
(87) # () S 4 T ( * @throws HeadlessException) N
(88) # () S 4 T ( */) N
(89) # () S
() p 4 T () S
(public) K
( ClientFrame\(String name,) p n
(90) # () S 4 T (                   String host,) N
(91) # () S 4 T (                   Boolean commonRun,) N
(92) # () S 4 T (                   Logger parentLogger\)) N
(93) # () S 4 T (    ) S
(throws) K
( HeadlessException) p n
(94) # () S 4 T ({) N
(95) # () S 4 T () S 8 T () S
(super) K
(\(name, host, commonRun, parentLogger\);) p n
(96) # () S 4 T () S 8 T (thisRef = ) S
(this) k
(;) p n
(97) # () N
(98) # () S 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(99) # () S
() p 4 T () S 8 T () S
(// Flux d'IO) c n
(100) # () S
() p 4 T () S 8 T () S
(//---------------------------------------------------------------------) c n
(101) # () S
() p 4 T () S 8 T () S
(/*) c n
(102) # () S 4 T () S 8 T ( * Attention, la cr\303\251ation du flux d'entr\303\251e doit \(\303\251ventuellement\) \303\252tre) N
(103) # () S 4 T () S 8 T ( * report\303\251e jusqu'au lancement du run dans la mesure o\303\271 le inPipe) N
(104) # () S 4 T () S 8 T ( * peut ne pas encore \303\252tre connect\303\251 \303\240 un PipedOutputStream) N
(105) # () S 4 T () S 8 T ( */) N
(106) # () N
(107) # () S
() p 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(108) # () S
() p 4 T () S 8 T () S
(// Cr\303\251ation des actions send, clear et quit) c n
(109) # () S
() p 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(110) # () N
(111) # () S
() p 4 T () S 8 T (sendAction = ) S
(new) K
( SendAction\(\);) p n
(112) # () S 4 T () S 8 T (clearAction = ) S
(new) K
( ClearAction\(\);) p n
(113) # () S 4 T () S 8 T (quitAction = ) S
(new) K
( QuitAction\(\);) p n
(114) # () N
(115) # () N
(116) # () S 4 T () S 8 T () S
(/*) c n
(117) # () S 4 T () S 8 T ( * Ajout d'un listener pour fermer correctement l'application lorsque) N
(118) # () S 4 T () S 8 T ( * l'on ferme la fen\303\252tre. WindowListener sur this) N
(119) # () S 4 T () S 8 T ( */) N
(120) # () S
() p 4 T () S 8 T (addWindowListener\() S
(new) K
( FrameWindowListener\(\)\);) p n
(121) # () N
(122) # () S 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(123) # () S
() p 4 T () S 8 T () S
(// Widgets setup \(handled by Window builder\)) c n
(124) # () S
() p 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(125) # () N
(126) # () S
() p 4 T () S 8 T (JToolBar toolBar = ) S
(new) K
( JToolBar\(\);) p n
(127) # () S 4 T () S 8 T (toolBar.setFloatable\() S
(false) k
(\);) p n
(128) # () S 4 T () S 8 T (getContentPane\(\).add\(toolBar, BorderLayout.NORTH\);) N
(129) # () N
(130) # () S 4 T () S 8 T (JButton quitButton = ) S
(new) K
( JButton\(quitAction\);) p n
(131) # () S 4 T () S 8 T (toolBar.add\(quitButton\);) N
(132) # () N
(133) # () S 4 T () S 8 T (JButton clearButton = ) S
(new) K
( JButton\(clearAction\);) p n
(134) # () S 4 T () S 8 T (toolBar.add\(clearButton\);) N
(135) # () N
(136) # () S 4 T () S 8 T (Component toolBarSep = Box.createHorizontalGlue\(\);) N
(137) # () S 4 T () S 8 T (toolBar.add\(toolBarSep\);) N
(138) # () N
(139) # () S 4 T () S 8 T (serverLabel = ) S
(new) K
( JLabel\(host ) p
(\272) sy
( ) p
(null) k
( ? "" : host\);) p n
(140) # () S 4 T () S 8 T (toolBar.add\(serverLabel\);) N
(141) # () N
(142) # () S 4 T () S 8 T (JPanel sendPanel = ) S
(new) K
( JPanel\(\);) p n
(143) # () S 4 T () S 8 T (getContentPane\(\).add\(sendPanel, BorderLayout.SOUTH\);) N
(144) # () S 4 T () S 8 T (sendPanel.setLayout\() S
(new) K
( BorderLayout\(0, 0\)\);) p n
(145) # () S 4 T () S 8 T (sendTextField = ) S
(new) K
( JTextField\(\);) p n
(146) # () S 4 T () S 8 T (sendTextField.setAction\(sendAction\);) N
(147) # () S 4 T () S 8 T (sendPanel.add\(sendTextField\);) N
(148) # () S 4 T () S 8 T (sendTextField.setColumns\(10\);) N
(149) # () N
(150) # () S 4 T () S 8 T (JButton sendButton = ) S
(new) K
( JButton\(sendAction\);) p n
(151) # () S 4 T () S 8 T (sendPanel.add\(sendButton, BorderLayout.EAST\);) N
(152) # () N
(153) # () S 4 T () S 8 T (JScrollPane scrollPane = ) S
(new) K
( JScrollPane\(\);) p n
(154) # () S 4 T () S 8 T (getContentPane\(\).add\(scrollPane, BorderLayout.CENTER\);) N
(155) # () N
(156) # () S 4 T () S 8 T (JTextPane textPane = ) S
(new) K
( JTextPane\(\);) p n
(157) # () S 4 T () S 8 T (textPane.setEditable\() S
(false) k
(\);) p n
(158) # () S 4 T () S 8 T () S
(// autoscroll textPane to bottom) c n
(159) # () S
() p 4 T () S 8 T (DefaultCaret caret = \(DefaultCaret\) textPane.getCaret\(\);) N
(160) # () S 4 T () S 8 T (caret.setUpdatePolicy\(DefaultCaret.ALWAYS_UPDATE\);) N
(161) # () N
(162) # () S 4 T () S 8 T (scrollPane.setViewportView\(textPane\);) N
(163) # () N
(164) # () S 4 T () S 8 T (JMenuBar menuBar = ) S
(new) K
( JMenuBar\(\);) p n
(ClientFrame.java) (Page 2/8) (mai 21, 17 20:11) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/ClientFrame.java) (43/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 44
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T (setJMenuBar\(menuBar\);) N
(166) # () N
(167) # () S 4 T () S 8 T (JMenu actionsMenu = ) S
(new) K
( JMenu\(") p
(Actions) str
("\);) p n
(168) # () S 4 T () S 8 T (menuBar.add\(actionsMenu\);) N
(169) # () N
(170) # () S 4 T () S 8 T (JMenuItem sendMenuItem = ) S
(new) K
( JMenuItem\(sendAction\);) p n
(171) # () S 4 T () S 8 T (actionsMenu.add\(sendMenuItem\);) N
(172) # () N
(173) # () S 4 T () S 8 T (JMenuItem clearMenuItem = ) S
(new) K
( JMenuItem\(clearAction\);) p n
(174) # () S 4 T () S 8 T (actionsMenu.add\(clearMenuItem\);) N
(175) # () N
(176) # () S 4 T () S 8 T (JSeparator separator = ) S
(new) K
( JSeparator\(\);) p n
(177) # () S 4 T () S 8 T (actionsMenu.add\(separator\);) N
(178) # () N
(179) # () S 4 T () S 8 T (JMenuItem quitMenuItem = ) S
(new) K
( JMenuItem\(quitAction\);) p n
(180) # () S 4 T () S 8 T (actionsMenu.add\(quitMenuItem\);) N
(181) # () N
(182) # () S 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(183) # () S
() p 4 T () S 8 T () S
(// Documents) c n
(184) # () S
() p 4 T () S 8 T () S
(// r\303\251cup\303\251ration du document du textPane ainsi que du documentStyle et du) c n
(185) # () S
() p 4 T () S 8 T () S
(// defaultColor du document) c n
(186) # () S
() p 4 T () S 8 T () S
(//---------------------------------------------------------------------) c n
(187) # () S
() p 4 T () S 8 T (document = textPane.getStyledDocument\(\);) N
(188) # () S 4 T () S 8 T (documentStyle = textPane.addStyle\(") S
(New Style) str
(", ) p
(null) k
(\);) p n
(189) # () S 4 T () S 8 T (defaultColor = StyleConstants.getForeground\(documentStyle\);) N
(190) # () N
(191) # () N
(192) # () S 4 T (}) N
(193) # () N
(194) # () S 4 T () S
(/**) C n
(195) # () S 4 T ( * Affichage d'un message dans le {@link #document}, puis passage \303\240 la ligne) N
(196) # () S 4 T ( * \(avec l'ajout de {@link Vocabulary#newLine}\)) N
(197) # () S 4 T ( * La partie "[yyyy/MM/dd HH:mm:ss]" correspond \303\240 la date/heure courante) N
(198) # () S 4 T ( * obtenue gr\303\242ce \303\240 un Calendar et est affich\303\251e avec la defaultColor alors) N
(199) # () S 4 T ( * que la partie "utilisateur > message" doit \303\252tre affich\303\251e avec une couleur) N
(200) # () S 4 T ( * d\303\251termin\303\251e d'apr\303\250s le nom d'utilisateur avec) N
(201) # () S 4 T ( * {@link #getColorFromName\(String\)}, le nom d'utilisateur est quant \303\240 lui) N
(202) # () S 4 T ( * d\303\251termin\303\251 d'apr\303\250s le message lui m\303\252me avec {@link #parseName\(String\)}.) N
(203) # () S 4 T ( * @param message le message \303\240 afficher dans le {@link #document}) N
(204) # () S 4 T ( * @throws BadLocationException si l'\303\251criture dans le document \303\251choue) N
(205) # () S 4 T ( * @see {@link examples.widgets.ExampleFrame#appendToDocument\(String, Color\)}) N
(206) # () S 4 T ( * @see java.text.SimpleDateFormat#SimpleDateFormat\(String\)) N
(207) # () S 4 T ( * @see java.util.Calendar#getInstance\(\)) N
(208) # () S 4 T ( * @see java.util.Calendar#getTime\(\)) N
(209) # () S 4 T ( * @see javax.swing.text.StyleConstants) N
(210) # () S 4 T ( * @see javax.swing.text.StyledDocument#insertString\(int, String,) N
(211) # () S 4 T ( * javax.swing.text.AttributeSet\)) N
(212) # () S 4 T ( */) N
(213) # () S
() p 4 T () S
(protected) K
( ) p
(void) k
( writeMessage\(String message\) ) p
(throws) K
( BadLocationException) p n
(214) # () S 4 T ({) N
(215) # () S 4 T () S 8 T () S
(/*) c n
(216) # () S 4 T () S 8 T ( * ajout du message "[yyyy/MM/dd HH:mm:ss] utilisateur > message" \303\240) N
(217) # () S 4 T () S 8 T ( * la fin du document avec la couleur d\303\251termin\303\251e d'apr\303\250s "utilisateur") N
(218) # () S 4 T () S 8 T ( * \(voir AbstractClientFrame#getColorFromName\)) N
(219) # () S 4 T () S 8 T ( */) N
(220) # () S
() p 4 T () S 8 T (StringBuffer sb = ) S
(new) K
( StringBuffer\(\);) p n
(221) # () N
(222) # () S 4 T () S 8 T (sb.append\(message\);) N
(223) # () S 4 T () S 8 T (sb.append\(Vocabulary.newLine\);) N
(224) # () N
(225) # () S 4 T () S 8 T () S
(// source et contenu du message avec la couleur du message) c n
(226) # () S
() p 4 T () S 8 T (String source = parseName\(message\);) N
(227) # () S 4 T () S 8 T () S
(if) K
( \(\(source ) p
(\271) sy
( ) p
(null) k
(\) ) p
(\331) sy
( \(source.length\(\) > 0\)\)) p n
(228) # () S 4 T () S 8 T ({) N
(229) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(230) # () S 4 T () S 8 T () S 12 T ( * Changement de couleur du texte) N
(231) # () S 4 T () S 8 T () S 12 T ( */) N
(232) # () S
() p 4 T () S 8 T () S 12 T (StyleConstants.setForeground\(documentStyle,) N
(233) # () S 4 T () S 8 T () S 12 T (                             getColorFromName\(source\)\);) N
(234) # () S 4 T () S 8 T (}) N
(235) # () N
(236) # () S 4 T () S 8 T (document.insertString\(document.getLength\(\),) N
(237) # () S 4 T () S 8 T (                      sb.toString\(\),) N
(238) # () S 4 T () S 8 T (                      documentStyle\);) N
(239) # () N
(240) # () S 4 T () S 8 T () S
(// Retour \303\240 la couleur de texte par d\303\251faut) c n
(241) # () S
() p 4 T () S 8 T (StyleConstants.setForeground\(documentStyle, defaultColor\);) N
(242) # () N
(243) # () S 4 T (}) N
(244) # () N
(245) # () S 4 T () S
(/**) C n
(246) # () S 4 T ( * Recherche du nom d'utilisateur dans un message de type) N
(ClientFrame.java) (Page 3/8) (mai 21, 17 20:11) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(247) # () C 4 T ( * "utilisateur > message".) N
(248) # () S 4 T ( * parseName est utilis\303\251 pour extraire le nom d'utilisateur d'un message) N
(249) # () S 4 T ( * afin d'utiliser le hashCode de ce nom pour cr\303\251er une couleur dans) N
(250) # () S 4 T ( * laquelle) N
(251) # () S 4 T ( * sera affich\303\251 le message de cet utilisateur \(ainsi tous les messages d'un) N
(252) # () S 4 T ( * m\303\252me utilisateur auront la m\303\252me couleur\).) N
(253) # () S 4 T ( * @param message le message \303\240 parser) N
(254) # () S 4 T ( * @return le nom d'utilisateur s'il y en a un sinon null) N
(255) # () S 4 T ( */) N
(256) # () S
() p 4 T () S
(protected) K
( String parseName\(String message\)) p n
(257) # () S 4 T ({) N
(258) # () S 4 T () S 8 T () S
(/*) c n
(259) # () S 4 T () S 8 T ( * renvoyer la chaine correspondant \303\240 la partie "utilisateur" dans) N
(260) # () S 4 T () S 8 T ( * un message contenant "utilisateur > message", ou bien null si cette) N
(261) # () S 4 T () S 8 T ( * partie n'existe pas.) N
(262) # () S 4 T () S 8 T ( */) N
(263) # () S
() p 4 T () S 8 T () S
(if) K
( \(message.contains\(") p
(>) str
("\) ) p
(\331) sy
( message.contains\(") p
(]) str
("\)\)) p n
(264) # () S 4 T () S 8 T ({) N
(265) # () S 4 T () S 8 T () S 12 T () S
(int) k
( pos1 = message.indexOf\(']'\);) p n
(266) # () S 4 T () S 8 T () S 12 T () S
(int) k
( pos2 = message.indexOf\('>'\);) p n
(267) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(268) # () S
() p 4 T () S 8 T () S 12 T ({) N
(269) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(message.substring\(pos1 + 2, pos2 - 1\)\);) p n
(270) # () S 4 T () S 8 T () S 12 T (}) N
(271) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(IndexOutOfBoundsException iobe\)) p n
(272) # () S 4 T () S 8 T () S 12 T ({) N
(273) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ClientFrame::parseName: index out of bounds) str
("\);) p n
(274) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(null) k
(;) p n
(275) # () S 4 T () S 8 T () S 12 T (}) N
(276) # () S 4 T () S 8 T (}) N
(277) # () S 4 T () S 8 T () S
(else) K n
(278) # () S
() p 4 T () S 8 T ({) N
(279) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(null) k
(;) p n
(280) # () S 4 T () S 8 T (}) N
(281) # () S 4 T (}) N
(282) # () N
(283) # () S 4 T () S
(/**) C n
(284) # () S 4 T ( * Recherche du contenu du message dans un message de type) N
(285) # () S 4 T ( * "utilisateur > message") N
(286) # () S 4 T ( * @param message le message \303\240 parser) N
(287) # () S 4 T ( * @return le contenu du message s'il y en a un sinon null) N
(288) # () S 4 T ( */) N
(289) # () S
() p 4 T () S
(protected) K
( String parseContent\(String message\)) p n
(290) # () S 4 T ({) N
(291) # () S 4 T () S 8 T () S
(if) K
( \(message.contains\(") p
(>) str
("\)\)) p n
(292) # () S 4 T () S 8 T ({) N
(293) # () S 4 T () S 8 T () S 12 T () S
(int) k
( pos = message.indexOf\('>'\);) p n
(294) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(295) # () S
() p 4 T () S 8 T () S 12 T ({) N
(296) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(new) K
( String\(message.substring\(pos + 1, message.length\(\)\)\);) p n
(297) # () S 4 T () S 8 T () S 12 T (}) N
(298) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(IndexOutOfBoundsException iobe\)) p n
(299) # () S 4 T () S 8 T () S 12 T ({) N
(300) # () S 4 T () S 8 T () S 12 T () S 16 T (logger) N
(301) # () S 4 T () S 8 T () S 12 T () S 16 T (    .warning\(") S
(ClientFrame::parseContent: index out of bounds) str
("\);) p n
(302) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ) p
(null) k
(;) p n
(303) # () S 4 T () S 8 T () S 12 T (}) N
(304) # () S 4 T () S 8 T (}) N
(305) # () S 4 T () S 8 T () S
(else) K n
(306) # () S
() p 4 T () S 8 T ({) N
(307) # () S 4 T () S 8 T () S 12 T () S
(return) K
( message;) p n
(308) # () S 4 T () S 8 T (}) N
(309) # () S 4 T (}) N
(310) # () N
(311) # () S 4 T () S
(/**) C n
(312) # () S 4 T ( * Listener lorsque le bouton #btnClear est activ\303\251. Efface le contenu du) N
(313) # () S 4 T ( * {@link #document}) N
(314) # () S 4 T ( */) N
(315) # () S
() p 4 T () S
(protected) K
( ) p
(class) K
( ) p
(ClearAction) L
( ) p
(extends) K
( AbstractAction) p n
(316) # () S 4 T ({) N
(317) # () S 4 T () S 8 T () S
(/**) C n
(318) # () S 4 T () S 8 T ( * Constructeur d'une ClearAction : met en place le nom, la description,) N
(319) # () S 4 T () S 8 T ( * le raccourci clavier et les small|Large icons de l'action) N
(320) # () S 4 T () S 8 T ( */) N
(321) # () S
() p 4 T () S 8 T () S
(public) K
( ClearAction\(\)) p n
(322) # () S 4 T () S 8 T ({) N
(323) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON,) N
(324) # () S 4 T () S 8 T () S 12 T (         ) S
(new) K
( ImageIcon\(ClientFrame.class) p n
(325) # () S 4 T () S 8 T () S 12 T (             .getResource\(") S
(/icons/erase-16.png) str
("\)\)\);) p n
(326) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY,) N
(327) # () S 4 T () S 8 T () S 12 T (         ) S
(new) K
( ImageIcon\(ClientFrame.class) p n
(328) # () S 4 T () S 8 T () S 12 T (             .getResource\(") S
(/icons/erase-32.png) str
("\)\)\);) p n
(ClientFrame.java) (Page 4/8) (mai 21, 17 20:11) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/ClientFrame.java) (44/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 45
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(329) # () p 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY,) N
(330) # () S 4 T () S 8 T () S 12 T (         KeyStroke.getKeyStroke\(KeyEvent.VK_L,) N
(331) # () S 4 T () S 8 T () S 12 T (                                InputEvent.META_MASK\)\);) N
(332) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Clear) str
("\);) p n
(333) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Clear document content) str
("\);) p n
(334) # () S 4 T () S 8 T (}) N
(335) # () N
(336) # () S 4 T () S 8 T () S
(/**) C n
(337) # () S 4 T () S 8 T ( * Op\303\251rations r\303\251alis\303\251es lorsque l'action est sollicit\303\251e) N
(338) # () S 4 T () S 8 T ( * @param e \303\251v\303\250nement \303\240 l'origine de l'action) N
(339) # () S 4 T () S 8 T ( * @see java.awt.event.ActionListener#actionPerformed\(java.awt.event.ActionEvent\)) N
(340) # () S 4 T () S 8 T ( */) N
(341) # () S
() p 4 T () S 8 T (@Override) N
(342) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent e\)) p n
(343) # () S 4 T () S 8 T ({) N
(344) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(345) # () S 4 T () S 8 T () S 12 T ( * Effacer le contenu du document) N
(346) # () S 4 T () S 8 T () S 12 T ( */) N
(347) # () S
() p 4 T () S 8 T () S 12 T () S
(try) K n
(348) # () S
() p 4 T () S 8 T () S 12 T ({) N
(349) # () S 4 T () S 8 T () S 12 T () S 16 T (document.remove\(0, document.getLength\(\)\);) N
(350) # () S 4 T () S 8 T () S 12 T (}) N
(351) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(BadLocationException ex\)) p n
(352) # () S 4 T () S 8 T () S 12 T ({) N
(353) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ClientFrame: clear doc: bad location) str
("\);) p n
(354) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(ex.getLocalizedMessage\(\)\);) N
(355) # () S 4 T () S 8 T () S 12 T (}) N
(356) # () S 4 T () S 8 T (}) N
(357) # () S 4 T (}) N
(358) # () N
(359) # () S 4 T () S
(/**) C n
(360) # () S 4 T ( * Action r\303\251alis\303\251e pour envoyer un message au serveur) N
(361) # () S 4 T ( */) N
(362) # () S
() p 4 T () S
(protected) K
( ) p
(class) K
( ) p
(SendAction) L
( ) p
(extends) K
( AbstractAction) p n
(363) # () S 4 T ({) N
(364) # () S 4 T () S 8 T () S
(/**) C n
(365) # () S 4 T () S 8 T ( * Constructeur d'une SendAction : met en place le nom, la description,) N
(366) # () S 4 T () S 8 T ( * le raccourci clavier et les small|Large icons de l'action) N
(367) # () S 4 T () S 8 T ( */) N
(368) # () S
() p 4 T () S 8 T () S
(public) K
( SendAction\(\)) p n
(369) # () S 4 T () S 8 T ({) N
(370) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON,) N
(371) # () S 4 T () S 8 T () S 12 T (         ) S
(new) K
( ImageIcon\(ClientFrame.class) p n
(372) # () S 4 T () S 8 T () S 12 T (             .getResource\(") S
(/icons/logout-16.png) str
("\)\)\);) p n
(373) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY,) N
(374) # () S 4 T () S 8 T () S 12 T (         ) S
(new) K
( ImageIcon\(ClientFrame.class) p n
(375) # () S 4 T () S 8 T () S 12 T (             .getResource\(") S
(/icons/logout-32.png) str
("\)\)\);) p n
(376) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY,) N
(377) # () S 4 T () S 8 T () S 12 T (         KeyStroke.getKeyStroke\(KeyEvent.VK_S,) N
(378) # () S 4 T () S 8 T () S 12 T (                                InputEvent.META_MASK\)\);) N
(379) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Send) str
("\);) p n
(380) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Send text to server) str
("\);) p n
(381) # () S 4 T () S 8 T (}) N
(382) # () N
(383) # () S 4 T () S 8 T () S
(/**) C n
(384) # () S 4 T () S 8 T ( * Op\303\251rations r\303\251alis\303\251es lorsque l'action est sollicit\303\251e) N
(385) # () S 4 T () S 8 T ( * @param e \303\251v\303\250nement \303\240 l'origine de l'action) N
(386) # () S 4 T () S 8 T ( * @see java.awt.event.ActionListener#actionPerformed\(java.awt.event.ActionEvent\)) N
(387) # () S 4 T () S 8 T ( */) N
(388) # () S
() p 4 T () S 8 T (@Override) N
(389) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent e\)) p n
(390) # () S 4 T () S 8 T ({) N
(391) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(392) # () S 4 T () S 8 T () S 12 T ( * r\303\251cup\303\251ration du contenu du textfield et envoi du message au) N
(393) # () S 4 T () S 8 T () S 12 T ( * serveur \(ssi le message n'est pas vide\), puis effacement du) N
(394) # () S 4 T () S 8 T () S 12 T ( * contenu du textfield.) N
(395) # () S 4 T () S 8 T () S 12 T ( */) N
(396) # () S
() p 4 T () S 8 T () S 12 T () S
(// Obtention du contenu du sendTextField) c n
(397) # () S
() p 4 T () S 8 T () S 12 T (String content = sendTextField.getText\(\);) N
(398) # () N
(399) # () S 4 T () S 8 T () S 12 T () S
(// logger.fine\("Le contenu du textField etait = " + content\);) c n
(400) # () N
(401) # () S
() p 4 T () S 8 T () S 12 T () S
(// envoi du message) c n
(402) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
( \(content ) p
(\271) sy
( ) p
(null) k
(\)) p n
(403) # () S 4 T () S 8 T () S 12 T ({) N
(404) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(content.length\(\) > 0\)) p n
(405) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(406) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (sendMessage\(content\);) N
(407) # () N
(408) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Effacement du contenu du textfield) c n
(409) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (sendTextField.setText\(""\);) N
(410) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(ClientFrame.java) (Page 5/8) (mai 21, 17 20:11) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(411) # () p 4 T () S 8 T () S 12 T (}) N
(412) # () S 4 T () S 8 T (}) N
(413) # () S 4 T (}) N
(414) # () N
(415) # () S 4 T () S
(/**) C n
(416) # () S 4 T ( * Action r\303\251alis\303\251e pour se d\303\251logguer du serveur) N
(417) # () S 4 T ( */) N
(418) # () S
() p 4 T () S
(private) K
( ) p
(class) K
( ) p
(QuitAction) L
( ) p
(extends) K
( AbstractAction) p n
(419) # () S 4 T ({) N
(420) # () S 4 T () S 8 T () S
(/**) C n
(421) # () S 4 T () S 8 T ( * Constructeur d'une QuitAction : met en place le nom, la description,) N
(422) # () S 4 T () S 8 T ( * le raccourci clavier et les small|Large icons de l'action) N
(423) # () S 4 T () S 8 T ( */) N
(424) # () S
() p 4 T () S 8 T () S
(public) K
( QuitAction\(\)) p n
(425) # () S 4 T () S 8 T ({) N
(426) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON,) N
(427) # () S 4 T () S 8 T () S 12 T (         ) S
(new) K
( ImageIcon\(ClientFrame.class) p n
(428) # () S 4 T () S 8 T () S 12 T (             .getResource\(") S
(/icons/cancel-16.png) str
("\)\)\);) p n
(429) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY,) N
(430) # () S 4 T () S 8 T () S 12 T (         ) S
(new) K
( ImageIcon\(ClientFrame.class) p n
(431) # () S 4 T () S 8 T () S 12 T (             .getResource\(") S
(/icons/cancel-32.png) str
("\)\)\);) p n
(432) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY,) N
(433) # () S 4 T () S 8 T () S 12 T (         KeyStroke.getKeyStroke\(KeyEvent.VK_Q,) N
(434) # () S 4 T () S 8 T () S 12 T (                                InputEvent.META_MASK\)\);) N
(435) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Quit) str
("\);) p n
(436) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Disconnect from server and quit) str
("\);) p n
(437) # () S 4 T () S 8 T (}) N
(438) # () N
(439) # () S 4 T () S 8 T () S
(/**) C n
(440) # () S 4 T () S 8 T ( * Op\303\251rations r\303\251alis\303\251es lorsque l'action "quitter" est sollicit\303\251e) N
(441) # () S 4 T () S 8 T ( * @param e \303\251v\303\250nement \303\240 l'origine de l'action) N
(442) # () S 4 T () S 8 T ( * @see java.awt.event.ActionListener#actionPerformed\(java.awt.event.ActionEvent\)) N
(443) # () S 4 T () S 8 T ( */) N
(444) # () S
() p 4 T () S 8 T (@Override) N
(445) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent e\)) p n
(446) # () S 4 T () S 8 T ({) N
(447) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(QuitAction: sending bye ... ) str
("\);) p n
(448) # () N
(449) # () S 4 T () S 8 T () S 12 T (serverLabel.setText\(""\);) N
(450) # () S 4 T () S 8 T () S 12 T (thisRef.validate\(\);) N
(451) # () N
(452) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(453) # () S
() p 4 T () S 8 T () S 12 T ({) N
(454) # () S 4 T () S 8 T () S 12 T () S 16 T (Thread.sleep\(1000\);) N
(455) # () S 4 T () S 8 T () S 12 T (}) N
(456) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(InterruptedException e1\)) p n
(457) # () S 4 T () S 8 T () S 12 T ({) N
(458) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
(;) p n
(459) # () S 4 T () S 8 T () S 12 T (}) N
(460) # () N
(461) # () S 4 T () S 8 T () S 12 T (sendMessage\(Vocabulary.byeCmd\);) N
(462) # () S 4 T () S 8 T (}) N
(463) # () S 4 T (}) N
(464) # () N
(465) # () S 4 T () S
(/**) C n
(466) # () S 4 T ( * Classe g\303\251rant la fermeture correcte de la fen\303\252tre. La fermeture correcte) N
(467) # () S 4 T ( * de la fen\303\250tre implique de lancer un cleanup) N
(468) # () S 4 T ( */) N
(469) # () S
() p 4 T () S
(protected) K
( ) p
(class) K
( ) p
(FrameWindowListener) L
( ) p
(extends) K
( WindowAdapter) p n
(470) # () S 4 T ({) N
(471) # () S 4 T () S 8 T () S
(/**) C n
(472) # () S 4 T () S 8 T ( * M\303\251thode d\303\251clench\303\251e \303\240 la fermeture de la fen\303\252tre. Envoie la commande) N
(473) # () S 4 T () S 8 T ( * "bye" au serveur) N
(474) # () S 4 T () S 8 T ( */) N
(475) # () S
() p 4 T () S 8 T (@Override) N
(476) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( windowClosing\(WindowEvent e\)) p n
(477) # () S 4 T () S 8 T ({) N
(478) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(FrameWindowListener::windowClosing: sending bye ... ) str
("\);) p n
(479) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(480) # () S 4 T () S 8 T () S 12 T ( * appeler actionPerformed de quitAction si celle ci est) N
(481) # () S 4 T () S 8 T () S 12 T ( * non nulle) N
(482) # () S 4 T () S 8 T () S 12 T ( */) N
(483) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
( \(quitAction ) p
(\271) sy
( ) p
(null) k
(\)) p n
(484) # () S 4 T () S 8 T () S 12 T ({) N
(485) # () S 4 T () S 8 T () S 12 T () S 16 T (quitAction.actionPerformed\() S
(null) k
(\);) p n
(486) # () S 4 T () S 8 T () S 12 T (}) N
(487) # () S 4 T () S 8 T (}) N
(488) # () S 4 T (}) N
(489) # () N
(490) # () S 4 T () S
(/**) C n
(491) # () S 4 T ( * Ex\303\251cution de la boucle d'ex\303\251cution. La boucle d'ex\303\251cution consiste \303\240 lire) N
(492) # () S 4 T ( * une ligne sur le flux d'entr\303\251e avec un BufferedReader tant qu'une erreur) N
(ClientFrame.java) (Page 6/8) (mai 21, 17 20:11) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/ClientFrame.java) (45/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 46
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(493) # () C 4 T ( * d'IO n'intervient pas indiquant que le flux a \303\251t\303\251 coup\303\251. Auquel cas on) N
(494) # () S 4 T ( * quitte la boucle principale et on ferme les flux d'I/O avec #cleanup\(\)) N
(495) # () S 4 T ( */) N
(496) # () S
() p 4 T (@Override) N
(497) # () S 4 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(498) # () S 4 T ({) N
(499) # () S 4 T () S 8 T (inBR = ) S
(new) K
( BufferedReader\() p
(new) K
( InputStreamReader\(inPipe\)\);) p n
(500) # () N
(501) # () S 4 T () S 8 T (String messageIn;) N
(502) # () N
(503) # () S 4 T () S 8 T () S
(while) K
( \(commonRun.booleanValue\(\)\)) p n
(504) # () S 4 T () S 8 T ({) N
(505) # () S 4 T () S 8 T () S 12 T (messageIn = ) S
(null) k
(;) p n
(506) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(507) # () S 4 T () S 8 T () S 12 T ( * - Lecture d'une ligne de texte en provenance du serveur avec inBR) N
(508) # () S 4 T () S 8 T () S 12 T ( * Si une exception survient lors de cette lecture on quitte la) N
(509) # () S 4 T () S 8 T () S 12 T ( * boucle.) N
(510) # () S 4 T () S 8 T () S 12 T ( * - Si cette ligne de texte n'est pas nulle on affiche le message) N
(511) # () S 4 T () S 8 T () S 12 T ( * dans le document avec le format voulu en utilisant) N
(512) # () S 4 T () S 8 T () S 12 T ( * #writeMessage\(String\)) N
(513) # () S 4 T () S 8 T () S 12 T ( * - Apr\303\250s la fin de la boucle on change commonRun \303\240 false de) N
(514) # () S 4 T () S 8 T () S 12 T ( * mani\303\250re synchronis\303\251e afin que les autres threads utilisant ce) N
(515) # () S 4 T () S 8 T () S 12 T ( * commonRun puissent s'arr\303\252ter eux aussi :) N
(516) # () S 4 T () S 8 T () S 12 T ( * synchronized\(commonRun\)) N
(517) # () S 4 T () S 8 T () S 12 T ( * {) N
(518) # () S 4 T () S 8 T () S 12 T ( * commonRun = Boolean.FALSE;) N
(519) # () S 4 T () S 8 T () S 12 T ( * }) N
(520) # () S 4 T () S 8 T () S 12 T ( * Dans toutes les \303\251tapes si un probl\303\250me survient \(erreur,) N
(521) # () S 4 T () S 8 T () S 12 T ( * exception, ...\) on quitte la boucle en ayant au pr\303\251alable ajout\303\251) N
(522) # () S 4 T () S 8 T () S 12 T ( * un "warning" ou un "severe" au logger \(en fonction de l'erreur) N
(523) # () S 4 T () S 8 T () S 12 T ( * rencontr\303\251e\) et mis le commonRun \303\240 false \(de mani\303\250re synchronis\303\251\).) N
(524) # () S 4 T () S 8 T () S 12 T ( */) N
(525) # () S
() p 4 T () S 8 T () S 12 T () S
(try) K n
(526) # () S
() p 4 T () S 8 T () S 12 T ({) N
(527) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(/*) c n
(528) # () S 4 T () S 8 T () S 12 T () S 16 T ( * read from input \(doit \303\252tre bloquant\)) N
(529) # () S 4 T () S 8 T () S 12 T () S 16 T ( */) N
(530) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (messageIn = inBR.readLine\(\);) N
(531) # () S 4 T () S 8 T () S 12 T (}) N
(532) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(IOException e\)) p n
(533) # () S 4 T () S 8 T () S 12 T ({) N
(534) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ClientFrame: I/O Error reading) str
("\);) p n
(535) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(break) K
(;) p n
(536) # () S 4 T () S 8 T () S 12 T (}) N
(537) # () N
(538) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(messageIn ) p
(\271) sy
( ) p
(null) k
(\)) p n
(539) # () S 4 T () S 8 T () S 12 T ({) N
(540) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Ajouter le message \303\240 la fin du document avec la couleur) c n
(541) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// voulue) c n
(542) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(try) K n
(543) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(544) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (writeMessage\(messageIn\);) N
(545) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(546) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(catch) K
( \(BadLocationException e\)) p n
(547) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(548) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.warning\(") S
(ClientFrame: write at bad location: ) str
(") p n
(549) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (    + e.getLocalizedMessage\(\)\);) N
(550) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(551) # () S 4 T () S 8 T () S 12 T (}) N
(552) # () S 4 T () S 8 T () S 12 T () S
(else) K
( ) p
(// messageIn == null) c n
(553) # () S
() p 4 T () S 8 T () S 12 T ({) N
(554) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(break) K
(;) p n
(555) # () S 4 T () S 8 T () S 12 T (}) N
(556) # () S 4 T () S 8 T (}) N
(557) # () N
(558) # () S 4 T () S 8 T () S
(if) K
( \(commonRun.booleanValue\(\)\)) p n
(559) # () S 4 T () S 8 T ({) N
(560) # () S 4 T () S 8 T () S 12 T (logger) N
(561) # () S 4 T () S 8 T () S 12 T (    .info\(") S
(ClientFrame::cleanup: changing run state at the end ... ) str
("\);) p n
(562) # () S 4 T () S 8 T () S 12 T () S
(synchronized) K
( \(commonRun\)) p n
(563) # () S 4 T () S 8 T () S 12 T ({) N
(564) # () S 4 T () S 8 T () S 12 T () S 16 T (commonRun = Boolean.FALSE;) N
(565) # () S 4 T () S 8 T () S 12 T (}) N
(566) # () S 4 T () S 8 T (}) N
(567) # () N
(568) # () S 4 T () S 8 T (cleanup\(\);) N
(569) # () S 4 T (}) N
(570) # () N
(571) # () S 4 T () S
(/**) C n
(572) # () S 4 T ( * Fermeture de la fen\303\250tre et des flux \303\240 la fin de l'ex\303\251cution) N
(573) # () S 4 T ( */) N
(574) # () S
() p 4 T (@Override) N
(ClientFrame.java) (Page 7/8) (mai 21, 17 20:11) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(575) # () p 4 T () S
(public) K
( ) p
(void) k
( cleanup\(\)) p n
(576) # () S 4 T ({) N
(577) # () S 4 T () S 8 T (logger.info\(") S
(ClientFrame::cleanup: closing input buffered reader ... ) str
("\);) p n
(578) # () S 4 T () S 8 T () S
(try) K n
(579) # () S
() p 4 T () S 8 T ({) N
(580) # () S 4 T () S 8 T () S 12 T (inBR.close\(\);) N
(581) # () S 4 T () S 8 T (}) N
(582) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(583) # () S 4 T () S 8 T ({) N
(584) # () S 4 T () S 8 T () S 12 T (logger.warning\(") S
(ClientFrame::cleanup: failed to close input reader) str
(") p n
(585) # () S 4 T () S 8 T () S 12 T (    + e.getLocalizedMessage\(\)\);) N
(586) # () S 4 T () S 8 T (}) N
(587) # () N
(588) # () S 4 T () S 8 T (super.cleanup\(\);) N
(589) # () S 4 T (}) N
(590) # (}) N
(ClientFrame.java) (Page 8/8) (mai 21, 17 20:11) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/ClientFrame.java) (46/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 47
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( widgets;) p n
(2) # () N
(3) # () S
(import) K
( java.awt.BorderLayout;) p n
(4) # () S
(import) K
( java.awt.Color;) p n
(5) # () S
(import) K
( java.awt.Component;) p n
(6) # () S
(import) K
( java.awt.GridLayout;) p n
(7) # () S
(import) K
( java.awt.HeadlessException;) p n
(8) # () S
(import) K
( java.awt.event.ActionEvent;) p n
(9) # () S
(import) K
( java.awt.event.InputEvent;) p n
(10) # () S
(import) K
( java.awt.event.KeyEvent;) p n
(11) # () S
(import) K
( java.awt.event.MouseAdapter;) p n
(12) # () S
(import) K
( java.awt.event.MouseEvent;) p n
(13) # () S
(import) K
( java.awt.event.MouseListener;) p n
(14) # () S
(import) K
( java.awt.event.WindowAdapter;) p n
(15) # () S
(import) K
( java.awt.event.WindowEvent;) p n
(16) # () S
(import) K
( java.io.IOException;) p n
(17) # () S
(import) K
( java.io.ObjectInputStream;) p n
(18) # () S
(import) K
( java.util.Vector;) p n
(19) # () S
(import) K
( java.util.function.Consumer;) p n
(20) # () S
(import) K
( java.util.function.Predicate;) p n
(21) # () S
(import) K
( java.util.logging.Logger;) p n
(22) # () N
(23) # () S
(import) K
( javax.swing.AbstractAction;) p n
(24) # () S
(import) K
( javax.swing.AbstractButton;) p n
(25) # () S
(import) K
( javax.swing.Box;) p n
(26) # () S
(import) K
( javax.swing.ImageIcon;) p n
(27) # () S
(import) K
( javax.swing.JButton;) p n
(28) # () S
(import) K
( javax.swing.JCheckBoxMenuItem;) p n
(29) # () S
(import) K
( javax.swing.JFrame;) p n
(30) # () S
(import) K
( javax.swing.JLabel;) p n
(31) # () S
(import) K
( javax.swing.JList;) p n
(32) # () S
(import) K
( javax.swing.JMenu;) p n
(33) # () S
(import) K
( javax.swing.JMenuBar;) p n
(34) # () S
(import) K
( javax.swing.JMenuItem;) p n
(35) # () S
(import) K
( javax.swing.JPanel;) p n
(36) # () S
(import) K
( javax.swing.JPopupMenu;) p n
(37) # () S
(import) K
( javax.swing.JScrollPane;) p n
(38) # () S
(import) K
( javax.swing.JSeparator;) p n
(39) # () S
(import) K
( javax.swing.JTextField;) p n
(40) # () S
(import) K
( javax.swing.JTextPane;) p n
(41) # () S
(import) K
( javax.swing.JToggleButton;) p n
(42) # () S
(import) K
( javax.swing.JToolBar;) p n
(43) # () S
(import) K
( javax.swing.KeyStroke;) p n
(44) # () S
(import) K
( javax.swing.ListCellRenderer;) p n
(45) # () S
(import) K
( javax.swing.ListSelectionModel;) p n
(46) # () S
(import) K
( javax.swing.event.ListSelectionEvent;) p n
(47) # () S
(import) K
( javax.swing.event.ListSelectionListener;) p n
(48) # () S
(import) K
( javax.swing.text.BadLocationException;) p n
(49) # () S
(import) K
( javax.swing.text.DefaultCaret;) p n
(50) # () S
(import) K
( javax.swing.text.StyleConstants;) p n
(51) # () N
(52) # () S
(import) K
( chat.Failure;) p n
(53) # () S
(import) K
( chat.Vocabulary;) p n
(54) # () N
(55) # () S
(import) K
( models.Message;) p n
(56) # () S
(import) K
( models.NameSetListModel;) p n
(57) # () N
(58) # () S
(public) K
( ) p
(class) K
( ) p
(ClientFrame2) L
( ) p
(extends) K
( AbstractClientFrame) p n
(59) # ({) N
(60) # () S 4 T () S
(/**) C n
(61) # () S 4 T ( * Lecteur de flux d'entr\303\251e. Lit les donn\303\251es texte du {@link #inPipe} pour) N
(62) # () S 4 T ( * les afficher dans le {@link #document}) N
(63) # () S 4 T ( */) N
(64) # () S
() p 4 T () S
(private) K
( ObjectInputStream inOS;) p n
(65) # () N
(66) # () S 4 T () S
(/**) C n
(67) # () S 4 T ( * Le label indiquant sur quel serveur on est connect\303\251) N
(68) # () S 4 T ( */) N
(69) # () S
() p 4 T () S
(protected) K
( ) p
(final) K
( JLabel serverLabel;) p n
(70) # () N
(71) # () S 4 T () S
(/**) C n
(72) # () S 4 T ( * La zone du texte \303\240 envoyer) N
(73) # () S 4 T ( */) N
(74) # () S
() p 4 T () S
(protected) K
( ) p
(final) K
( JTextField sendTextField;) p n
(75) # () N
(76) # () S 4 T () S
(/**) C n
(77) # () S 4 T ( * Actions \303\240 r\303\251aliser lorsque l'on veut effacer le contenu du document) N
(78) # () S 4 T ( */) N
(79) # () S
() p 4 T () S
(private) K
( ) p
(final) K
( ClearMessagesAction clearMessagesAction;) p n
(80) # () N
(81) # () S 4 T () S
(/**) C n
(82) # () S 4 T ( * Actions \303\240 r\303\251aliser lorsque l'on veut envoyer un message au serveur) N
(ClientFrame2.java) (Page 1/10) (mai 22, 17 21:41) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () C 4 T ( */) N
(84) # () S
() p 4 T () S
(private) K
( ) p
(final) K
( SendAction sendAction;) p n
(85) # () N
(86) # () S 4 T () S
(/**) C n
(87) # () S 4 T ( * Actions \303\240 r\303\251aliser lorsque l'on veut envoyer un message au serveur) N
(88) # () S 4 T ( */) N
(89) # () S
() p 4 T () S
(protected) K
( ) p
(final) K
( QuitAction quitAction;) p n
(90) # () S 4 T () N
(91) # () S 4 T () S
(protected) K
( ) p
(final) K
( FilterSelectedAction filterSelectedAction;) p n
(92) # () S 4 T () S
(protected) K
( ) p
(final) K
( SortAction sortDateAction;) p n
(93) # () S 4 T () S
(protected) K
( ) p
(final) K
( SortAction sortContentAction;) p n
(94) # () S 4 T () S
(protected) K
( ) p
(final) K
( SortAction sortAuthorAction;) p n
(95) # () S 4 T () S
(protected) K
( ) p
(final) K
( ClearSelectedAction clearSelectedAction;) p n
(96) # () S 4 T () S
(protected) K
( ) p
(final) K
( KickSelectedUsersAction kickSelectedUsersAction;) p n
(97) # () N
(98) # () S 4 T () S
(/**) C n
(99) # () S 4 T ( * R\303\251f\303\251rence \303\240 la fen\303\252tre courante \(\303\240 utiliser dans les classes internes\)) N
(100) # () S 4 T ( */) N
(101) # () S
() p 4 T () S
(protected) K
( ) p
(final) K
( JFrame thisRef;) p n
(102) # () N
(103) # () S 4 T () S
(private) K
( JPopupMenu popupMenu;) p n
(104) # () S 4 T () S
(private) K
( JCheckBoxMenuItem filterMenuItem;) p n
(105) # () S 4 T () S
(private) K
( JToggleButton filterButton;) p n
(106) # () S 4 T () S
(private) K
( Vector<Integer> selectedUsers;) p n
(107) # () S 4 T () S
(protected) K
( Vector<Message> storedMessage;) p 48 T () N
(108) # () S 4 T () S
(private) K
( String nameUser;) p n
(109) # () S 4 T () S
(private) K
( ListSelectionModel selectionModel;) p n
(110) # () S 4 T () N
(111) # () S 4 T (NameSetListModel userListModel = ) S
(new) K
( NameSetListModel\(\);) p n
(112) # () N
(113) # () S 4 T () S
(/**) C n
(114) # () S 4 T ( * Constructeur de la fen\303\252tre) N
(115) # () S 4 T ( * @param name le nom de l'utilisateur) N
(116) # () S 4 T ( * @param host l'h\303\264te sur lequel on est connect\303\251) N
(117) # () S 4 T ( * @param commonRun \303\251tat d'ex\303\251cution des autres threads du client) N
(118) # () S 4 T ( * @param parentLogger le logger parent pour les messages) N
(119) # () S 4 T ( * @throws HeadlessException) N
(120) # () S 4 T ( */) N
(121) # () S
() p 4 T () S
(public) K
( ClientFrame2\(String name,) p n
(122) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T ( String host,) N
(123) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T ( Boolean commonRun,) N
(124) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T ( Logger parentLogger\)) N
(125) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(throws) K
( HeadlessException) p n
(126) # () S 4 T ({) N
(127) # () S 4 T () S 8 T () S
(super) K
(\(name, host, commonRun, parentLogger\);) p n
(128) # () S 4 T () S 8 T (thisRef = ) S
(this) k
(;) p n
(129) # () N
(130) # () S 4 T () S 8 T (storedMessage = ) S
(new) K
( Vector<>\(\);) p n
(131) # () S 4 T () S 8 T (selectedUsers = ) S
(new) K
( Vector<>\(\);) p n
(132) # () S 4 T () S 8 T (nameUser = name;) N
(133) # () N
(134) # () S 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(135) # () S
() p 4 T () S 8 T () S
(// Flux d'IO) c n
(136) # () S
() p 4 T () S 8 T () S
(//---------------------------------------------------------------------) c n
(137) # () S
() p 4 T () S
(/*) c n
(138) # () S 4 T ( * Attention, la cr\303\251ation du flux d'entr\303\251e doit \(\303\251ventuellement\) \303\252tre) N
(139) # () S 4 T ( * report\303\251e jusqu'au lancement du run dans la mesure o\303\271 le inPipe) N
(140) # () S 4 T ( * peut ne pas encore \303\252tre connect\303\251 \303\240 un PipedOutputStream) N
(141) # () S 4 T ( */) N
(142) # () N
(143) # () S
() p 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(144) # () S
() p 4 T () S 8 T () S
(// Cr\303\251ation des actions send, clear et quit) c n
(145) # () S
() p 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(146) # () N
(147) # () S
() p 4 T () S 8 T (sendAction = ) S
(new) K
( SendAction\(\);) p n
(148) # () S 4 T () S 8 T (clearMessagesAction = ) S
(new) K
( ClearMessagesAction\(\);) p n
(149) # () S 4 T () S 8 T (quitAction = ) S
(new) K
( QuitAction\(\);) p n
(150) # () N
(151) # () S 4 T () S 8 T (clearSelectedAction = ) S
(new) K
( ClearSelectedAction\(\);) p n
(152) # () S 4 T () S 8 T (kickSelectedUsersAction = ) S
(new) K
( KickSelectedUsersAction\(\);) p n
(153) # () S 4 T () S 8 T (filterSelectedAction = ) S
(new) K
( FilterSelectedAction\(\);) p n
(154) # () N
(155) # () S 4 T () S 8 T (sortDateAction = ) S
(new) K
( SortAction\(") p
(Date) str
("\);) p n
(156) # () S 4 T () S 8 T (sortContentAction = ) S
(new) K
( SortAction\(") p
(Content) str
("\);) p n
(157) # () S 4 T () S 8 T (sortAuthorAction = ) S
(new) K
( SortAction\(") p
(Author) str
("\);) p n
(158) # () N
(159) # () S 4 T () S 8 T (addWindowListener\() S
(new) K
( FrameWindowListener\(\)\);) p n
(160) # () N
(161) # () S 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(162) # () S
() p 4 T () S 8 T () S
(// Widgets setup \(handled by Window builder\)) c n
(163) # () S
() p 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(164) # () S
() p 4 T () S 8 T (JToolBar toolBar = ) S
(new) K
( JToolBar\(\);) p n
(ClientFrame2.java) (Page 2/10) (mai 22, 17 21:41) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/ClientFrame2.java) (47/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 48
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T (toolBar.setFloatable\() S
(false) k
(\);) p n
(166) # () S 4 T () S 8 T (getContentPane\(\).add\(toolBar, BorderLayout.NORTH\);) N
(167) # () N
(168) # () S 4 T () S 8 T (JButton quitButton = ) S
(new) K
( JButton\(quitAction\);) p n
(169) # () S 4 T () S 8 T (quitButton.setHideActionText\() S
(true) k
(\);) p n
(170) # () S 4 T () S 8 T (toolBar.add\(quitButton\);) N
(171) # () N
(172) # () S 4 T () S 8 T (JSeparator separator1 = ) S
(new) K
( JSeparator\(1\);) p n
(173) # () S 4 T () S 8 T (toolBar.add\(separator1\); ) N
(174) # () N
(175) # () S 4 T () S 8 T (JButton clearSelectedButton = ) S
(new) K
( JButton\(clearSelectedAction\);) p n
(176) # () S 4 T () S 8 T (clearSelectedButton.setHideActionText\() S
(true) k
(\);) p n
(177) # () S 4 T () S 8 T (toolBar.add\(clearSelectedButton\);) N
(178) # () N
(179) # () S 4 T () S 8 T (JButton kickSelectedButton = ) S
(new) K
( JButton\(kickSelectedUsersAction\);) p n
(180) # () S 4 T () S 8 T (kickSelectedButton.setHideActionText\() S
(true) k
(\);) p n
(181) # () S 4 T () S 8 T (toolBar.add\(kickSelectedButton\);) N
(182) # () N
(183) # () S 4 T () S 8 T (JSeparator separator2 = ) S
(new) K
( JSeparator\(1\);) p n
(184) # () S 4 T () S 8 T (toolBar.add\(separator2\); ) N
(185) # () N
(186) # () S 4 T () S 8 T (JButton clearButton = ) S
(new) K
( JButton\(clearMessagesAction\);) p n
(187) # () S 4 T () S 8 T (clearButton.setHideActionText\() S
(true) k
(\);) p n
(188) # () S 4 T () S 8 T (toolBar.add\(clearButton\);) N
(189) # () N
(190) # () S 4 T () S 8 T (filterButton = ) S
(new) K
( JToggleButton\(filterSelectedAction\);) p n
(191) # () S 4 T () S 8 T (filterButton.setHideActionText\() S
(true) k
(\);) p n
(192) # () S 4 T () S 8 T (toolBar.add\(filterButton\);) N
(193) # () N
(194) # () S 4 T () S 8 T (Component toolBarSep = Box.createHorizontalGlue\(\);) N
(195) # () S 4 T () S 8 T (toolBar.add\(toolBarSep\);) N
(196) # () N
(197) # () S 4 T () S 8 T (serverLabel = ) S
(new) K
( JLabel\(host ) p
(\272) sy
( ) p
(null) k
( ? "" : host\);) p n
(198) # () S 4 T () S 8 T (toolBar.add\(serverLabel\);) N
(199) # () N
(200) # () N
(201) # () S 4 T () S 8 T (JPanel sendPanel = ) S
(new) K
( JPanel\(\);) p n
(202) # () S 4 T () S 8 T (getContentPane\(\).add\(sendPanel, BorderLayout.SOUTH\);) N
(203) # () N
(204) # () N
(205) # () S 4 T () S 8 T (sendPanel.setLayout\() S
(new) K
( BorderLayout\(0, 0\)\);) p n
(206) # () S 4 T () S 8 T (sendTextField = ) S
(new) K
( JTextField\(\);) p n
(207) # () S 4 T () S 8 T (sendTextField.setAction\(sendAction\);) N
(208) # () S 4 T () S 8 T (sendPanel.add\(sendTextField\);) N
(209) # () S 4 T () S 8 T (sendTextField.setColumns\(0\);) N
(210) # () N
(211) # () S 4 T () S 8 T (JButton sendButton = ) S
(new) K
( JButton\(sendAction\);) p n
(212) # () S 4 T () S 8 T (sendButton.setHideActionText\() S
(true) k
(\);) p n
(213) # () S 4 T () S 8 T (sendPanel.add\(sendButton, BorderLayout.EAST\);) N
(214) # () N
(215) # () S 4 T () S 8 T (JPanel container = ) S
(new) K
( JPanel\(\);) p n
(216) # () S 4 T () S 8 T (getContentPane\(\).add\(container, BorderLayout.CENTER\);) N
(217) # () S 4 T () S 8 T (container.setLayout\() S
(new) K
( GridLayout\(1, 2\)\);) p n
(218) # () N
(219) # () S 4 T () S 8 T (JScrollPane scrollPaneUser = ) S
(new) K
( JScrollPane\(\);) p n
(220) # () S 4 T () S 8 T (container.add\(scrollPaneUser\);) N
(221) # () N
(222) # () S 4 T () S 8 T (JScrollPane scrollPaneMessage = ) S
(new) K
( JScrollPane\(\);) p n
(223) # () S 4 T () S 8 T (container.add\(scrollPaneMessage\);) N
(224) # () N
(225) # () S 4 T () S 8 T (JTextPane textPane = ) S
(new) K
( JTextPane\(\);) p n
(226) # () S 4 T () S 8 T (textPane.setEditable\() S
(false) k
(\);) p n
(227) # () S 4 T () S 8 T () S
(// autoscroll textPane to bottom) c n
(228) # () S
() p 4 T () S 8 T (DefaultCaret caret = \(DefaultCaret\) textPane.getCaret\(\);) N
(229) # () S 4 T () S 8 T (caret.setUpdatePolicy\(DefaultCaret.ALWAYS_UPDATE\);) N
(230) # () N
(231) # () S 4 T () S 8 T (scrollPaneMessage.setViewportView\(textPane\);) N
(232) # () N
(233) # () S 4 T () S 8 T (JList<String> userList = ) S
(new) K
( JList<>\(\);) p n
(234) # () S 4 T () S 8 T (userList.setModel\(userListModel\);) N
(235) # () S 4 T () S 8 T (userListModel.add\(name\);) N
(236) # () S 4 T () S 8 T (userList.setCellRenderer\() S
(new) K
( ColorTextRenderer\(\)\);) p n
(237) # () S 4 T () S 8 T (scrollPaneUser.setViewportView\(userList\);) N
(238) # () N
(239) # () S 4 T () S 8 T (popupMenu = ) S
(new) K
( JPopupMenu\(\);) p n
(240) # () S 4 T () S 8 T (popupMenu.add\(clearSelectedAction\);) N
(241) # () S 4 T () S 8 T (popupMenu.add\(kickSelectedUsersAction\);) N
(242) # () N
(243) # () S 4 T () S 8 T (MouseListener popupListener = ) S
(new) K
( PopupListener\(\);) p n
(244) # () S 4 T () S 8 T (userList.addMouseListener\(popupListener\);) N
(245) # () N
(246) # () S 4 T () S 8 T (JMenuBar menuBar = ) S
(new) K
( JMenuBar\(\);) p n
(ClientFrame2.java) (Page 3/10) (mai 22, 17 21:41) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(247) # () p 4 T () S 8 T (setJMenuBar\(menuBar\);) N
(248) # () N
(249) # () S 4 T () S 8 T (JMenu connectionsMenu = ) S
(new) K
( JMenu\(") p
(Connections) str
("\);) p n
(250) # () S 4 T () S 8 T (menuBar.add\(connectionsMenu\);) N
(251) # () N
(252) # () S 4 T () S 8 T (JMenu messagesMenu = ) S
(new) K
( JMenu\(") p
(Messages) str
("\);) p n
(253) # () S 4 T () S 8 T (menuBar.add\(messagesMenu\);) N
(254) # () N
(255) # () S 4 T () S 8 T (JMenu usersMenu = ) S
(new) K
( JMenu\(") p
(Users) str
("\);) p n
(256) # () S 4 T () S 8 T (menuBar.add\(usersMenu\);) N
(257) # () N
(258) # () S 4 T () S 8 T (JMenuItem quitMenuItem = ) S
(new) K
( JMenuItem\(quitAction\);) p n
(259) # () S 4 T () S 8 T (connectionsMenu.add\(quitMenuItem\);) N
(260) # () N
(261) # () S 4 T () S 8 T (JMenuItem clearMessagesMenuItem = ) S
(new) K
( JMenuItem\(clearMessagesAction\);) p n
(262) # () S 4 T () S 8 T (messagesMenu.add\(clearMessagesMenuItem\);) N
(263) # () N
(264) # () S 4 T () S 8 T (filterMenuItem = ) S
(new) K
( JCheckBoxMenuItem\(filterSelectedAction\);) p n
(265) # () S 4 T () S 8 T (messagesMenu.add\(filterMenuItem\);) N
(266) # () N
(267) # () S 4 T () S 8 T (JMenu sortMenu = ) S
(new) K
( JMenu\(") p
(Sort) str
("\);) p n
(268) # () S 4 T () S 8 T (messagesMenu.add\(sortMenu\);) N
(269) # () S 4 T () S 8 T (JMenuItem sortDateMenuItem = ) S
(new) K
( JMenuItem\(sortDateAction\);) p n
(270) # () S 4 T () S 8 T (sortMenu.add\(sortDateMenuItem\);) N
(271) # () S 4 T () S 8 T (JMenuItem sortContentMenuItem = ) S
(new) K
( JMenuItem\(sortContentAction\);) p n
(272) # () S 4 T () S 8 T (sortMenu.add\(sortContentMenuItem\);) N
(273) # () S 4 T () S 8 T (JMenuItem sortAuthorMenuItem = ) S
(new) K
( JMenuItem\(sortAuthorAction\);) p n
(274) # () S 4 T () S 8 T (sortMenu.add\(sortAuthorMenuItem\);) N
(275) # () N
(276) # () S 4 T () S 8 T (JMenuItem clearSelectedMenuItem = ) S
(new) K
( JMenuItem\(clearSelectedAction\);) p n
(277) # () S 4 T () S 8 T (usersMenu.add\(clearSelectedMenuItem\);) N
(278) # () N
(279) # () S 4 T () S 8 T (JMenuItem kickSelectedUsersMenuItem = ) S
(new) K
( JMenuItem\(kickSelectedUsersAction\);) p n
(280) # () S 4 T () S 8 T (usersMenu.add\(kickSelectedUsersMenuItem\);) N
(281) # () N
(282) # () S 4 T () S 8 T (filterSelectedAction.setEnabled\() S
(false) k
(\);) p n
(283) # () S 4 T () S 8 T (clearSelectedAction.setEnabled\() S
(false) k
(\);) p n
(284) # () S 4 T () S 8 T (kickSelectedUsersAction.setEnabled\() S
(false) k
(\);) p n
(285) # () N
(286) # () S 4 T () S 8 T () S
(// --------------------------------------------------------------------) c n
(287) # () S
() p 4 T () S 8 T () S
(// Documents) c n
(288) # () S
() p 4 T () S 8 T () S
(// r\303\251cup\303\251ration du document du textPane ainsi que du documentStyle et du) c n
(289) # () S
() p 4 T () S 8 T () S
(// defaultColor du document) c n
(290) # () S
() p 4 T () S 8 T () S
(//---------------------------------------------------------------------) c n
(291) # () S
() p 4 T () S 8 T (document = textPane.getStyledDocument\(\);) N
(292) # () S 4 T () S 8 T (documentStyle = textPane.addStyle\(") S
(New Style) str
(", ) p
(null) k
(\);) p n
(293) # () S 4 T () S 8 T (defaultColor = StyleConstants.getForeground\(documentStyle\);) N
(294) # () N
(295) # () S 4 T () S 8 T (selectionModel = userList.getSelectionModel\(\);) N
(296) # () S 4 T () S 8 T (selectionModel.addListSelectionListener\() S
(new) K
( ListSelectionListener\(\)) p n
(297) # () S 4 T () S 8 T ({) N
(298) # () S 4 T () S 8 T () S 12 T (@Override) N
(299) # () S 4 T () S 8 T () S 12 T () S
(public) K
( ) p
(void) k
( valueChanged\(ListSelectionEvent lse\)) p n
(300) # () S 4 T () S 8 T () S 12 T ({) N
(301) # () S 4 T () S 8 T () S 12 T () S 16 T (ListSelectionModel lsm = \(ListSelectionModel\) lse.getSource\(\);) N
(302) # () S 4 T () S 8 T () S 12 T () S 16 T () N
(303) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(boolean) k
( isAdjusting = lse.getValueIsAdjusting\(\);) p n
(304) # () S 4 T () S 8 T () S 12 T () S 16 T (selectedUsers = ) S
(new) K
( Vector<>\(\);) p n
(305) # () N
(306) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \() p
(\330) sy
(isAdjusting\) {) p n
(307) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(lsm.isSelectionEmpty\(\)\) {) p n
(308) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (filterSelectedAction.setEnabled\() S
(false) k
(\);) p n
(309) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (clearSelectedAction.setEnabled\() S
(false) k
(\);) p n
(310) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (kickSelectedUsersAction.setEnabled\() S
(false) k
(\);) p n
(311) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (} ) S
(else) K
( {) p n
(312) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (filterSelectedAction.setEnabled\() S
(true) k
(\);) p n
(313) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (clearSelectedAction.setEnabled\() S
(true) k
(\);) p n
(314) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (kickSelectedUsersAction.setEnabled\() S
(true) k
(\);) p n
(315) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(int) k
( minSelectionIndex = lsm.getMinSelectionIndex\(\);) p n
(316) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(int) k
( maxSelectionIndex = lsm.getMaxSelectionIndex\(\);) p n
(317) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () N
(318) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(for) K
( \() p
(int) k
( i = minSelectionIndex; i ) p
(\243) sy
( maxSelectionIndex ; ++i\)) p n
(319) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(if) K
( \(lsm.isSelectedIndex\(i\)\)) p n
(320) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (selectedUsers.add\(i\);) N
(321) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(322) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(323) # () S 4 T () S 8 T () S 12 T (}) N
(324) # () S 4 T () S 8 T (}\);) N
(325) # () S 4 T (}) N
(326) # () N
(327) # () S 4 T () S
(protected) K
( ) p
(void) k
( writerMessage\(Message message\)) p n
(328) # () S 4 T ({) N
(ClientFrame2.java) (Page 4/10) (mai 22, 17 21:41) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/ClientFrame2.java) (48/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 49
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(329) # () p 4 T () S 8 T (String author = message.getAuthor\(\);) N
(330) # () S 4 T () S 8 T () N
(331) # () S 4 T () S 8 T () S
(if) K
( \(\(author ) p
(\271) sy
( ) p
(null) k
(\) ) p
(\331) sy
( \(author.length\(\) > 0\)\)) p n
(332) # () S 4 T () S 8 T () S 12 T (StyleConstants.setForeground\(documentStyle, ) S
(new) K
( Color\(author.hashCode\(\)\).darker\(\)\);) p n
(333) # () S 4 T () S 8 T () N
(334) # () S 4 T () S 8 T () S
(try) K
( {) p n
(335) # () S 4 T () S 8 T () S 12 T (document.insertString\(document.getLength\(\), message.toString\(\) + Vocabulary.newLine, doc) N
0 T (umentStyle\);) N
(336) # () S 4 T () S 8 T (} ) S
(catch) K
( \(BadLocationException e\) {) p n
(337) # () S 4 T () S 8 T () S 12 T (logger.warning\(") S
(ClientFrame2: bad location) str
("\);) p n
(338) # () S 4 T () S 8 T (}) N
(339) # () S 4 T () S 8 T () N
(340) # () S 4 T () S 8 T (StyleConstants.setForeground\(documentStyle, defaultColor\);) N
(341) # () S 4 T (}) N
(342) # () N
(343) # () S 4 T () S
(/**) C n
(344) # () S 4 T ( * Listener lorsque le bouton #btnClear est activ\303\251. Efface le contenu du) N
(345) # () S 4 T ( * {@link #document}) N
(346) # () S 4 T ( */) N
(347) # () S
() p 4 T () S
(protected) K
( ) p
(class) K
( ) p
(ClearMessagesAction) L
( ) p
(extends) K
( AbstractAction) p n
(348) # () S 4 T ({) N
(349) # () N
(350) # () S 4 T () S 8 T () S
(public) K
( ClearMessagesAction\(\)) p n
(351) # () S 4 T () S 8 T ({) N
(352) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON, ) S
(new) K
( ImageIcon\(ClientFrame2.class.getResource\(") p
(/icons/erase2-16.png) str
("\)\)\);) p n
(353) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY, ) S
(new) K
( ImageIcon\(ClientFrame2.class.getResource\(") p
(/icons/erase2-32.png) str
("\)) p n
0 T (\)\);) N
(354) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_L, InputEvent.META_MASK\)\);) N
(355) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Clear Messages) str
("\);) p n
(356) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Clear all messages) str
("\);) p n
(357) # () S 4 T () S 8 T (}) N
(358) # () N
(359) # () S 4 T () S 8 T () S
(/**) C n
(360) # () S 4 T () S 8 T ( * Op\303\251rations r\303\251alis\303\251es lorsque l'action est sollicit\303\251e) N
(361) # () S 4 T () S 8 T ( * @param e \303\251v\303\250nement \303\240 l'origine de l'action) N
(362) # () S 4 T () S 8 T ( * @see java.awt.event.ActionListener#actionPerformed\(java.awt.event.ActionEvent\)) N
(363) # () S 4 T () S 8 T ( */) N
(364) # () S
() p 4 T () S 8 T (@Override) N
(365) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent evt\)) p n
(366) # () S 4 T () S 8 T ({) N
(367) # () S 4 T () S 8 T () S 12 T () S
(try) K
( {) p n
(368) # () S 4 T () S 8 T () S 12 T () S 16 T (document.remove\(0, document.getLength\(\)\);) N
(369) # () S 4 T () S 8 T () S 12 T () S 16 T (storedMessage = ) S
(new) K
( Vector<>\(\);) p n
(370) # () S 4 T () S 8 T () S 12 T (} ) S
(catch) K
( \(BadLocationException e\) {) p n
(371) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ClientFrame: bad location) str
("\);) p n
(372) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(e.getLocalizedMessage\(\)\);) N
(373) # () S 4 T () S 8 T () S 12 T (}) N
(374) # () S 4 T () S 8 T (}) N
(375) # () S 4 T (}) N
(376) # () S 4 T () N
(377) # () S 4 T () S
(protected) K
( ) p
(class) K
( ) p
(SendAction) L
( ) p
(extends) K
( AbstractAction) p n
(378) # () S 4 T ({) N
(379) # () S 4 T () S 8 T () S
(public) K
( SendAction\(\)) p n
(380) # () S 4 T () S 8 T ({) N
(381) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON, ) S
(new) K
( ImageIcon\(ClientFrame2.class.getResource\(") p
(/icons/sent-16.png) str
("\)\)\);) p n
(382) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY, ) S
(new) K
( ImageIcon\(ClientFrame2.class.getResource\(") p
(/icons/sent-32.png) str
("\)\)\)) p n
0 T (;) N
(383) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_S, InputEvent.META_MASK\)\);) N
(384) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Send) str
("\);) p n
(385) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Send text to other clients) str
("\);) p n
(386) # () S 4 T () S 8 T (}) N
(387) # () N
(388) # () S 4 T () S 8 T () S
(/**) C n
(389) # () S 4 T () S 8 T ( * Op\303\251rations r\303\251alis\303\251es lorsque l'action est sollicit\303\251e) N
(390) # () S 4 T () S 8 T ( * @param e \303\251v\303\250nement \303\240 l'origine de l'action) N
(391) # () S 4 T () S 8 T ( * @see java.awt.event.ActionListener#actionPerformed\(java.awt.event.ActionEvent\)) N
(392) # () S 4 T () S 8 T ( */) N
(393) # () S
() p 4 T () S 8 T (@Override) N
(394) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent evt\)) p n
(395) # () S 4 T () S 8 T ({) N
(396) # () S 4 T () S 8 T () S 12 T (String content = sendTextField.getText\(\);) N
(397) # () S 4 T () S 8 T () S 12 T () N
(398) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(content ) p
(\271) sy
( ) p
(null) k
( ) p
(\331) sy
( content.length\(\) > 0\) {) p n
(399) # () S 4 T () S 8 T () S 12 T () S 16 T (sendMessage\(content\);) N
(400) # () S 4 T () S 8 T () S 12 T () S 16 T (sendTextField.setText\(""\);) N
(401) # () S 4 T () S 8 T () S 12 T (}) N
(402) # () S 4 T () S 8 T (}) N
(403) # () S 4 T (}) N
(404) # () S 4 T () N
(405) # () S 4 T () S
(private) K
( ) p
(class) K
( ) p
(QuitAction) L
( ) p
(extends) K
( AbstractAction) p n
(406) # () S 4 T ({) N
(407) # () S 4 T () S 8 T () S
(public) K
( QuitAction\(\)) p n
(ClientFrame2.java) (Page 5/10) (mai 22, 17 21:41) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(408) # () p 4 T () S 8 T ({) N
(409) # () S 4 T () S 8 T () S 12 T () S 16 T (putValue\(SMALL_ICON, ) S
(new) K
( ImageIcon\(ClientFrame2.class.getResource\(") p
(/icons/disconnected-16.) str n
0 T (png) S
("\)\)\);) p n
(410) # () S 4 T () S 8 T () S 12 T () S 16 T (putValue\(LARGE_ICON_KEY, ) S
(new) K
( ImageIcon\(ClientFrame2.class.getResource\(") p
(/icons/disconnecte) str n
0 T (d-32.png) S
("\)\)\);) p n
(411) # () S 4 T () S 8 T () S 12 T () S 16 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_Q, InputEvent.META_MASK) N
0 T (\)\);) N
(412) # () S 4 T () S 8 T () S 12 T () S 16 T (putValue\(NAME, ") S
(Quit) str
("\);) p n
(413) # () S 4 T () S 8 T () S 12 T () S 16 T (putValue\(SHORT_DESCRIPTION, ") S
(Send byeCmd and quit the client) str
("\);) p n
(414) # () S 4 T () S 8 T (}) N
(415) # () N
(416) # () S 4 T () S 8 T () S
(/**) C n
(417) # () S 4 T () S 8 T ( * Op\303\251rations r\303\251alis\303\251es lorsque l'action "quitter" est sollicit\303\251e) N
(418) # () S 4 T () S 8 T ( * @param e \303\251v\303\250nement \303\240 l'origine de l'action) N
(419) # () S 4 T () S 8 T ( * @see java.awt.event.ActionListener#actionPerformed\(java.awt.event.ActionEvent\)) N
(420) # () S 4 T () S 8 T ( */) N
(421) # () S
() p 4 T () S 8 T (@Override) N
(422) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent evt\)) p n
(423) # () S 4 T () S 8 T ({) N
(424) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(QuitAction: sending bye ... ) str
("\);) p n
(425) # () S 4 T () S 8 T () S 12 T (serverLabel.setText\(""\);) N
(426) # () S 4 T () S 8 T () S 12 T (thisRef.validate\(\);) N
(427) # () N
(428) # () S 4 T () S 8 T () S 12 T () S
(try) K
( {) p n
(429) # () S 4 T () S 8 T () S 12 T () S 16 T (Thread.sleep\(1000\);) N
(430) # () S 4 T () S 8 T () S 12 T (} ) S
(catch) K
( \(InterruptedException e\) {) p n
(431) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
(;) p n
(432) # () S 4 T () S 8 T () S 12 T (}) N
(433) # () S 4 T () S 8 T () S 12 T () N
(434) # () S 4 T () S 8 T () S 12 T (sendMessage\(Vocabulary.byeCmd\);) N
(435) # () S 4 T () S 8 T (}) N
(436) # () S 4 T (}) N
(437) # () N
(438) # () S 4 T () S
(private) K
( ) p
(class) K
( ) p
(FilterSelectedAction) L
( ) p
(extends) K
( AbstractAction) p n
(439) # () S 4 T ({) N
(440) # () S 4 T () S 8 T () S
(public) K
( FilterSelectedAction\(\)) p n
(441) # () S 4 T () S 8 T ({) N
(442) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON,) N
(443) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(new) K
( ImageIcon\(ClientFrame2.class) p n
(444) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T () S 44 T (.getResource\(") S
(/icons/filled_filter-16.png) str
("\)\)\);) p n
(445) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY,) N
(446) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S
(new) K
( ImageIcon\(ClientFrame2.class) p n
(447) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T () S 36 T () S 40 T () S 44 T (.getResource\(") S
(/icons/filled_filter-32.png) str
("\)\)\);) p n
(448) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_F, InputEvent.META_MASK\)\);) N
(449) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Filter Messages) str
("\);) p n
(450) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Filter messages of the selected users) str
("\);) p n
(451) # () S 4 T () S 8 T (}) N
(452) # () S 4 T () S 8 T () N
(453) # () S 4 T () S 8 T (@Override) N
(454) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent evt\)) p n
(455) # () S 4 T () S 8 T ({) N
(456) # () S 4 T () S 8 T () S 12 T (AbstractButton source = \(AbstractButton\) evt.getSource\(\);) N
(457) # () N
(458) # () S 4 T () S 8 T () S 12 T () S
(try) K
( {) p n
(459) # () S 4 T () S 8 T () S 12 T () S 16 T (document.remove\(0, document.getLength\(\)\);) N
(460) # () S 4 T () S 8 T () S 12 T (} ) S
(catch) K
( \(BadLocationException e\) {) p n
(461) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ClientFrame: bad location) str
("\);) p n
(462) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(e.getLocalizedMessage\(\)\);) N
(463) # () S 4 T () S 8 T () S 12 T (}) N
(464) # () N
(465) # () S 4 T () S 8 T () S 12 T (Consumer<Message> messagePrinter = \(Message message\) ) S
(\256) sy
( writerMessage\(message\);) p n
(466) # () N
(467) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(source.isSelected\(\)\) {) p n
(468) # () S 4 T () S 8 T () S 12 T () S 16 T (filterMenuItem.setSelected\() S
(true) k
(\);) p n
(469) # () S 4 T () S 8 T () S 12 T () S 16 T (filterButton.setSelected\() S
(true) k
(\);) p n
(470) # () N
(471) # () S 4 T () S 8 T () S 12 T () S 16 T (Predicate<Message> selectionFilter = \(Message message\) ) S
(\256) sy n
(472) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(473) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(message ) p
(\271) sy
( ) p
(null) k
( ) p
(\331) sy
( message.hasAuthor\(\) ) p
(\331) sy
( selectedUsers.contains\(userListModel.) p n
0 T (indexOf\(message.getAuthor\(\)\)\)\)) N
(474) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( ) p
(true) k
(;) p n
(475) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(else) K n
(476) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( ) p
(false) k
(;) p n
(477) # () S 4 T () S 8 T () S 12 T () S 16 T (};) N
(478) # () S 4 T () S 8 T () S 12 T () S 16 T (storedMessage.stream\(\).sorted\(\).filter\(selectionFilter\).forEach\(messagePrinter\);) N
(479) # () S 4 T () S 8 T () S 12 T (} ) S
(else) K
( {) p n
(480) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (filterMenuItem.setSelected\() S
(false) k
(\);) p n
(481) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (filterButton.setSelected\() S
(false) k
(\);) p n
(482) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (storedMessage.stream\(\).sorted\(\).forEach\(messagePrinter\);) N
(483) # () S 4 T () S 8 T () S 12 T (}) N
(484) # () S 4 T () S 8 T (}) N
(485) # () S 4 T (}) N
(ClientFrame2.java) (Page 6/10) (mai 22, 17 21:41) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/ClientFrame2.java) (49/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 50
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(486) # () p n
(487) # () S 4 T () S
(private) K
( ) p
(class) K
( ) p
(SortAction) L
( ) p
(extends) K
( AbstractAction) p n
(488) # () S 4 T ({) N
(489) # () S 4 T () S 8 T () S
(boolean) k
( date = ) p
(true) k
(;) p n
(490) # () S 4 T () S 8 T () S
(boolean) k
( content = ) p
(true) k
(;) p n
(491) # () S 4 T () S 8 T () S
(boolean) k
( author = ) p
(true) k
(;) p n
(492) # () N
(493) # () S 4 T () S 8 T () S
(public) K
( SortAction\(String str\)) p n
(494) # () S 4 T () S 8 T ({) N
(495) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, str\);) N
(496) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Sort the messages by ) str
(" + str\);) p n
(497) # () S 4 T () S 8 T () S 12 T () N
(498) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(str.equals\(") p
(Date) str
("\)\)) p n
(499) # () S 4 T () S 8 T () S 12 T () S 16 T (date = ) S
(true) k
(;) p n
(500) # () S 4 T () S 8 T () S 12 T () N
(501) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(str.equals\(") p
(Content) str
("\)\)) p n
(502) # () S 4 T () S 8 T () S 12 T () S 16 T (content = ) S
(true) k
(;) p n
(503) # () S 4 T () S 8 T () S 12 T () N
(504) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(str.equals\(") p
(Author) str
("\)\)) p n
(505) # () S 4 T () S 8 T () S 12 T () S 16 T (author = ) S
(true) k
(;) p n
(506) # () S 4 T () S 8 T (}) N
(507) # () S 4 T () S 8 T () N
(508) # () S 4 T () S 8 T (@Override) N
(509) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent evt\)) p n
(510) # () S 4 T () S 8 T ({) N
(511) # () S 4 T () S 8 T () S 12 T (Consumer<Message> messagePrinter = \(Message message\) ) S
(\256) sy
( writerMessage\(message\);) p n
(512) # () N
(513) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(date\) {) p n
(514) # () S 4 T () S 8 T () S 12 T () S 16 T (Message.addOrder\(Message.MessageOrder.DATE\);) N
(515) # () S 4 T () S 8 T () S 12 T () S 16 T (Message.removeOrder\(Message.MessageOrder.CONTENT\);) N
(516) # () S 4 T () S 8 T () S 12 T () S 16 T (Message.removeOrder\(Message.MessageOrder.AUTHOR\);) N
(517) # () S 4 T () S 8 T () S 12 T (} ) S
(else) K
( ) p
(if) K
( \(content\) {) p n
(518) # () S 4 T () S 8 T () S 12 T () S 16 T (Message.removeOrder\(Message.MessageOrder.DATE\);) N
(519) # () S 4 T () S 8 T () S 12 T () S 16 T (Message.addOrder\(Message.MessageOrder.CONTENT\);) N
(520) # () S 4 T () S 8 T () S 12 T () S 16 T (Message.removeOrder\(Message.MessageOrder.AUTHOR\);) N
(521) # () S 4 T () S 8 T () S 12 T (} ) S
(else) K
( ) p
(if) K
( \(author\) {) p n
(522) # () S 4 T () S 8 T () S 12 T () S 16 T (Message.removeOrder\(Message.MessageOrder.DATE\);) N
(523) # () S 4 T () S 8 T () S 12 T () S 16 T (Message.removeOrder\(Message.MessageOrder.CONTENT\);) N
(524) # () S 4 T () S 8 T () S 12 T () S 16 T (Message.addOrder\(Message.MessageOrder.AUTHOR\);) N
(525) # () S 4 T () S 8 T () S 12 T (}) N
(526) # () S 4 T () S 8 T () S 12 T () N
(527) # () S 4 T () S 8 T () S 12 T () S
(try) K
( {) p n
(528) # () S 4 T () S 8 T () S 12 T () S 16 T (document.remove\(0, document.getLength\(\)\);) N
(529) # () S 4 T () S 8 T () S 12 T (} ) S
(catch) K
( \(BadLocationException e\){) p n
(530) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ClientFrame: bad location) str
("\);) p n
(531) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(e.getLocalizedMessage\(\)\);) N
(532) # () S 4 T () S 8 T () S 12 T (}) N
(533) # () N
(534) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(filterButton.isSelected\(\)\)) p n
(535) # () S 4 T () S 8 T () S 12 T ({) N
(536) # () S 4 T () S 8 T () S 12 T () S 16 T (Predicate<Message> selectionFilter = \(Message message\) ) S
(\256) sy n
(537) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(538) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(message ) p
(\271) sy
( ) p
(null) k
( ) p
(\331) sy
( message.hasAuthor\(\) ) p
(\331) sy
( selectedUsers.contains\(userListModel.) p n
0 T (indexOf\(message.getAuthor\(\)\)\)\)) N
(539) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( ) p
(true) k
(;) p n
(540) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(else) K n
(541) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( ) p
(false) k
(;) p n
(542) # () S 4 T () S 8 T () S 12 T () S 16 T (};) N
(543) # () S 4 T () S 8 T () S 12 T () S 16 T (storedMessage.stream\(\).sorted\(\).filter\(selectionFilter\).forEach\(messagePrinter\);) N
(544) # () S 4 T () S 8 T () S 12 T (} ) S
(else) K
( {) p n
(545) # () S 4 T () S 8 T () S 12 T () S 16 T (storedMessage.stream\(\).sorted\(\).forEach\(messagePrinter\);) N
(546) # () S 4 T () S 8 T () S 12 T (}) N
(547) # () S 4 T () S 8 T (}) N
(548) # () S 4 T (}) N
(549) # () N
(550) # () S 4 T () S
(private) K
( ) p
(class) K
( ) p
(ClearSelectedAction) L
( ) p
(extends) K
( AbstractAction{) p n
(551) # () S 4 T () S 8 T () S
(public) K
( ClearSelectedAction\(\)) p n
(552) # () S 4 T () S 8 T ({) N
(553) # () S 4 T () S 8 T () S 12 T (putValue\(SMALL_ICON, ) S
(new) K
( ImageIcon\(ClientFrame2.class.getResource\(") p
(/icons/delete_database-16.png) str
() p n
0 T ("\)\)\);) N
(554) # () S 4 T () S 8 T () S 12 T (putValue\(LARGE_ICON_KEY, ) S
(new) K
( ImageIcon\(ClientFrame2.class.getResource\(") p
(/icons/delete_database-3) str n
0 T (2.png) S
("\)\)\);) p n
(555) # () S 4 T () S 8 T () S 12 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_C, InputEvent.META_MASK\)\);) N
(556) # () S 4 T () S 8 T () S 12 T (putValue\(NAME, ") S
(Clear selected) str
("\);) p n
(557) # () S 4 T () S 8 T () S 12 T (putValue\(SHORT_DESCRIPTION, ") S
(Clear messages of the selected users) str
("\);) p n
(558) # () S 4 T () S 8 T (}) N
(559) # () S 4 T () S 8 T () N
(560) # () S 4 T () S 8 T (@Override) N
(561) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent evt\)) p n
(562) # () S 4 T () S 8 T ({) N
(563) # () S 4 T () S 8 T () S 12 T () S
(try) K
( {) p n
(564) # () S 4 T () S 8 T () S 12 T () S 16 T (document.remove\(0, document.getLength\(\)\);) N
(ClientFrame2.java) (Page 7/10) (mai 22, 17 21:41) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(565) # () p 4 T () S 8 T () S 12 T (} ) S
(catch) K
( \(BadLocationException e\) {) p n
(566) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ClientFrame2: clear doc: bad location) str
("\);) p n
(567) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(e.getLocalizedMessage\(\)\);) N
(568) # () S 4 T () S 8 T () S 12 T (}) N
(569) # () N
(570) # () S 4 T () S 8 T () S 12 T (Vector<Message> remainingmessage = ) S
(new) K
( Vector<>\(\);) p n
(571) # () N
(572) # () S 4 T () S 8 T () S 12 T () S
(for) K
( \(Message message : storedMessage\)) p n
(573) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(message.hasAuthor\(\) ) p
(\331) sy
( ) p
(\330) sy
(selectedUsers.contains\(userListModel.indexOf\(message.get) p n
0 T (Author\(\)\)\)\)) N
(574) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (remainingmessage.add\(message\);) N
(575) # () N
(576) # () S 4 T () S 8 T () S 12 T (storedMessage = ) S
(new) K
( Vector<>\(remainingmessage\);) p n
(577) # () N
(578) # () S 4 T () S 8 T () S 12 T (Consumer<Message> messagePrinter = \(Message message\) ) S
(\256) sy
( writerMessage\(message\);) p n
(579) # () N
(580) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(filterButton.isSelected\(\)\) {) p n
(581) # () S 4 T () S 8 T () S 12 T () S 16 T (Predicate<Message> selectionFilter = \(Message message\) ) S
(\256) sy n
(582) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(583) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(message ) p
(\271) sy
( ) p
(null) k
( ) p
(\331) sy
( message.hasAuthor\(\) ) p
(\331) sy
( selectedUsers.contains\(userListModel.) p n
0 T (indexOf\(message.getAuthor\(\)\)\)\)) N
(584) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( ) p
(true) k
(;) p n
(585) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(else) K n
(586) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( ) p
(false) k
(;) p n
(587) # () S 4 T () S 8 T () S 12 T () S 16 T (};) N
(588) # () N
(589) # () S 4 T () S 8 T () S 12 T () S 16 T (storedMessage.stream\(\).sorted\(\).filter\(selectionFilter\).forEach\(messagePrinter\);) N
(590) # () S 4 T () S 8 T () S 12 T (} ) S
(else) K
( {) p n
(591) # () S 4 T () S 8 T () S 12 T () S 16 T (storedMessage.stream\(\).sorted\(\).forEach\(messagePrinter\);) N
(592) # () S 4 T () S 8 T () S 12 T (}) N
(593) # () S 4 T () S 8 T (}) N
(594) # () S 4 T (}) N
(595) # () S 4 T () N
(596) # () S 4 T () S
(private) K
( ) p
(class) K
( ) p
(KickSelectedUsersAction) L
( ) p
(extends) K
( AbstractAction{) p n
(597) # () S 4 T () S 8 T () S 12 T () S
(public) K
( KickSelectedUsersAction\(\)) p n
(598) # () S 4 T () S 8 T () S 12 T ({) N
(599) # () S 4 T () S 8 T () S 12 T () S 16 T (putValue\(SMALL_ICON, ) S
(new) K
( ImageIcon\(ClientFrame2.class.getResource\(") p
(/icons/remove_user-16.p) str n
0 T (ng) S
("\)\)\);) p n
(600) # () S 4 T () S 8 T () S 12 T () S 16 T (putValue\(LARGE_ICON_KEY, ) S
(new) K
( ImageIcon\(ClientFrame2.class.getResource\(") p
(/icons/remove_use) str n
0 T (r-32.png) S
("\)\)\);) p n
(601) # () S 4 T () S 8 T () S 12 T () S 16 T (putValue\(ACCELERATOR_KEY, KeyStroke.getKeyStroke\(KeyEvent.VK_K, InputEvent.META_MASK) N
0 T (\)\);) N
(602) # () S 4 T () S 8 T () S 12 T () S 16 T (putValue\(NAME, ") S
(Kick Selected Users) str
("\);) p n
(603) # () S 4 T () S 8 T () S 12 T () S 16 T (putValue\(SHORT_DESCRIPTION, ") S
(Send a request to the server to kick the selected users) str
("\);) p n
(604) # () S 4 T () S 8 T () S 12 T (}) N
(605) # () S 4 T () S 8 T () S 12 T () N
(606) # () S 4 T () S 8 T () S 12 T (@Override) N
(607) # () S 4 T () S 8 T () S 12 T () S
(public) K
( ) p
(void) k
( actionPerformed\(ActionEvent evt\)) p n
(608) # () S 4 T () S 8 T () S 12 T ({) N
(609) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(for) K
(\() p
(int) k
( i = 0; i < selectedUsers.size\(\); ++i\) {) p n
(610) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (String currentUser = userListModel.getElementAt\(i\);) N
(611) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () N
(612) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
(\() p
(\330) sy
(currentUser.equals\(nameUser\)\) ) p n
(613) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (outPW.println\(") S
(Kick ) str
(" + currentUser\);) p n
(614) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(615) # () S 4 T () S 8 T () S 12 T (}) N
(616) # () S 4 T (}) N
(617) # () N
(618) # () S 4 T () S
(/**) C n
(619) # () S 4 T ( * Classe g\303\251rant la fermeture correcte de la fen\303\252tre. La fermeture correcte) N
(620) # () S 4 T ( * de la fen\303\250tre implique de lancer un cleanup) N
(621) # () S 4 T ( */) N
(622) # () S
() p 4 T () S
(protected) K
( ) p
(class) K
( ) p
(FrameWindowListener) L
( ) p
(extends) K
( WindowAdapter) p n
(623) # () S 4 T ({) N
(624) # () S 4 T () S 8 T () S
(/**) C n
(625) # () S 4 T () S 8 T ( * M\303\251thode d\303\251clench\303\251e \303\240 la fermeture de la fen\303\252tre. Envoie la commande) N
(626) # () S 4 T () S 8 T ( * "bye" au serveur) N
(627) # () S 4 T () S 8 T ( */) N
(628) # () S
() p 4 T () S 8 T (@Override) N
(629) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( windowClosing\(WindowEvent evt\)) p n
(630) # () S 4 T () S 8 T ({) N
(631) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(FrameWindowListener::windowClosing: sending bye ... ) str
("\);) p n
(632) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(quitAction ) p
(\271) sy
( ) p
(null) k
(\)) p n
(633) # () S 4 T () S 8 T () S 12 T () S 16 T (quitAction.actionPerformed\() S
(null) k
(\);) p n
(634) # () S 4 T () S 8 T (}) N
(635) # () S 4 T (}) N
(636) # () N
(637) # () N
(638) # () S 4 T () S
(public) K
( ) p
(static) K
( ) p
(class) K
( ) p
(ColorTextRenderer) L
( ) p
(extends) K
( JLabel ) p
(implements) K
( ListCellRenderer<String>) p n
(639) # () S 4 T ({) N
(640) # () S 4 T () S 8 T () S
(private) K
( Color color = ) p
(null) k
(;) p n
(641) # () N
(ClientFrame2.java) (Page 8/10) (mai 22, 17 21:41) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/ClientFrame2.java) (50/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 51
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(642) # () p 4 T () S 8 T (@Override) N
(643) # () S 4 T () S 8 T () S
(public) K
( Component getListCellRendererComponent\(JList<? ) p
(extends) K
( String> list, String value, ) p
(in) k n
0 T (t) S
( index, ) p
(boolean) k
( isSelected, ) p
(boolean) k
( cellHasFocus\)) p n
(644) # () S 4 T () S 8 T ({) N
(645) # () S 4 T () S 8 T () S 12 T (color = list.getForeground\(\);) N
(646) # () S 4 T () S 8 T () S 12 T () N
(647) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(value ) p
(\271) sy
( ) p
(null) k
( ) p
(\331) sy
( value.length\(\) > 0\)) p n
(648) # () S 4 T () S 8 T () S 12 T () S 16 T (color = ) S
(new) K
( Color\(value.hashCode\(\)\).brighter\(\);) p n
(649) # () S 4 T () S 8 T () S 12 T () N
(650) # () S 4 T () S 8 T () S 12 T (setText\(value\);) N
(651) # () S 4 T () S 8 T () S 12 T () N
(652) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(isSelected\) {) p n
(653) # () S 4 T () S 8 T () S 12 T () S 16 T (setBackground\(color\);) N
(654) # () S 4 T () S 8 T () S 12 T () S 16 T (setForeground\(list.getSelectionForeground\(\)\);) N
(655) # () S 4 T () S 8 T () S 12 T (} ) S
(else) K
( {) p n
(656) # () S 4 T () S 8 T () S 12 T () S 16 T (setBackground\(list.getBackground\(\)\);) N
(657) # () S 4 T () S 8 T () S 12 T () S 16 T (setForeground\(color\);) N
(658) # () S 4 T () S 8 T () S 12 T (}) N
(659) # () S 4 T () S 8 T () S 12 T () N
(660) # () S 4 T () S 8 T () S 12 T (setEnabled\(list.isEnabled\(\)\);) N
(661) # () S 4 T () S 8 T () S 12 T (setFont\(list.getFont\(\)\);) N
(662) # () S 4 T () S 8 T () S 12 T (setOpaque\() S
(true) k
(\);) p n
(663) # () S 4 T () S 8 T () S 12 T () N
(664) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(this) k
(;) p n
(665) # () S 4 T () S 8 T (}) N
(666) # () S 4 T (}) N
(667) # () S 4 T () N
(668) # () S 4 T () S
(//permet de d\303\251clencher le menu contextuel) c n
(669) # () S
() p 4 T () S
(public) K
( ) p
(class) K
( ) p
(PopupListener) L
( ) p
(extends) K
( MouseAdapter) p n
(670) # () S 4 T ({) N
(671) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( mousePressed\(MouseEvent evt\)) p n
(672) # () S 4 T () S 8 T ({) N
(673) # () S 4 T () S 8 T () S 12 T (maybeShowPopup\(evt\);) N
(674) # () S 4 T () S 8 T (}) N
(675) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( mouseReleased\(MouseEvent evt\)) p n
(676) # () S 4 T () S 8 T ({) N
(677) # () S 4 T () S 8 T () S 12 T (maybeShowPopup\(evt\);) N
(678) # () S 4 T () S 8 T (}) N
(679) # () S 4 T () S 8 T () S
(private) K
( ) p
(void) k
( maybeShowPopup\(MouseEvent evt\)) p n
(680) # () S 4 T () S 8 T ({) N
(681) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(evt.isPopupTrigger\(\)\)) p n
(682) # () S 4 T () S 8 T () S 12 T () S 16 T (popupMenu.show\(evt.getComponent\(\), evt.getX\(\), evt.getY\(\)\);) N
(683) # () S 4 T () S 8 T (}) N
(684) # () S 4 T (}) N
(685) # () N
(686) # () S 4 T () S
(/**) C n
(687) # () S 4 T ( * Ex\303\251cution de la boucle d'ex\303\251cution. La boucle d'ex\303\251cution consiste \303\240 lire) N
(688) # () S 4 T ( * une ligne sur le flux d'entr\303\251e avec un BufferedReader tant qu'une erreur) N
(689) # () S 4 T ( * d'IO n'intervient pas indiquant que le flux a \303\251t\303\251 coup\303\251. Auquel cas on) N
(690) # () S 4 T ( * quitte la boucle principale et on ferme les flux d'I/O avec #cleanup\(\)) N
(691) # () S 4 T ( */) N
(692) # () S
() p 4 T (@Override) N
(693) # () S 4 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(694) # () S 4 T ({) N
(695) # () S 4 T () S 8 T () S
(try) K
( {) p n
(696) # () S 4 T () S 8 T () S 12 T (inOS = ) S
(new) K
( ObjectInputStream\(inPipe\);) p n
(697) # () S 4 T () S 8 T (} ) S
(catch) K
( \(IOException e\) {) p n
(698) # () S 4 T () S 8 T () S 12 T (logger.severe\(Failure.CLIENT_INPUT_STREAM) N
(699) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (+ ") S
( unable to get user piped in stream) str
("\);) p n
(700) # () S 4 T () S 8 T () S 12 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(701) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.CLIENT_INPUT_STREAM.toInteger\(\)\);) N
(702) # () S 4 T () S 8 T (}) N
(703) # () N
(704) # () S 4 T () S 8 T (Message messageIn;) N
(705) # () N
(706) # () S 4 T () S 8 T () S
(while) K
( \(commonRun.booleanValue\(\)\) {) p n
(707) # () S 4 T () S 8 T () S 12 T (messageIn = ) S
(null) k
(;) p n
(708) # () N
(709) # () S 4 T () S 8 T () S 12 T () S
(try) K
( {) p n
(710) # () S 4 T () S 8 T () S 12 T () S 16 T (messageIn = \(Message\) inOS.readObject\(\);) N
(711) # () S 4 T () S 8 T () S 12 T (} ) S
(catch) K
( \(IOException e\) {) p n
(712) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ClientFrame2: io error at reading) str
("\);) p n
(713) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(break) K
(;) p n
(714) # () S 4 T () S 8 T () S 12 T (} ) S
(catch) K
( \(ClassNotFoundException e\) {) p n
(715) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ClientFrame2: class not found reading) str
("\);) p n
(716) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(break) K
(;) p n
(717) # () S 4 T () S 8 T () S 12 T (}) N
(718) # () N
(719) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(messageIn ) p
(\271) sy
( ) p
(null) k
(\) {) p n
(720) # () S 4 T () S 8 T () S 12 T () S 16 T (storedMessage.add\(messageIn\);) N
(721) # () N
(722) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(messageIn.hasAuthor\(\) ) p
(\331) sy
( ) p
(\330) sy
(userListModel.contains\(messageIn.getAuthor\(\)\)\)) p n
(ClientFrame2.java) (Page 9/10) (mai 22, 17 21:41) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(723) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (userListModel.add\(messageIn.getAuthor\(\)\);) N
(724) # () S 4 T () S 8 T () S 12 T (} ) S
(else) K
( {) p n
(725) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(break) K
(;) p n
(726) # () S 4 T () S 8 T () S 12 T (}) N
(727) # () S 4 T () S 8 T () S 12 T () N
(728) # () S 4 T () S 8 T () S 12 T () S
(try) K
( {) p n
(729) # () S 4 T () S 8 T () S 12 T () S 16 T (document.remove\(0, document.getLength\(\)\);) N
(730) # () S 4 T () S 8 T () S 12 T (} ) S
(catch) K
( \(BadLocationException e\) {) p n
(731) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(ClientFrame: bad location) str
("\);) p n
(732) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(e.getLocalizedMessage\(\)\);) N
(733) # () S 4 T () S 8 T () S 12 T (}) N
(734) # () S 4 T () S 8 T () S 12 T () N
(735) # () S 4 T () S 8 T () S 12 T (Consumer<Message> messagePrinter = \(Message message\) ) S
(\256) sy
( writerMessage\(message\);) p n
(736) # () N
(737) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(filterButton.isSelected\(\)\) {) p n
(738) # () S 4 T () S 8 T () S 12 T () S 16 T (Predicate<Message> selectionFilter = \(Message message\) ) S
(\256) sy n
(739) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(740) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(message ) p
(\271) sy
( ) p
(null) k
( ) p
(\331) sy
( message.hasAuthor\(\) ) p
(\331) sy
( selectedUsers.contains\(userListModel.) p n
0 T (indexOf\(message.getAuthor\(\)\)\)\)) N
(741) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( ) p
(true) k
(;) p n
(742) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(else) K n
(743) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( ) p
(false) k
(;) p n
(744) # () S 4 T () S 8 T () S 12 T () S 16 T (};) N
(745) # () S 4 T () S 8 T () S 12 T () S 16 T (storedMessage.stream\(\).sorted\(\).filter\(selectionFilter\).forEach\(messagePrinter\);) N
(746) # () S 4 T () S 8 T () S 12 T (} ) S
(else) K
( {) p n
(747) # () S 4 T () S 8 T () S 12 T () S 16 T (storedMessage.stream\(\).sorted\(\).forEach\(messagePrinter\);) N
(748) # () S 4 T () S 8 T () S 12 T (}) N
(749) # () S 4 T () S 8 T (}) N
(750) # () S 4 T () S 8 T () S
(if) K
( \(commonRun.booleanValue\(\)\) {) p n
(751) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(ClientFrame2::cleanup: changing run state at the end ... ) str
("\);) p n
(752) # () S 4 T () S 8 T () S 12 T () N
(753) # () S 4 T () S 8 T () S 12 T () S
(synchronized) K
( \(commonRun\) {) p n
(754) # () S 4 T () S 8 T () S 12 T () S 16 T (commonRun = Boolean.FALSE;) N
(755) # () S 4 T () S 8 T () S 12 T (}) N
(756) # () S 4 T () S 8 T (}) N
(757) # () S 4 T () S 8 T (cleanup\(\);) N
(758) # () S 4 T (}) N
(759) # () S 4 T (@Override) N
(760) # () S 4 T () S
(public) K
( ) p
(void) k
( cleanup\(\)) p n
(761) # () S 4 T ({) N
(762) # () S 4 T () S 8 T (logger.info\(") S
(ClientFrame2::cleanup: closing input buffered reader ... ) str
("\);) p n
(763) # () S 4 T () S 8 T () N
(764) # () S 4 T () S 8 T () S
(try) K
( {) p n
(765) # () S 4 T () S 8 T () S 12 T (inOS.close\(\);) N
(766) # () S 4 T () S 8 T (} ) S
(catch) K
( \(IOException e\) {) p n
(767) # () S 4 T () S 8 T () S 12 T (logger.warning\(") S
(ClientFrame2::cleanup: failed to close input reader) str
(" + e.getLocalizedMessage\(\)\);) p n
(768) # () S 4 T () S 8 T (}) N
(769) # () S 4 T () S 8 T () N
(770) # () S 4 T () S 8 T (super.cleanup\(\);) N
(771) # () S 4 T (}) N
(772) # (}) N
(ClientFrame2.java) (Page 10/10) (mai 22, 17 21:41) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/ClientFrame2.java) (51/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 52
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/**) C n
(2) # ( * Package contenant les classes de l'interface graphique) N
(3) # ( */) N
(4) # () S
(package) K
( widgets;) p n
(package-info.java) (Page 1/1) (d\303\251c. 30, 12 22:08) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( examples;) p n
(2) # () S
(import) K
( java.util.ArrayList;) p n
(3) # () S
(import) K
( java.util.Collection;) p n
(4) # () N
(5) # () S
(/**) C n
(6) # ( * Exemple de classe impl\303\251mentant un Runnable et lanc\303\251 dans un Thread) N
(7) # ( *) N
(8) # ( * @author davidroussel) N
(9) # ( */) N
(10) # () S
(public) K
( ) p
(class) K
( ) p
(RunRunnableExample) L n
(11) # () S
({) p n
(12) # () S 4 T () S
(/**) C n
(13) # () S 4 T ( * Classe interne repr\303\251sentant un simple compteur \303\240 ex\303\251cuter dans un thread.) N
(14) # () S 4 T ( * Le compteur compte de 0 \303\240 une valeur max. Lorsque le compteur atteint la) N
(15) # () S 4 T ( * valeur max le compteur s'arr\303\252te.) N
(16) # () S 4 T ( * @author davidroussel) N
(17) # () S 4 T ( */) N
(18) # () S
() p 4 T () S
(protected) K
( ) p
(static) K
( ) p
(class) K
( ) p
(Counter) L
( ) p
(implements) K
( Runnable) p n
(19) # () S 4 T ({) N
(20) # () S 4 T () S 8 T () S
(/**) C n
(21) # () S 4 T () S 8 T ( * Nombre de compteurs instanci\303\251s) N
(22) # () S 4 T () S 8 T ( */) N
(23) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(static) K
( ) p
(int) k
( CounterNumber = 0;) p n
(24) # () N
(25) # () S 4 T () S 8 T () S
(/**) C n
(26) # () S 4 T () S 8 T ( * Le num\303\251ro de compteur) N
(27) # () S 4 T () S 8 T ( */) N
(28) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(int) k
( number;) p n
(29) # () S 4 T () S 8 T () S
(/**) C n
(30) # () S 4 T () S 8 T ( * Le compteur proprement dit) N
(31) # () S 4 T () S 8 T ( */) N
(32) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(int) k
( count;) p n
(33) # () N
(34) # () S 4 T () S 8 T () S
(/**) C n
(35) # () S 4 T () S 8 T ( * La valeur max du compteur) N
(36) # () S 4 T () S 8 T ( */) N
(37) # () S
() p 4 T () S 8 T () S
(private) K
( ) p
(int) k
( max;) p n
(38) # () N
(39) # () S 4 T () S 8 T () S
(/**) C n
(40) # () S 4 T () S 8 T ( * Constructeur valu\303\251 du compteur) N
(41) # () S 4 T () S 8 T ( * @param max la valeur max du compteur \303\240 laquelle il s'arr\303\252te) N
(42) # () S 4 T () S 8 T ( */) N
(43) # () S
() p 4 T () S 8 T () S
(public) K
( Counter\() p
(int) k
( max\)) p n
(44) # () S 4 T () S 8 T ({) N
(45) # () S 4 T () S 8 T () S 12 T (number = ++CounterNumber;) N
(46) # () S 4 T () S 8 T () S 12 T (count = 0;) N
(47) # () S 4 T () S 8 T () S 12 T (this.max = max;) N
(48) # () S 4 T () S 8 T (}) N
(49) # () N
(50) # () S 4 T () S 8 T () S
(/**) C n
(51) # () S 4 T () S 8 T ( * Nettoyage lors de la destruction) N
(52) # () S 4 T () S 8 T ( * @see java.lang.Object#finalize\(\)) N
(53) # () S 4 T () S 8 T ( */) N
(54) # () S
() p 4 T () S 8 T (@Override) N
(55) # () S 4 T () S 8 T () S
(protected) K
( ) p
(void) k
( finalize\(\) ) p
(throws) K
( Throwable) p n
(56) # () S 4 T () S 8 T ({) N
(57) # () S 4 T () S 8 T () S 12 T (CounterNumber--;) N
(58) # () S 4 T () S 8 T (}) N
(59) # () N
(60) # () S 4 T () S 8 T () S
(/**) C n
(61) # () S 4 T () S 8 T ( * Boucle d'\303\251x\303\251cution principale du compteur : Tant que le compteur n'a) N
(62) # () S 4 T () S 8 T ( * pas atteint la valeur max le compteur incr\303\251mente son compteur de 1,) N
(63) # () S 4 T () S 8 T ( * affiche la valeur courante du compteur puis on demande au thread) N
(64) # () S 4 T () S 8 T ( * dans lequel il tourne de passer la main \303\240 un autre thread \(en) N
(65) # () S 4 T () S 8 T ( * esp\303\251rant que ceux ci nous repassent la main un jour afin que l'on) N
(66) # () S 4 T () S 8 T ( * puisse continuer \303\240 compter\).) N
(67) # () S 4 T () S 8 T ( */) N
(68) # () S
() p 4 T () S 8 T (@Override) N
(69) # () S 4 T () S 8 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(70) # () S 4 T () S 8 T ({) N
(71) # () S 4 T () S 8 T () S 12 T () S
(while) K
( \(count < max\)) p n
(72) # () S 4 T () S 8 T () S 12 T ({) N
(73) # () S 4 T () S 8 T () S 12 T () S 16 T (count++;) N
(74) # () N
(75) # () S 4 T () S 8 T () S 12 T () S 16 T (System.out.println\() S
(this) k
(\); ) p
(// utilisation du toString) c n
(76) # () N
(77) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// passe la main \303\240 d'autres threads \(si besoin\)) c n
(78) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (Thread.yield\(\);) N
(79) # () S 4 T () S 8 T () S 12 T (}) N
(80) # () S 4 T () S 8 T (}) N
(81) # () N
(82) # () S 4 T () S 8 T () S
(/**) C n
(RunRunnableExample.java) (Page 1/3) (janv. 22, 15 15:02) title
border
grestore
(Printed by Pierre) rhead
(src/widgets/package-info.java, src/examples/RunRunnableExample.java) (52/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 53
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () C 4 T () S 8 T ( * Repr\303\251sentation sous forme de chaine de caract\303\250res) N
(84) # () S 4 T () S 8 T ( * @see java.lang.Object#toString\(\)) N
(85) # () S 4 T () S 8 T ( */) N
(86) # () S
() p 4 T () S 8 T (@Override) N
(87) # () S 4 T () S 8 T () S
(public) K
( String toString\(\)) p n
(88) # () S 4 T () S 8 T ({) N
(89) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ) p
(new) K
( String\(") p
(Counter #) str
(" + number + ") p
( = ) str
(" + count\);) p n
(90) # () S 4 T () S 8 T (}) N
(91) # () S 4 T (}) N
(92) # () N
(93) # () S 4 T () S
(/**) C n
(94) # () S 4 T ( * Collection de compteurs Runnable \303\240 lancer) N
(95) # () S 4 T ( */) N
(96) # () S
() p 4 T () S
(protected) K
( Collection<Counter> counters;) p n
(97) # () N
(98) # () S 4 T () S
(/**) C n
(99) # () S 4 T ( * Collection de threads dans lesquels on va vaire tourner les Counter.) N
(100) # () S 4 T ( */) N
(101) # () S
() p 4 T () S
(protected) K
( Collection<Thread> threads;) p n
(102) # () N
(103) # () S 4 T () S
(/**) C n
(104) # () S 4 T ( * Constructeur d'un RunnableExample.) N
(105) # () S 4 T ( * Cr\303\251e un certain nombre de compteur \(Runnable\), puis cr\303\251e le m\303\252me nombre) N
(106) # () S 4 T ( * de threads dans lesquels on place ces compteurs) N
(107) # () S 4 T ( */) N
(108) # () S
() p 4 T () S
(public) K
( RunRunnableExample\() p
(int) k
( nbCounters\)) p n
(109) # () S 4 T ({) N
(110) # () S 4 T () S 8 T (counters = ) S
(new) K
( ArrayList<Counter>\(nbCounters\);) p n
(111) # () S 4 T () S 8 T (threads = ) S
(new) K
( ArrayList<Thread>\(nbCounters\);) p n
(112) # () N
(113) # () S 4 T () S 8 T () S
(for) K
( \() p
(int) k
( i = 0; i < nbCounters; i++\)) p n
(114) # () S 4 T () S 8 T ({) N
(115) # () S 4 T () S 8 T () S 12 T (Counter c = ) S
(new) K
( Counter\(10\);) p n
(116) # () S 4 T () S 8 T () S 12 T (counters.add\(c\);) N
(117) # () N
(118) # () S 4 T () S 8 T () S 12 T (Thread t = ) S
(new) K
( Thread\(c\);) p n
(119) # () S 4 T () S 8 T () S 12 T (threads.add\(t\);) N
(120) # () S 4 T () S 8 T (}) N
(121) # () S 4 T (}) N
(122) # () N
(123) # () S 4 T () S
(/**) C n
(124) # () S 4 T ( * Lancement de tous les threads \(contenant les compteurs\)) N
(125) # () S 4 T ( */) N
(126) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( launch\(\)) p n
(127) # () S 4 T ({) N
(128) # () S 4 T () S 8 T () S
(for) K
( \(Thread t : threads\)) p n
(129) # () S 4 T () S 8 T ({) N
(130) # () S 4 T () S 8 T () S 12 T (t.start\(\);) N
(131) # () S 4 T () S 8 T (}) N
(132) # () S 4 T (}) N
(133) # () N
(134) # () S 4 T () S
(/**) C n
(135) # () S 4 T ( * attente de la fin de tous les threads pour terminer le thread principal) N
(136) # () S 4 T ( */) N
(137) # () S
() p 4 T () S
(public) K
( ) p
(void) k
( terminate\(\)) p n
(138) # () S 4 T ({) N
(139) # () S 4 T () S 8 T () S
(for) K
( \(Thread t : threads\)) p n
(140) # () S 4 T () S 8 T ({) N
(141) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(142) # () S
() p 4 T () S 8 T () S 12 T ({) N
(143) # () S 4 T () S 8 T () S 12 T () S 16 T (t.join\(\);) N
(144) # () S 4 T () S 8 T () S 12 T (}) N
(145) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(InterruptedException e\)) p n
(146) # () S 4 T () S 8 T () S 12 T ({) N
(147) # () S 4 T () S 8 T () S 12 T () S 16 T (System.err.println\(") S
(Thread) str
(" + t + ") p
( join interrupted) str
("\);) p n
(148) # () S 4 T () S 8 T () S 12 T () S 16 T (e.printStackTrace\(\);) N
(149) # () S 4 T () S 8 T () S 12 T (}) N
(150) # () S 4 T () S 8 T (}) N
(151) # () N
(152) # () S 4 T () S 8 T (System.out.println\(") S
(All threads terminated) str
("\);) p n
(153) # () S 4 T (}) N
(154) # () N
(155) # () S 4 T () S
(/**) C n
(156) # () S 4 T ( * Programme principal.) N
(157) # () S 4 T ( * Lancement de plusieurs Counters) N
(158) # () S 4 T ( *) N
(159) # () S 4 T ( * @param args arguments du programme pour y lire le nombre de compteurs \303\240) N
(160) # () S 4 T ( * lancer) N
(161) # () S 4 T ( */) N
(162) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(163) # () S 4 T ({) N
(164) # () S 4 T () S 8 T () S
(int) k
( nbCounters = 3;) p n
(RunRunnableExample.java) (Page 2/3) (janv. 22, 15 15:02) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T () S
(// on lit le nombre de counters dans le premier argument du programme) c n
(166) # () S
() p 4 T () S 8 T () S
(if) K
( \(args.length > 0\)) p n
(167) # () S 4 T () S 8 T ({) N
(168) # () S 4 T () S 8 T () S 12 T () S
(int) k
( value;) p n
(169) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(170) # () S
() p 4 T () S 8 T () S 12 T ({) N
(171) # () S 4 T () S 8 T () S 12 T () S 16 T (value = Integer.parseInt\(args[0]\);) N
(172) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(value > 0\)) p n
(173) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(174) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (nbCounters = value;) N
(175) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(176) # () S 4 T () S 8 T () S 12 T (}) N
(177) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(NumberFormatException nfe\)) p n
(178) # () S 4 T () S 8 T () S 12 T ({) N
(179) # () S 4 T () S 8 T () S 12 T () S 16 T (System.err.println\(") S
(Error reading number of counters) str
("\);) p n
(180) # () S 4 T () S 8 T () S 12 T (}) N
(181) # () S 4 T () S 8 T (}) N
(182) # () N
(183) # () S 4 T () S 8 T (RunRunnableExample runner = ) S
(new) K
( RunRunnableExample\(nbCounters\);) p n
(184) # () N
(185) # () S 4 T () S 8 T (runner.launch\(\);) N
(186) # () N
(187) # () S 4 T () S 8 T (System.out.println\(") S
(All threads launched) str
("\);) p n
(188) # () N
(189) # () S 4 T () S 8 T (runner.terminate\(\);) N
(190) # () S 4 T (}) N
(191) # (}) N
(RunRunnableExample.java) (Page 3/3) (janv. 22, 15 15:02) title
border
grestore
(Printed by Pierre) rhead
(src/examples/RunRunnableExample.java) (53/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 54
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( examples;) p n
(2) # () S
(import) K
( java.awt.EventQueue;) p n
(3) # () N
(4) # () S
(import) K
( examples.widgets.ExampleFrame;) p n
(5) # () N
(6) # () N
(7) # () S
(/**) C n
(8) # ( * Programme principal lan\303\247ant une {@link ExampleFrame}) N
(9) # ( * @author davidroussel) N
(10) # ( *) N
(11) # ( */) N
(12) # () S
(public) K
( ) p
(class) K
( ) p
(RunExampleFrame) L n
(13) # () S
({) p n
(14) # () S 4 T () S
(/**) C n
(15) # () S 4 T ( * Programme principal) N
(16) # () S 4 T ( * @param args) N
(17) # () S 4 T ( */) N
(18) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(19) # () S 4 T ({) N
(20) # () S 4 T () S 8 T () S
(if) K
( \(System.getProperty\(") p
(os.name) str
("\).startsWith\(") p
(Mac OS) str
("\)\)) p n
(21) # () S 4 T () S 8 T ({) N
(22) # () S 4 T () S 8 T () S 12 T () S
(// Met en place le menu en haut de l'\303\251cran plut\303\264t que dans l'application) c n
(23) # () S
() p 4 T () S 8 T () S 12 T (System.setProperty\(") S
(apple.laf.useScreenMenuBar) str
(", ") p
(true) str
("\);) p n
(24) # () S 4 T (        System.setProperty\(") S
(com.apple.mrj.application.apple.menu.about.name) str
(", ") p
(Name) str
("\);) p n
(25) # () S 4 T () S 8 T (}) N
(26) # () N
(27) # () S 4 T () S 8 T () S
(// Insertion de la frame dans la file des \303\251v\303\250nements GUI) c n
(28) # () S
() p 4 T () S 8 T (EventQueue.invokeLater\() S
(new) K
( Runnable\(\)) p n
(29) # () S 4 T () S 8 T ({) N
(30) # () S 4 T () S 8 T () S 12 T (@Override) N
(31) # () S 4 T () S 8 T () S 12 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(32) # () S 4 T () S 8 T () S 12 T ({) N
(33) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(try) K n
(34) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(35) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (ExampleFrame frame = ) S
(new) K
( ExampleFrame\(\);) p n
(36) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (frame.pack\(\);) N
(37) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (frame.setVisible\() S
(true) k
(\);) p n
(38) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(39) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(catch) K
( \(Exception e\)) p n
(40) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(41) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (e.printStackTrace\(\);) N
(42) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(43) # () S 4 T () S 8 T () S 12 T (}) N
(44) # () S 4 T () S 8 T (}\);) N
(45) # () S 4 T (}) N
(46) # (}) N
(RunExampleFrame.java) (Page 1/1) (d\303\251c. 23, 14 3:01) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (package) K
( examples;) p n
(2) # () S
(import) K
( java.awt.EventQueue;) p n
(3) # () N
(4) # () S
(import) K
( javax.swing.JFrame;) p n
(5) # () N
(6) # () S
(import) K
( examples.widgets.ExampleFrame;) p n
(7) # () S
(import) K
( examples.widgets.ListExampleFrame;) p n
(8) # () N
(9) # () N
(10) # () S
(/**) C n
(11) # ( * Programme principal lan\303\247ant une {@link ExampleFrame}) N
(12) # ( * @author davidroussel) N
(13) # ( *) N
(14) # ( */) N
(15) # () S
(public) K
( ) p
(class) K
( ) p
(RunListFrame) L n
(16) # () S
({) p n
(17) # () S 4 T () S
(/**) C n
(18) # () S 4 T ( * Programme principal) N
(19) # () S 4 T ( * @param args) N
(20) # () S 4 T ( */) N
(21) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(22) # () S 4 T ({) N
(23) # () S 4 T () S 8 T () S
(if) K
( \(System.getProperty\(") p
(os.name) str
("\).startsWith\(") p
(Mac OS) str
("\)\)) p n
(24) # () S 4 T () S 8 T ({) N
(25) # () S 4 T () S 8 T () S 12 T () S
(// Met en place le menu en haut de l'\303\251cran plut\303\264t que dans l'application) c n
(26) # () S
() p 4 T () S 8 T () S 12 T (System.setProperty\(") S
(apple.laf.useScreenMenuBar) str
(", ") p
(true) str
("\);) p n
(27) # () S 4 T (        System.setProperty\(") S
(com.apple.mrj.application.apple.menu.about.name) str
(", ") p
(Name) str
("\);) p n
(28) # () S 4 T () S 8 T (}) N
(29) # () N
(30) # () S 4 T () S 8 T () S
(// Insertion de la frame dans la file des \303\251v\303\250nements GUI) c n
(31) # () S
() p 4 T () S 8 T (EventQueue.invokeLater\() S
(new) K
( Runnable\(\)) p n
(32) # () S 4 T () S 8 T ({) N
(33) # () S 4 T () S 8 T () S 12 T (@Override) N
(34) # () S 4 T () S 8 T () S 12 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(35) # () S 4 T () S 8 T () S 12 T ({) N
(36) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(try) K n
(37) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(38) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (JFrame frame = ) S
(new) K
( ListExampleFrame\(\);) p n
(39) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (frame.pack\(\);) N
(40) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (frame.setVisible\() S
(true) k
(\);) p n
(41) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(42) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(catch) K
( \(Exception e\)) p n
(43) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(44) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (e.printStackTrace\(\);) N
(45) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(46) # () S 4 T () S 8 T () S 12 T (}) N
(47) # () S 4 T () S 8 T (}\);) N
(48) # () S 4 T (}) N
(49) # (}) N
(RunListFrame.java) (Page 1/1) (avril 12, 16 18:07) title
border
grestore
(Printed by Pierre) rhead
(src/examples/RunExampleFrame.java, src/examples/RunListFrame.java) (54/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 55
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (import) K
( java.io.IOException;) p n
(2) # () S
(import) K
( java.net.SocketException;) p n
(3) # () N
(4) # () S
(import) K
( chat.Failure;) p n
(5) # () S
(import) K
( chat.server.ChatServer;) p n
(6) # () N
(7) # () S
(/**) C n
(8) # ( * Classe/programme qui lance un serveur de chat) N
(9) # ( * @author davidroussel) N
(10) # ( */) N
(11) # () S
(public) K
( ) p
(class) K
( ) p
(RunChatServer) L
( ) p
(extends) K
( AbstractRunChat) p n
(12) # ({) N
(13) # () S 4 T () S
(/**) C n
(14) # () S 4 T ( * Time out de la server socket avant qu'elle ne recommence \303\240 attendre) N
(15) # () S 4 T ( * des connections des \303\251ventuels clients) N
(16) # () S 4 T ( */) N
(17) # () S
() p 4 T () S
(private) K
( ) p
(int) k
( timeout;) p n
(18) # () N
(19) # () S 4 T () S
(/**) C n
(20) # () S 4 T ( * Flag permettant \(ou pas\) de quitter le serveur lorsque le dernier) N
(21) # () S 4 T ( * client se d\303\251logue) N
(22) # () S 4 T ( */) N
(23) # () S
() p 4 T () S
(private) K
( ) p
(boolean) k
( quitOnLastclient;) p n
(24) # () N
(25) # () S 4 T () S
(/**) C n
(26) # () S 4 T ( * Default time out to wait for client connection : 5 seconds) N
(27) # () S 4 T ( */) N
(28) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(final) K
( ) p
(int) k
( DEFAULTTIMEOUT = 5000;) p n
(29) # () N
(30) # () S 4 T () S
(/**) C n
(31) # () S 4 T ( * Constructeur d'un lanceur de serveur d'apr\303\250s les arguments du programme) N
(32) # () S 4 T ( * principal) N
(33) # () S 4 T ( * @param args les arguments du programme principal) N
(34) # () S 4 T ( */) N
(35) # () S
() p 4 T () S
(protected) K
( RunChatServer\(String[] args\)) p n
(36) # () S 4 T ({) N
(37) # () S 4 T () S 8 T () S
(super) K
(\(args\);) p n
(38) # () S 4 T (}) N
(39) # () N
(40) # () S 4 T () S
(/**) C n
(41) # () S 4 T ( * Mise en place des attributs du serveur de chat en fonction des arguments) N
(42) # () S 4 T ( * utilis\303\251s dans la ligne de commande) N
(43) # () S 4 T ( * @param args les arguments fournis au programme principal.) N
(44) # () S 4 T ( */) N
(45) # () S
() p 4 T (@Override) N
(46) # () S 4 T () S
(protected) K
( ) p
(void) k
( setAttributes\(String[] args\)) p n
(47) # () S 4 T ({) N
(48) # () S 4 T () S 8 T () S
(/*) c n
(49) # () S 4 T () S 8 T ( * On met d'abord les attributs locaux \303\240 leur valeur par d\303\251faut) N
(50) # () S 4 T () S 8 T ( */) N
(51) # () S
() p 4 T () S 8 T (timeout = DEFAULTTIMEOUT;) N
(52) # () S 4 T () S 8 T (quitOnLastclient = ) S
(true) k
(;) p n
(53) # () N
(54) # () S 4 T () S 8 T () S
(/*) c n
(55) # () S 4 T () S 8 T ( * parsing des arguments communs aux clients et serveur) N
(56) # () S 4 T () S 8 T ( * ) S 12 T (-v | --verbose) N
(57) # () S 4 T () S 8 T ( * ) S 12 T (-p | --port : port \303\240 utiliser pour la serverSocket) N
(58) # () S 4 T () S 8 T ( */) N
(59) # () S
() p 4 T () S 8 T (super.setAttributes\(args\);) N
(60) # () N
(61) # () S 4 T () S 8 T () S
(/*) c n
(62) # () S 4 T () S 8 T ( * parsing des arguments sp\303\251cifique au  serveur) N
(63) # () S 4 T () S 8 T ( * ) S 12 T (-t | --timeout : timeout d'attente de la server socket) N
(64) # () S 4 T () S 8 T ( */) N
(65) # () S
() p 4 T () S 8 T () S
(for) K
( \() p
(int) k
( i=0; i < args.length; i++\)) p n
(66) # () S 4 T () S 8 T ({) N
(67) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(args[i].equals\(") p
(--timeout) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-t) str
("\)\)) p n
(68) # () S 4 T () S 8 T () S 12 T ({) N
(69) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(i < \(args.length - 1\)\)) p n
(70) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(71) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// parse next arg for in port value) c n
(72) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Integer timeInteger = readInt\(args[++i]\);) N
(73) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
( \(timeInteger ) p
(\271) sy
( ) p
(null) k
(\)) p n
(74) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(75) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (timeout = timeInteger.intValue\(\);) N
(76) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(77) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.info\(") S
(Setting timeout to ) str
(" + timeout\);) p n
(78) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(79) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(80) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(81) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.warning\(") S
(invalid timeout value) str
("\);) p n
(82) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(RunChatServer.java) (Page 1/2) (avril 13, 16 18:48) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p 4 T () S 8 T () S 12 T (}) N
(84) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(args[i].equals\(") p
(--quit) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-q) str
("\)\)) p n
(85) # () S 4 T () S 8 T () S 12 T ({) N
(86) # () S 4 T () S 8 T () S 12 T () S 16 T (quitOnLastclient = ) S
(true) k
(;) p n
(87) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.info\(") S
(Setting quit on last client to true) str
("\);) p n
(88) # () S 4 T () S 8 T () S 12 T (}) N
(89) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(args[i].equals\(") p
(--noquit) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-n) str
("\)\)) p n
(90) # () S 4 T () S 8 T () S 12 T ({) N
(91) # () S 4 T () S 8 T () S 12 T () S 16 T (quitOnLastclient = ) S
(false) k
(;) p n
(92) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.info\(") S
(Setting quit on last client to false) str
("\);) p n
(93) # () S 4 T () S 8 T () S 12 T (}) N
(94) # () S 4 T () S 8 T (}) N
(95) # () S 4 T (}) N
(96) # () N
(97) # () S 4 T () S
(/**) C n
(98) # () S 4 T ( * Lancement du serveur de chat) N
(99) # () S 4 T ( */) N
(100) # () S
() p 4 T (@Override) N
(101) # () S 4 T () S
(protected) K
( ) p
(void) k
( launch\(\)) p n
(102) # () S 4 T ({) N
(103) # () S 4 T () S 8 T () S
(/*) c n
(104) # () S 4 T () S 8 T ( * Create and Launch server on local ip adress with port number and verbose) N
(105) # () S 4 T () S 8 T ( * status) N
(106) # () S 4 T () S 8 T ( */) N
(107) # () S
() p 4 T () S 8 T (logger.info\(") S
(Creating server on port ) str
(" + port + ") p
( with timeout ) str
(") p n
(108) # () S 4 T () S 8 T () S 12 T () S 16 T (+ timeout + ") S
( ms and verbose ) str
(" + \(verbose ? ") p
(on) str
(" : ") p
(off) str
("\)\);) p n
(109) # () N
(110) # () S 4 T () S 8 T (ChatServer server = ) S
(null) k
(;) p n
(111) # () S 4 T () S 8 T () S
(try) K n
(112) # () S
() p 4 T () S 8 T ({) N
(113) # () S 4 T () S 8 T () S 12 T (server = ) S
(new) K
( ChatServer\(port, timeout, quitOnLastclient, logger\);) p n
(114) # () S 4 T () S 8 T (}) N
(115) # () S 4 T () S 8 T () S
(catch) K
( \(SocketException se\)) p n
(116) # () S 4 T () S 8 T ({) N
(117) # () S 4 T () S 8 T () S 12 T (logger.severe\(Failure.SET_SERVER_SOCKET_TIMEOUT + ") S
(, abort ...) str
("\);) p n
(118) # () S 4 T () S 8 T () S 12 T (logger.severe\(se.getLocalizedMessage\(\)\);) N
(119) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.SET_SERVER_SOCKET_TIMEOUT.toInteger\(\)\);) N
(120) # () S 4 T () S 8 T (}) N
(121) # () S 4 T () S 8 T () S
(catch) K
( \(IOException e\)) p n
(122) # () S 4 T () S 8 T ({) N
(123) # () S 4 T () S 8 T () S 12 T (logger.severe\(Failure.CREATE_SERVER_SOCKET + ") S
(, abort ...) str
("\);) p n
(124) # () S 4 T () S 8 T () S 12 T (e.printStackTrace\(\);) N
(125) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.CREATE_SERVER_SOCKET.toInteger\(\)\);) N
(126) # () S 4 T () S 8 T (}) N
(127) # () N
(128) # () S 4 T () S 8 T () S
(// Wait for serverThread to stop) c n
(129) # () S
() p 4 T () S 8 T (Thread serverThread = ) S
(null) k
(;) p n
(130) # () S 4 T () S 8 T () S
(if) K
( \(server ) p
(\271) sy
( ) p
(null) k
(\)) p n
(131) # () S 4 T () S 8 T ({) N
(132) # () S 4 T () S 8 T () S 12 T (serverThread = ) S
(new) K
( Thread\(server\);) p n
(133) # () S 4 T () S 8 T () S 12 T (serverThread.start\(\);) N
(134) # () N
(135) # () S 4 T () S 8 T () S 12 T (logger.info\(") S
(Waiting for server to terminate ... ) str
("\);) p n
(136) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(137) # () S
() p 4 T () S 8 T () S 12 T ({) N
(138) # () S 4 T () S 8 T () S 12 T () S 16 T (serverThread.join\(\);) N
(139) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.fine\(") S
(Server terminated, program end.) str
("\);) p n
(140) # () S 4 T () S 8 T () S 12 T (}) N
(141) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(InterruptedException e\)) p n
(142) # () S 4 T () S 8 T () S 12 T ({) N
(143) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(") S
(Server Thread Join interrupted) str
("\);) p n
(144) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(145) # () S 4 T () S 8 T () S 12 T (}) N
(146) # () S 4 T () S 8 T (}) N
(147) # () S 4 T (}) N
(148) # () N
(149) # () S 4 T () S
(/**) C n
(150) # () S 4 T ( * Programme principal) N
(151) # () S 4 T ( * @param args les arguments) N
(152) # () S 4 T ( * <ul>) N
(153) # () S 4 T ( * ) S 8 T (<li>--port <port number> : set host connection port</li>) N
(154) # () S 4 T ( * ) S 8 T (<li>--verbose : set verbose on</li>) N
(155) # () S 4 T ( * ) S 8 T (<li>--timeout <timeout in ms> : server socket waiting time out</li>) N
(156) # () S 4 T ( * </ul>) N
(157) # () S 4 T ( */) N
(158) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(159) # () S 4 T ({) N
(160) # () S 4 T () S 8 T (RunChatServer server = ) S
(new) K
( RunChatServer\(args\);) p n
(161) # () N
(162) # () S 4 T () S 8 T (server.launch\(\);) N
(163) # () S 4 T (}) N
(164) # (}) N
(RunChatServer.java) (Page 2/2) (avril 13, 16 18:48) title
border
grestore
(Printed by Pierre) rhead
(src/RunChatServer.java) (55/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 56
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (import) K
( java.awt.EventQueue;) p n
(2) # () S
(import) K
( java.io.IOException;) p n
(3) # () S
(import) K
( java.io.InputStream;) p n
(4) # () S
(import) K
( java.io.OutputStream;) p n
(5) # () S
(import) K
( java.io.PipedInputStream;) p n
(6) # () S
(import) K
( java.io.PipedOutputStream;) p n
(7) # () S
(import) K
( java.net.InetAddress;) p n
(8) # () S
(import) K
( java.net.UnknownHostException;) p n
(9) # () S
(import) K
( java.util.Vector;) p n
(10) # () N
(11) # () S
(import) K
( chat.Failure;) p n
(12) # () S
(import) K
( chat.UserOutputType;) p n
(13) # () S
(import) K
( chat.client.ChatClient;) p n
(14) # () S
(import) K
( widgets.AbstractClientFrame;) p n
(15) # () S
(import) K
( widgets.ClientFrame;) p n
(16) # () S
(import) K
( widgets.ClientFrame2;) p n
(17) # () N
(18) # () S
(/**) C n
(19) # ( * Lanceur d'un client de chat.) N
(20) # ( *) N
(21) # ( * @author davidroussel) N
(22) # ( */) N
(23) # () S
(public) K
( ) p
(class) K
( ) p
(RunChatClient) L
( ) p
(extends) K
( AbstractRunChat) p n
(24) # ({) N
(25) # () S 4 T () S
(/**) C n
(26) # () S 4 T ( * H\303\264te sur lequel se trouve le serveur de chat) N
(27) # () S 4 T ( */) N
(28) # () S
() p 4 T () S
(private) K
( String host;) p n
(29) # () N
(30) # () S 4 T () S
(/**) C n
(31) # () S 4 T ( * Nom d'utilisateur \303\240 utiliser pour se connecter au serveur. Si le nom) N
(32) # () S 4 T ( * n'est pas fournit) N
(33) # () S 4 T ( */) N
(34) # () S
() p 4 T () S
(private) K
( String name;) p n
(35) # () N
(36) # () S 4 T () S
(/**) C n
(37) # () S 4 T ( * Flux d'entr\303\251e sur lequel lire les messages tap\303\251s par l'utilisateur) N
(38) # () S 4 T ( */) N
(39) # () S
() p 4 T () S
(private) K
( InputStream userIn;) p n
(40) # () N
(41) # () S 4 T () S
(/**) C n
(42) # () S 4 T ( * Flux de sortie sur lequel envoyer les messages vers l'utilisateur) N
(43) # () S 4 T ( */) N
(44) # () S
() p 4 T () S
(private) K
( OutputStream userOut;) p n
(45) # () N
(46) # () S 4 T () S
(/**) C n
(47) # () S 4 T ( * Indique si le client \303\240 cr\303\251er est un GUI ou pas) N
(48) # () S 4 T ( */) N
(49) # () S
() p 4 T () S
(private) K
( ) p
(boolean) k
( gui;) p n
(50) # () N
(51) # () S 4 T () S
(/**) C n
(52) # () S 4 T ( * La version de l'interface graphique \303\240 lancer:) N
(53) # () S 4 T ( * <ul>) N
(54) # () S 4 T ( * ) S 8 T (<li>version 1 correspond \303\240 l'utilisation d'une ClientFrame</li>) N
(55) # () S 4 T ( * ) S 8 T (<li>version 2 correspond \303\240 l'utilisation d'une SuperClientFrame</li>) N
(56) # () S 4 T ( * </ul>) N
(57) # () S 4 T ( */) N
(58) # () S
() p 4 T () S
(private) K
( ) p
(int) k
( guiVersion;) p n
(59) # () N
(60) # () S 4 T () S
(/**) C n
(61) # () S 4 T ( * Ensemble des threads des clients.) N
(62) # () S 4 T ( * Il faudra attendre la fin de ces threads pour terminer l'ex\303\251cution) N
(63) # () S 4 T ( * principal.) N
(64) # () S 4 T ( */) N
(65) # () S
() p 4 T () S
(private) K
( Vector<Thread> threadPool;) p n
(66) # () N
(67) # () S 4 T () S
(/**) C n
(68) # () S 4 T ( * Constructeur d'un lanceur de client d'apr\303\250s les arguments du programme) N
(69) # () S 4 T ( * principal) N
(70) # () S 4 T ( *) N
(71) # () S 4 T ( * @param args les arguments du programme principal) N
(72) # () S 4 T ( */) N
(73) # () S
() p 4 T () S
(protected) K
( RunChatClient\(String[] args\)) p n
(74) # () S 4 T ({) N
(75) # () S 4 T () S 8 T () S
(super) K
(\(args\);) p n
(76) # () N
(77) # () S 4 T () S 8 T () S
(/*) c n
(78) # () S 4 T () S 8 T ( * Initialisation des flux d'I/O utilisateur \303\240 null) N
(79) # () S 4 T () S 8 T ( * ils d\303\251pendront du client \303\240 cr\303\251er \(console ou GUI\)) N
(80) # () S 4 T () S 8 T ( */) N
(81) # () S
() p 4 T () S 8 T (userIn = ) S
(null) k
(;) p n
(82) # () S 4 T () S 8 T (userOut = ) S
(null) k
(;) p n
(RunChatClient.java) (Page 1/5) (mai 22, 17 11:24) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(83) # () p n
(84) # () S 4 T () S 8 T () S
(/*) c n
(85) # () S 4 T () S 8 T ( * Initialisation du pool de thread des clients) N
(86) # () S 4 T () S 8 T ( */) N
(87) # () S
() p 4 T () S 8 T (threadPool = ) S
(new) K
( Vector<Thread>\(\);) p n
(88) # () S 4 T (}) N
(89) # () N
(90) # () S 4 T () S
(/**) C n
(91) # () S 4 T ( * Mise en place des attributs du client de chat en fonction des arguments) N
(92) # () S 4 T ( * utilis\303\251s dans la ligne de commande) N
(93) # () S 4 T ( * @param args les arguments fournis au programme principal.) N
(94) # () S 4 T ( */) N
(95) # () S
() p 4 T (@Override) N
(96) # () S 4 T () S
(protected) K
( ) p
(void) k
( setAttributes\(String[] args\)) p n
(97) # () S 4 T ({) N
(98) # () S 4 T () S 8 T () S
(/*) c n
(99) # () S 4 T () S 8 T ( * parsing des arguments communs aux clients et serveur) N
(100) # () S 4 T () S 8 T ( * -v | --verbose) N
(101) # () S 4 T () S 8 T ( * -p | --port : port \303\240 utiliser pour la serverSocket) N
(102) # () S 4 T () S 8 T ( */) N
(103) # () S
() p 4 T () S 8 T (super.setAttributes\(args\);) N
(104) # () N
(105) # () S 4 T () S 8 T () S
(/*) c n
(106) # () S 4 T () S 8 T ( * On met d'abord les attributs locaux \303\240 leur valeur par d\303\251faut) N
(107) # () S 4 T () S 8 T ( */) N
(108) # () S
() p 4 T () S 8 T (host = ) S
(null) k
(;) p n
(109) # () S 4 T () S 8 T (name = ) S
(null) k
(;) p n
(110) # () S 4 T () S 8 T (gui = ) S
(false) k
(;) p n
(111) # () N
(112) # () S 4 T () S 8 T () S
(/*) c n
(113) # () S 4 T () S 8 T ( * parsing des arguments sp\303\251cifique au client) N
(114) # () S 4 T () S 8 T ( * -h | --host : nom ou adresse IP du serveur) N
(115) # () S 4 T () S 8 T ( * -n | --name : nom d'utilisateur) N
(116) # () S 4 T () S 8 T ( * -g | --gui : pour lancer le client GUI) N
(117) # () S 4 T () S 8 T ( */) N
(118) # () S
() p 4 T () S 8 T () S
(for) K
( \() p
(int) k
( i = 0; i < args.length; i++\)) p n
(119) # () S 4 T () S 8 T ({) N
(120) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(args[i].equals\(") p
(--host) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-h) str
("\)\)) p n
(121) # () S 4 T () S 8 T () S 12 T ({) N
(122) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(i < \(args.length - 1\)\)) p n
(123) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(124) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// parse next arg for in port value) c n
(125) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (host = args[++i];) N
(126) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.fine\(") S
(Setting host to ) str
(" + host\);) p n
(127) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(128) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(129) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(130) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.warning\(") S
(Setting host to: nothing, invalid value) str
("\);) p n
(131) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(132) # () S 4 T () S 8 T () S 12 T (}) N
(133) # () S 4 T () S 8 T () S 12 T () S
(else) K
( ) p
(if) K
( \(args[i].equals\(") p
(--name) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-n) str
("\)\)) p n
(134) # () S 4 T () S 8 T () S 12 T ({) N
(135) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(i < \(args.length - 1\)\)) p n
(136) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(137) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// parse next arg for in port value) c n
(138) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (name = args[++i];) N
(139) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.fine\(") S
(Setting user name to: ) str
(" + name\);) p n
(140) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(141) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(142) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(143) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.warning\(") S
(Setting user name to: nothing, invalid value) str
("\);) p n
(144) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(145) # () S 4 T () S 8 T () S 12 T (}) N
(146) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(args[i].equals\(") p
(--gui) str
("\) ) p
(\332) sy
( args[i].equals\(") p
(-g) str
("\)\)) p n
(147) # () S 4 T () S 8 T () S 12 T ({) N
(148) # () S 4 T () S 8 T () S 12 T () S 16 T (gui = ) S
(true) k
(;) p n
(149) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
( \(i < \(args.length - 1\)\)) p n
(150) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(151) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// parse next arg for gui version) c n
(152) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(try) K n
(153) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(154) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (guiVersion = Integer.parseInt\(args[++i]\);) N
(155) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(if) K
( \(guiVersion < 1\)) p n
(156) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(157) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (guiVersion = 1;) N
(158) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(159) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(else) K
( ) p
(if) K
( \(guiVersion > 2\)) p n
(160) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(161) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (guiVersion = 2;) N
(162) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(163) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(164) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(catch) K
( \(NumberFormatException nfe\)) p n
(RunChatClient.java) (Page 2/5) (mai 22, 17 11:24) title
border
grestore
(Printed by Pierre) rhead
(src/RunChatClient.java) (56/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 57
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(165) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(166) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.warning\(") S
(Invalid gui number, revert to 1) str
("\);) p n
(167) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (guiVersion = 1;) N
(168) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(169) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.fine\(") S
(Setting gui to ) str
(" + guiVersion\);) p n
(170) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(171) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(else) K n
(172) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(173) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.warning\(") S
(ReSetting gui version to 1, invalid value) str
("\);) p n
(174) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (guiVersion = 1;) N
(175) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(176) # () S 4 T () S 8 T () S 12 T (}) N
(177) # () S 4 T () S 8 T (}) N
(178) # () N
(179) # () S 4 T () S 8 T () S
(if) K
( \(host ) p
(\272) sy
( ) p
(null) k
(\) ) p
(// on va chercher local host) c n
(180) # () S
() p 4 T () S 8 T ({) N
(181) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(182) # () S
() p 4 T () S 8 T () S 12 T ({) N
(183) # () S 4 T () S 8 T () S 12 T () S 16 T (host = InetAddress.getLocalHost\(\).getHostName\(\);) N
(184) # () S 4 T () S 8 T () S 12 T (}) N
(185) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(UnknownHostException e\)) p n
(186) # () S 4 T () S 8 T () S 12 T ({) N
(187) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(Failure.NO_LOCAL_HOST.toString\(\)\);) N
(188) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(189) # () S 4 T () S 8 T () S 12 T () S 16 T (System.exit\(Failure.NO_LOCAL_HOST.toInteger\(\)\);) N
(190) # () S 4 T () S 8 T () S 12 T (}) N
(191) # () S 4 T () S 8 T (}) N
(192) # () N
(193) # () S 4 T () S 8 T () S
(if) K
( \(name ) p
(\272) sy
( ) p
(null) k
(\) ) p
(// on va chercher le nom de l'utilisateur) c n
(194) # () S
() p 4 T () S 8 T ({) N
(195) # () S 4 T () S 8 T () S 12 T () S
(try) K n
(196) # () S
() p 4 T () S 8 T () S 12 T ({) N
(197) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Try LOGNAME on unix type systems) c n
(198) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (name = System.getenv\(") S
(LOGNAME) str
("\);) p n
(199) # () S 4 T () S 8 T () S 12 T (}) N
(200) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(NullPointerException npe\)) p n
(201) # () S 4 T () S 8 T () S 12 T ({) N
(202) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.warning\(") S
(no LOGNAME found, trying USERNAME) str
("\);) p n
(203) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(try) K n
(204) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(205) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Try USERNAME on other systems) c n
(206) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (name = System.getenv\(") S
(USERNAME) str
("\);) p n
(207) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(208) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(catch) K
( \(NullPointerException npe2\)) p n
(209) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(210) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.severe\(Failure.NO_USER_NAME + ") S
( abort) str
("\);) p n
(211) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (System.exit\(Failure.NO_USER_NAME.toInteger\(\)\);) N
(212) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(213) # () S 4 T () S 8 T () S 12 T (}) N
(214) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(SecurityException se\)) p n
(215) # () S 4 T () S 8 T () S 12 T ({) N
(216) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(Failure.NO_ENV_ACCESS + ") S
( !) str
("\);) p n
(217) # () S 4 T () S 8 T () S 12 T () S 16 T (System.exit\(Failure.NO_ENV_ACCESS.toInteger\(\)\);) N
(218) # () S 4 T () S 8 T () S 12 T (}) N
(219) # () S 4 T () S 8 T (}) N
(220) # () S 4 T (}) N
(221) # () N
(222) # () S 4 T () S
(/**) C n
(223) # () S 4 T ( * Lancement du ChatClient) N
(224) # () S 4 T ( */) N
(225) # () S
() p 4 T (@Override) N
(226) # () S 4 T () S
(protected) K
( ) p
(void) k
( launch\(\)) p n
(227) # () S 4 T ({) N
(228) # () S 4 T () S 8 T () S
(/*) c n
(229) # () S 4 T () S 8 T ( * Create and Launch client) N
(230) # () S 4 T () S 8 T ( */) N
(231) # () S
() p 4 T () S 8 T (logger.info\(") S
(Creating client to ) str
(" + host + ") p
( at port ) str
(" + port) p n
(232) # () S 4 T () S 8 T () S 12 T () S 16 T (+ ") S
( with verbose ) str
(" + \(verbose ? ") p
(on) str
(" : ") p
(off ... ) str
("\)\);) p n
(233) # () N
(234) # () S 4 T () S 8 T (Boolean commonRun;) N
(235) # () N
(236) # () S 4 T () S 8 T () S
(if) K
( \(gui\)) p n
(237) # () S 4 T () S 8 T ({) N
(238) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(System.getProperty\(") p
(os.name) str
("\).startsWith\(") p
(Mac OS) str
("\)\)) p n
(239) # () S 4 T () S 8 T () S 12 T ({) N
(240) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Met en place le menu en haut de l'\303\251cran plut\303\264t que dans l'application) c n
(241) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (System.setProperty\(") S
(apple.laf.useScreenMenuBar) str
(", ") p
(true) str
("\);) p n
(242) # () S 4 T () S 8 T (        System.setProperty\(") S
(com.apple.mrj.application.apple.menu.about.name) str
(", ") p
(Name) str
("\);) p n
(243) # () S 4 T () S 8 T () S 12 T (}) N
(244) # () N
(245) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(246) # () S 4 T () S 8 T () S 12 T ( * On a besoin d'un commonRun entre la frame et les ServerHandler) N
(RunChatClient.java) (Page 3/5) (mai 22, 17 11:24) title
border
/v 1 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(247) # () c 4 T () S 8 T () S 12 T ( * et UserHandler du client cr\303\251\303\251 plus bas.) N
(248) # () S 4 T () S 8 T () S 12 T ( */) N
(249) # () S
() p 4 T () S 8 T () S 12 T (commonRun = Boolean.TRUE;) N
(250) # () N
(251) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(252) # () S 4 T () S 8 T () S 12 T ( * Cr\303\251ation de la fen\303\252tre de chat) N
(253) # () S 4 T () S 8 T () S 12 T ( * TODO \303\240 customizer lorsrque vous aurez cr\303\251\303\251 la classe) N
(254) # () S 4 T () S 8 T () S 12 T ( * ClientFrame2) N
(255) # () S 4 T () S 8 T () S 12 T ( */) N
(256) # () S
() p 4 T () S 8 T () S 12 T () N
(257) # () S 4 T () S 8 T () S 12 T (AbstractClientFrame tmp = ) S
(null) k
(;) p n
(258) # () S 4 T () S 8 T () S 12 T () N
(259) # () S 4 T () S 8 T () S 12 T () S
(if) K
( \(guiVersion ) p
(\272) sy
( 1\)) p n
(260) # () S 4 T () S 8 T () S 12 T () S 16 T (tmp = ) S
(new) K
( ClientFrame\(name, host, commonRun, logger\);) p n
(261) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(262) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (tmp = ) S
(new) K
( ClientFrame2\(name, host, commonRun, logger\);) p n
(263) # () S 4 T () S 8 T () S 12 T () N
(264) # () S 4 T () S 8 T () S 12 T () S
(final) K
( AbstractClientFrame frame = tmp;) p n
(265) # () N
(266) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(267) # () S 4 T () S 8 T () S 12 T ( * TODO Cr\303\251ation du flux de sortie vers le GUI : userOut \303\240 partir du) N
(268) # () S 4 T () S 8 T () S 12 T ( * flux d'entr\303\251e de la frame \(ClientFrame#getInPipe\(\)\)) N
(269) # () S 4 T () S 8 T () S 12 T ( * ) S 16 T (- Creation d'un PipedOutputStream \303\240 connecter sur) N
(270) # () S 4 T () S 8 T () S 12 T ( * ) S 16 T (- le PipedInputStream de la frame) N
(271) # () S 4 T () S 8 T () S 12 T ( */) N
(272) # () S
() p 4 T () S 8 T () S 12 T () S
(try) K n
(273) # () S
() p 4 T () S 8 T () S 12 T ({) N
(274) # () S 4 T () S 8 T () S 12 T () S 16 T (userOut = ) S
(new) K
( PipedOutputStream\(frame.getInPipe\(\)\);) p n
(275) # () S 4 T () S 8 T () S 12 T (}) N
(276) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(IOException e\)) p n
(277) # () S 4 T () S 8 T () S 12 T ({) N
(278) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(Failure.USER_OUTPUT_STREAM) N
(279) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (+ ") S
( unable to get piped out stream) str
("\);) p n
(280) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(281) # () S 4 T () S 8 T () S 12 T () S 16 T (System.exit\(Failure.USER_OUTPUT_STREAM.toInteger\(\)\);) N
(282) # () S 4 T () S 8 T () S 12 T (}) N
(283) # () N
(284) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(285) # () S 4 T () S 8 T () S 12 T ( * TODO Cr\303\251ation du flux d'entr\303\251e depuis le GUI : userIn \303\240 partir du) N
(286) # () S 4 T () S 8 T () S 12 T ( * flux de sortie de la frame \(ClientFrame#getOutPipe\(\)\)) N
(287) # () S 4 T () S 8 T () S 12 T ( * ) S 16 T (- Cr\303\251ation d'un PipedInputStream \303\240 connecter sur) N
(288) # () S 4 T () S 8 T () S 12 T ( * ) S 16 T (- le PipedOutputStream de la frame) N
(289) # () S 4 T () S 8 T () S 12 T ( */) N
(290) # () S
() p 4 T () S 8 T () S 12 T () S
(try) K n
(291) # () S
() p 4 T () S 8 T () S 12 T ({) N
(292) # () S 4 T () S 8 T () S 12 T () S 16 T (userIn = ) S
(new) K
( PipedInputStream\(frame.getOutPipe\(\)\);) p n
(293) # () S 4 T () S 8 T () S 12 T (}) N
(294) # () S 4 T () S 8 T () S 12 T () S
(catch) K
( \(IOException e\)) p n
(295) # () S 4 T () S 8 T () S 12 T ({) N
(296) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(Failure.USER_INPUT_STREAM) N
(297) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (+ ") S
( unable to get user piped in stream) str
("\);) p n
(298) # () S 4 T () S 8 T () S 12 T () S 16 T (logger.severe\(e.getLocalizedMessage\(\)\);) N
(299) # () S 4 T () S 8 T () S 12 T () S 16 T (System.exit\(Failure.USER_INPUT_STREAM.toInteger\(\)\);) N
(300) # () S 4 T () S 8 T () S 12 T (}) N
(301) # () N
(302) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(303) # () S 4 T () S 8 T () S 12 T ( * Insertion de la frame dans la file des \303\251v\303\250nements GUI) N
(304) # () S 4 T () S 8 T () S 12 T ( * gr\303\242ce \303\240 un Runnable anonyme) N
(305) # () S 4 T () S 8 T () S 12 T ( */) N
(306) # () S
() p 4 T () S 8 T () S 12 T (EventQueue.invokeLater\() S
(new) K
( Runnable\(\)) p n
(307) # () S 4 T () S 8 T () S 12 T ({) N
(308) # () S 4 T () S 8 T () S 12 T () S 16 T (@Override) N
(309) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(public) K
( ) p
(void) k
( run\(\)) p n
(310) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(311) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(try) K n
(312) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(313) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (frame.pack\(\);) N
(314) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (frame.setVisible\() S
(true) k
(\);) p n
(315) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(316) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(catch) K
( \(Exception e\)) p n
(317) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(318) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (logger.severe\(") S
(GUI Runnable::pack & setVisible) str
(" + e.getLocalizedMessage\(\)\);) p n
(319) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(320) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(321) # () S 4 T () S 8 T () S 12 T (}\);) N
(322) # () N
(323) # () S 4 T () S 8 T () S 12 T () S
(/*) c n
(324) # () S 4 T () S 8 T () S 12 T ( * Cr\303\251ation et lancement du thread de la frame) N
(325) # () S 4 T () S 8 T () S 12 T ( */) N
(326) # () S
() p 4 T () S 8 T () S 12 T (Thread guiThread = ) S
(new) K
( Thread\(frame\);) p n
(327) # () S 4 T () S 8 T () S 12 T (threadPool.add\(guiThread\);) N
(328) # () S 4 T () S 8 T () S 12 T (guiThread.start\(\);) N
(RunChatClient.java) (Page 4/5) (mai 22, 17 11:24) title
border
grestore
(Printed by Pierre) rhead
(src/RunChatClient.java) (57/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 58
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.572368 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(329) # () p n
(330) # () S 4 T () S 8 T (}) N
(331) # () S 4 T () S 8 T () S
(else) K
( ) p
(// client console) c n
(332) # () S
() p 4 T () S 8 T ({) N
(333) # () S 4 T () S 8 T () S 12 T () S
(// lecture depuis la console) c n
(334) # () S
() p 4 T () S 8 T () S 12 T (userIn = System.in;) N
(335) # () S 4 T () S 8 T () S 12 T () S
(// \303\251criture vers la console) c n
(336) # () S
() p 4 T () S 8 T () S 12 T (userOut = System.out;) N
(337) # () S 4 T () S 8 T () S 12 T () S
(// On a pas besoin d'un commonRun avec le client console) c n
(338) # () S
() p 4 T () S 8 T () S 12 T (commonRun = ) S
(null) k
(;) p n
(339) # () S 4 T () S 8 T (}) N
(340) # () N
(341) # () S 4 T () S 8 T () S
(/*) c n
(342) # () S 4 T () S 8 T ( * Lancement du ChatClient) N
(343) # () S 4 T () S 8 T ( */) N
(344) # () S
() p 4 T () S 8 T (UserOutputType outType = UserOutputType.fromInteger\(guiVersion\);) N
(345) # () S 4 T () S 8 T (ChatClient client = ) S
(new) K
( ChatClient\(host,) p 52 T () S 56 T () S
(// h\303\264te du serveur) c n
(346) # () S
() p 4 T () S 8 T (                                   port,) S 52 T () S 56 T () S
(// port tcp) c n
(347) # () S
() p 4 T () S 8 T (                                   name,) S 52 T () S 56 T () S
(// nom d'utilisateur) c n
(348) # () S
() p 4 T () S 8 T (                                   userIn,) S 52 T () S 56 T () S
(// entr\303\251es utilisateur) c n
(349) # () S
() p 4 T () S 8 T (                                   userOut,) S 52 T () S 56 T () S
(// sorties utilisateur) c n
(350) # () S
() p 4 T () S 8 T (                                   outType,) S 52 T () S 56 T () S
(// Type sortie utilisateur) c n
(351) # () S
() p 4 T () S 8 T (                                   commonRun,) S 56 T () S
(// commonRun avec le GUI) c n
(352) # () S
() p 4 T () S 8 T (                                   logger\);) S 52 T () S 56 T () S
(// parent logger) c n
(353) # () S
() p 4 T () S 8 T () S
(if) K
( \(client.isReady\(\)\)) p n
(354) # () S 4 T () S 8 T ({) N
(355) # () S 4 T () S 8 T () S 12 T (Thread clientThread = ) S
(new) K
( Thread\(client\);) p n
(356) # () S 4 T () S 8 T () S 12 T (threadPool.add\(clientThread\);) N
(357) # () N
(358) # () S 4 T () S 8 T () S 12 T (clientThread.start\(\);) N
(359) # () N
(360) # () S 4 T () S 8 T () S 12 T (logger.fine\(") S
(client launched) str
("\);) p n
(361) # () N
(362) # () S 4 T () S 8 T () S 12 T () S
(// attente de l'ensemble des threads du threadPool pour terminer) c n
(363) # () S
() p 4 T () S 8 T () S 12 T () S
(for) K
( \(Thread t : threadPool\)) p n
(364) # () S 4 T () S 8 T () S 12 T ({) N
(365) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(try) K n
(366) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(367) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (t.join\(\);) N
(368) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.fine\(") S
(client thread end) str
("\);) p n
(369) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(370) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(catch) K
( \(InterruptedException e\)) p n
(371) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(372) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (logger.severe\(") S
(join interrupted) str
(" + e.getLocalizedMessage\(\)\);) p n
(373) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(374) # () S 4 T () S 8 T () S 12 T (}) N
(375) # () S 4 T () S 8 T (}) N
(376) # () S 4 T () S 8 T () S
(else) K n
(377) # () S
() p 4 T () S 8 T ({) N
(378) # () S 4 T () S 8 T () S 12 T (logger.severe\(Failure.CLIENT_NOT_READY + ") S
( abort ...) str
("\);) p n
(379) # () S 4 T () S 8 T () S 12 T (System.exit\(Failure.CLIENT_NOT_READY.toInteger\(\)\);) N
(380) # () S 4 T () S 8 T (}) N
(381) # () S 4 T (}) N
(382) # () N
(383) # () S 4 T () S
(/**) C n
(384) # () S 4 T ( * Programme principal de lancement d'un client de chat) N
(385) # () S 4 T ( * @param args argument du programme) N
(386) # () S 4 T ( * <ul>) N
(387) # () S 4 T ( * <li>--host <host address> : set host to connect to</li>) N
(388) # () S 4 T ( * <li>--port <port number> : set host connection port</li>) N
(389) # () S 4 T ( * <li>--name <user name> : user name to use to connect</li>) N
(390) # () S 4 T ( * <li>--verbose : set verbose on</li>) N
(391) # () S 4 T ( * <li>--gui <1 or 2>: use graphical interface rather than console interface) N
(392) # () S 4 T ( * </li>) N
(393) # () S 4 T ( * </ul>) N
(394) # () S 4 T ( */) N
(395) # () S
() p 4 T () S
(public) K
( ) p
(static) K
( ) p
(void) k
( main\(String[] args\)) p n
(396) # () S 4 T ({) N
(397) # () N
(398) # () S 4 T () S 8 T (RunChatClient client = ) S
(new) K
( RunChatClient\(args\);) p n
(399) # () N
(400) # () S 4 T () S 8 T (client.launch\(\);) N
(401) # () S 4 T (}) N
(402) # (}) N
(RunChatClient.java) (Page 5/5) (mai 22, 17 11:24) title
border
grestore
(Printed by Pierre) rhead
(src/RunChatClient.java) (58/58) (lundi mai 22, 2017) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
